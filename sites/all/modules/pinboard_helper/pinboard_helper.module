<?php

require_once drupal_get_path('module', 'pinboard_helper') . '/pinboard_helper.define.inc';
require_once drupal_get_path('module', 'pinboard_helper') . '/gifanim/gifsplit.php';
require_once drupal_get_path('module', 'pinboard_helper') . '/gifanim/scale_gif_file.php';
if (!module_exists('simplehtmldom')) {
  require_once drupal_get_path('module', 'pinboard_helper') . '/simple_html_dom.php';
}

function pinboard_helper_requirements($phase) {
  $requirements = array();
  $requirements['pinboard_helper'] = array(
    'title' => t('Pin Board'),
    'value' => '7-2.17 (2014.07.21)',
    //'description' => '',
    'weight' => '-9',
    'severity' => REQUIREMENT_INFO,
  );
  return $requirements;
}

/**
 * Implements hook_init().
 */
function pinboard_helper_init() {
//drupal_set_message(t('init'));
//define('PINBOARD_REPLACE_TITLE_REPIN', 'Repinaaa');
  if (arg(0) == PINBOARD_REPLACE_PATH_REPIN or (arg(0) == 'node' and arg(2) == 'edit') or (arg(0) == 'node' and arg(1) == 'add' and arg(2) == PINBOARD_REPLACE_PATH_PIN) ) drupal_add_js(drupal_get_path('module', 'pinboard_helper').'/acb.js');
}

function pinboard_helper_const($nc, $na = array()) {
  $str = theme_get_setting(strtolower($nc));
  if (!$str) {
    $str = constant(strtoupper($nc));
  }
  return t($str, $na);
}

/**
 * Implements hook_menu().
 */
function pinboard_helper_menu() {
  $menu = array();

  $menu[PINBOARD_REPLACE_PATH_REPIN] = array(
    'title' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_REPIN'),
    'page callback' => 'pinboard_helper_repin',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
//    'file' => drupal_get_path('module', 'node').'/node.pages.inc',
  );

  $menu[PINBOARD_REPLACE_PATH_PINBOARD.'/autocomplete'] = array(
    'title' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_PINBOARD'),
    'page callback' => 'pinboard_helper_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,

//    'file' => 'taxonomy.pages.inc',
  );
  $menu[PINBOARD_REPLACE_PATH_ADDBOARDPIN] = array(
    'title' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_ADDBOARDPIN'),
    'page callback' => 'pinboard_helper_addboardpin',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $menu[PINBOARD_REPLACE_PATH_PINIT] = array(
    'title' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_PINBOARD'),
    'page callback' => 'pinboard_helper_pinit_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $menu[PINBOARD_REPLACE_PATH_ADDPINIT] = array(
    'title' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_ADDPINIT'),    
    'page callback' => 'pinboard_helper_addpinit',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $menu[PINBOARD_REPLACE_PATH_FOLLOW] = array(
    'title' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_FOLLOW'),    
    'page callback' => 'pinboard_helper_follow',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $menu[PINBOARD_REPLACE_PATH_UNFOLLOW] = array(
    'title' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_UNFOLLOW'),    
    'page callback' => 'pinboard_helper_unfollow',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $menu[PINBOARD_REPLACE_PATH_YOUFOLLOW] = array(
    'title' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_YOUFOLLOW'),
    'page callback' => 'pinboard_helper_youfollow',
    'access callback' => 'pinboard_helper_follow_access',
    'type' => MENU_NORMAL_ITEM,
  );
  $menu[PINBOARD_REPLACE_PATH_FOLLOWERS] = array(
    'title' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_FOLLOWERS'),
    'page callback' => 'pinboard_helper_followers',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $menu[PINBOARD_REPLACE_PATH_BOARD.'/add'] = array(
    'title' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_CREATE_BOARD'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinboard_helper_form_board_edit', 2),
    'access callback' => 'pinboard_helper_uacb_access',
    'type' => MENU_CALLBACK,
  );
  $menu[PINBOARD_REPLACE_PATH_BOARD.'/edit'] = array(
    'title' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_EDIT_BOARD'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinboard_helper_form_board_edit', 2),
    'access callback' => 'pinboard_helper_uacb_access',
    'type' => MENU_CALLBACK,
  );
  
  $menu[PINBOARD_REPLACE_PATH_ADDAPIN] = array(
    'title' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_ADDAPIN'),    
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinboard_helper_addapin', 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $menu['user/%/notifications'] = array(
    'title' => 'Notifications',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinboard_helper_notifications', 2),
    'access callback' => 'pinboard_helper_uac_access',
    //'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  
  $menu['like/vote/js'] = array(
    'page callback' => 'pinboard_helper_vote_ahah',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $menu['mobilefileupload'] = array(
    'page callback' => 'pinboard_helper_mobilefileupload',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $menu['pinboard_get_info'] = array(
    'page callback' => 'pinboard_helper_pin_it_get_info',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $menu['pinboard_get_filter'] = array(
    'page callback' => 'pinboard_helper_pin_it_get_filter',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $menu['nodeadd'.PINBOARD_REPLACE_PATH_PIN] = array(
    'page callback' => 'pinboard_helper_pin_it_nodeaddpin',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  
  $menu['pbmobile/getuser'] = array(
    'page callback' => 'pinboard_helper_mobile_getuser',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $menu['pbmobile/upload'] = array(
    'page callback' => 'pinboard_helper_mobilefileupload',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  
  return $menu;
}

function pinboard_helper_pin_it_nodeaddpin() {
  if (user_access('create '.PINBOARD_REPLACE_PATH_PIN.' content')) {
    if (arg(1)) {
      $get = unserialize(rawurldecode(arg(1)));
      drupal_goto('node/add/'.PINBOARD_REPLACE_PATH_PIN, array('query' => array('media' => $get['media'], 'url' => $get['url'], 'title' => $get['title'], 'is_video' => $get['is_video'], 'description' => $get['description'])));
    } else {
      drupal_goto('node/add/'.PINBOARD_REPLACE_PATH_PIN, array('query' => array('media' => $_GET['media'], 'url' => $_GET['url'], 'title' => $_GET['title'], 'is_video' => $_GET['is_video'], 'description' => $_GET['description'])));
    }
  } else {
    //drupal_set_message('<pre>'. check_plain(print_r($_GET, 1)) .'</pre>'); 
    $destination = rawurlencode(serialize(array('media' => $_GET['media'], 'url' => $_GET['url'], 'title' => $_GET['title'], 'is_video' => $_GET['is_video'], 'description' => $_GET['description'])));
    drupal_goto('user', array('query' => array('destination' => 'nodeadd'.PINBOARD_REPLACE_PATH_PIN.'/'.$destination)));
  }
}




/**
 * Implements hook_permission().
 */
function pinboard_helper_permission() {
  return array(
    'Visible Advanced Settings' => array(
      'title' => pinboard_helper_const('PINBOARD_REPLACE_VISIBLE_ADVANCED_SETTINGS'),
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function pinboard_helper_field_extra_fields() {
  $extra = array();

  foreach (node_type_get_types() as $type) {
    if ($type->has_title and $type->type == PINBOARD_REPLACE_PATH_PIN) {
      $extra['node'][$type->type] = array(
        'form' => array(
          'pinboard_board' => array(
            'label' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_BOARD'),
            'description' => t('Pinboard helper module element'),
            'weight' => -5,
          ),
          'pinboard_separator' => array(
            'label' => t('Separator - Advanced Settings'),
            'description' => t('All fields that are located below the separator are displayed in Advanced Settings'),
            'weight' => 3,
          ),
        ),
      );
    }
  }

  return $extra;
}

function pinboard_helper_vote_ahah() {
  $content_type = preg_replace('/[^\\w\\-]/', '', $_GET['content_type']);
  $content_id = (int) $_GET['content_id'];
  $widget_id = (int) $_GET['widget_id'];
  $widget_mode = (int) $_GET['widget_mode'];

  $widgets = variable_get('rate_widgets', array());
  $widget = $widgets[$widget_id];

  // Process options.
  foreach ($widget->options as $option) {
    // This name must be unique for all submit buttons across the page, AHAH will fail otherwise.
    $id = "opt-$widget_id-$content_type-$content_id-{$option[0]}";
    $token = rate_get_token($id);
    if (isset($_GET['token']) && $_GET['token'] == $token) {
      rate_save_vote($widget, $content_type, $content_id, $option[0], TRUE);
    }
  }

  // Process arbitrary value, used for sliders.
  if (isset($_GET['value']) && $widget->value_type == 'percent') {
    // Validate the token against the general widget token (found in the widget classes).
    $id = "rate-$widget_id-$content_type-$content_id";
    $token = _rate_get_token($id);
    $value = (int) $_GET['value'];
    if (isset($_GET['token']) && $_GET['token'] == $token && $value >= 0 && $value <= 100) {
      rate_save_vote($widget, $content_type, $content_id, $value, TRUE);
    }
  }
  $rateres = rate_get_results('node', $content_id, 1);
  print '<span class="likesresult">'.pinboard_helper_const('PINBOARD_REPLACE_COUNT_LIKES', array('!count' => $rateres['count'])).'</span>';
  //print str_replace('rate','like',rate_generate_widget($widget_id, $content_type, $content_id, $widget_mode, TRUE, TRUE));

  module_invoke_all('exit') & exit;
}


function pinboard_helper_flag_form($form, &$form_state) {
  global $user;

  $cats = drupal_explode_tags(str_replace("\n", ',', variable_get('user_mail_register_pinboard_helper_flag_types', PINBOARD_HELPER_FLAG_TYPES)));

  $categories = array();
  if (isset($cats) and is_array($cats)) {
    foreach ($cats as $key => $value) {
      $categories[t($value)] = t($value);
    }
  }

  $form['#attributes']['class'][] = 'contact-form';

  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Category'),
    '#options' => $categories,
    '#required' => TRUE,
    //'#access' => count($categories) > 1,
  );
  $form['is_anonymous'] = array(
    '#type' => 'value',
    '#value' => $user->uid,
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_FLAG_THIS_PIN'),
  );

  return $form;
}

function pinboard_helper_flag_form_submit($form, &$form_state) {
  global $user, $language;

  $values = $form_state['values'];
  $values['subject'] = t('Report');
  $values['message'] = t('Flags: ').$values['type']."\n".t('Node: ').url('node/'.arg(1), array('absolute' => TRUE))."\n";
  $values['category']['category'] = t('Flag');
  $values['sender'] = $user;
  if ($user->uid) {
    $values['sender']->name = $user->name;
    $values['sender']->mail = $user->mail;
  } else {
    $values['sender']->name = t('Anonymous');
    $values['sender']->mail = variable_get('site_mail', ini_get('sendmail_from'));
  }
  $to = variable_get('site_mail', ini_get('sendmail_from'));
  $from = $values['sender']->mail;

  drupal_mail('contact', 'page_mail', $to, language_default(), $values);

  watchdog('mail', '%sender-name (@sender-from) sent an e-mail regarding %category.', array('%sender-name' => $values['sender']->name, '@sender-from' => $from, '%category' => $values['category']['category']));

  drupal_set_message(t('Your message has been sent.'));
}


function pinboard_helper_notifications($form, &$form_state, $edit = array()) {
  global $user; 
  if (!$user->uid) drupal_goto();
  if (!isset($user->data['pinboard_helper']['notification_comments'])) $user->data['pinboard_helper']['notification_comments'] = variable_get('notify_comment_notification_def', 0);
  if (!isset($user->data['pinboard_helper']['notification_repin'])) $user->data['pinboard_helper']['notification_repin'] = variable_get('notify_repin_notification_def', 0);
  if (!isset($user->data['pinboard_helper']['notification_follower'])) $user->data['pinboard_helper']['notification_follower'] = variable_get('notify_follow_notification_def', 0);
  if (!isset($user->data['pinboard_helper']['notification_unfollowed'])) $user->data['pinboard_helper']['notification_unfollowed'] = variable_get('notify_unfollow_notification_def', 0);
  $options = array(
    1 => t('Always send notifications'),
    0 => t('Only one notification until the next login to the site'),
    2 => t('Never send notification'),
  );
  $form['notification_comments'] = array(
    '#type' => 'select',
    '#title' => t('Notification of new comments'),
    '#default_value' => $user->data['pinboard_helper']['notification_comments'],
    '#options' => $options,
    '#required' => false,
    //'#description' => t(''),
    //'#disabled' => $has_data,
  );
  $form['notification_repin'] = array(
    '#type' => 'select',
    '#title' => t('Notification of a new '.pinboard_helper_const('PINBOARD_REPLACE_TITLE_REPIN')),
    '#default_value' => $user->data['pinboard_helper']['notification_repin'],
    '#options' => $options,
    '#required' => false,
  );  
  $form['notification_follower'] = array(
    '#type' => 'select',
    '#title' => t('Notification of a new '.pinboard_helper_const('PINBOARD_REPLACE_TITLE_FOLLOWER')),
    '#default_value' => $user->data['pinboard_helper']['notification_follower'],
    '#options' => $options,
    '#required' => false,
  );
  $form['notification_unfollowed'] = array(
    '#type' => 'select',
    '#title' => t('Notification of a new '.pinboard_helper_const('PINBOARD_REPLACE_TITLE_UNFOLLOWER')),
    '#default_value' => $user->data['pinboard_helper']['notification_unfollowed'],
    '#options' => $options,
    '#required' => false,
  );
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save'));

  return $form;
}

function pinboard_helper_notifications_submit($form, &$form_state) {
  global $user;
  if (!$user->uid) drupal_goto();
  $time = time();  
  $data['data']['pinboard_helper']['notification_comments'] = $form_state['values']['notification_comments'];
  $data['data']['pinboard_helper']['notification_repin'] = $form_state['values']['notification_repin'];
  $data['data']['pinboard_helper']['notification_follower'] = $form_state['values']['notification_follower'];
  $data['data']['pinboard_helper']['notification_unfollowed'] = $form_state['values']['notification_unfollowed'];
  $data['data']['pinboard_helper']['notification_comments_t'] = $time;
  $data['data']['pinboard_helper']['notification_repin_t'] = $time;
  $data['data']['pinboard_helper']['notification_follower_t'] = $time;
  $data['data']['pinboard_helper']['notification_unfollowed_t'] = $time;

  $fid = $user->picture;
  unset($user->picture);
  $user->picture = new stdClass;
  $user->picture->fid = $fid;
  user_save($user, $data);
  
  drupal_set_message(t('settings have been saved'));
  $form_state['redirect'] = 'user/'.$user->uid.'/notifications';
}


function pinboard_helper_form_board_edit($form, &$form_state, $edit = array()) {
  global $user; 
  $arg = arg(2); $name = '';
  
  $us = db_select('pinboard_boards')->fields('pinboard_boards', array('uid'))->condition('bid', $arg, '=')->execute();
  foreach ($us as $uss) {
    if ($uss->uid != $user->uid and $user->uid != 1) {
      drupal_access_denied();
      return array();
    }
    $acc = user_load($uss->uid); 
  }
  if (!$arg) $acc = user_load($user->uid);
  $result = db_select('pinboard_boards')->fields('pinboard_boards', array('name'))->condition('bid', $arg, '=')->execute();
  foreach ($result as $us) {
    //$name = check_plain($us->name);
    $name = $us->name;
  }
  $result = db_select('pinboard_boards')->fields('pinboard_boards', array('data'))->condition('bid', $arg, '=')->execute();
  foreach ($result as $us) {
    $data = unserialize($us->data);
  }
  if (isset($data['category'])) $category = $data['category']; else $category = 0;
  if (!isset($data['description'])) $data['description'] = '';
  if (isset($form_state['confirm_delete']) && isset($form_state['values']['bid'])) {
    return pinboard_helper_board_confirm_delete($form, $form_state, $form_state['values']['bid'], $form_state['values']['name']);
  }
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_BOARD_NAME'),
    '#default_value' => $name,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => $data['description'],
  );
  $field['settings']['allowed_values'][0]['vocabulary'] = 'category';
  $field['settings']['allowed_values'][0]['parent'] = 0;
  $options = taxonomy_allowed_values($field);
  $options = array(0 => t('Select a category')) + $options;
  $form['category'] = array(
    '#type' => 'select',
    '#title' => t('Category by default'),
    '#default_value' => $category,
    '#options' => $options,
    '#required' => false,
    '#description' => pinboard_helper_const('PINBOARD_REPLACE_DESCRIPTION_CATEGORY_DEFAULT'),
    //'#disabled' => $has_data,
  );
  
  
  $tags = array();
  $result = db_select('pinboard_userboard')->fields('pinboard_userboard', array('data'))->condition('bid', $arg, '=')->execute();
  foreach ($result as $k => $us) {
    $t = unserialize($us->data);
    $tags[$k] = new stdClass;
    $tags[$k]->tid = $t['uid'];
    $tags[$k]->name = $t['name'];
  }
  //foreach ($items as $item) {
    //$tags[$item['tid']] = isset($item['taxonomy_term']) ? $item['taxonomy_term'] : taxonomy_term_load($item['tid']);
  //}
  //$tags[1]->tid = 1;
  //$tags[1]->name = 'admin';
  //$tags[2]->tid = 2;
  //$tags[2]->name = 'rico';
  //$tags = array(1 => array('' => 'admin'), 2 => 'rico');
  
  $form += array(
    '#type' => 'item',
    '#markup' => '',
    //'#element_validate' => array('active_tags_taxonomy_autocomplete_validate'),
  );
  $form['field_terms_t'] = array(
    '#markup' => '<div class="clr">&nbsp;</div><div class="form-item"><label>'.pinboard_helper_const('PINBOARD_REPLACE_TITLE_WHO_CAN_PIN').'</label></div>',
  );
  $form['field_terms'] = array(
    '#markup' => theme('pinboard_helper_term_list_remove', array('terms' => $tags)),
  );
  $form['term_entry'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
    '#autocomplete_path' => 'user/autocomplete',
    '#size' => 60,
    '#maxlength' => 1024,
    '#attributes' => array('class' => array('at-term-entry')),
    '#theme_wrappers' => array(),
  );
  $form['add_button'] = array(
    '#type' => 'button',
    '#value' => t('Add'),
    '#attributes' => array('class' => array('at-add-btn')),
  );
  $form['terms'] = array(
    '#type' => 'hidden',
    '#default_value' => taxonomy_implode_tags($tags),
    '#size' => 60,
    '#maxlength' => 1024,
    //'#element_validate' => array('active_tags_taxonomy_autocomplete_validate'),
    '#attributes' => array('class' => array('at-terms')),
    '#theme_wrappers' => array(),
  );
  $form['field_baccs_e'] = array(
    '#markup' => '<div class="clr"></div><fieldset class="collapsible collapsed" id="pin-flags"><legend><span class="fieldset-legend">'.pinboard_helper_const('PINBOARD_REPLACE_TITLE_BOARD_HELP').'</span></legend><div class="fieldset-wrapper">'.pinboard_helper_const('PINBOARD_REPLACE_DESCRIPTION_WHO_CAN_PIN').'</div></fieldset>'.'<div class="clr"></div>',
  );
  /*
  $form['field_terms_e'] = array(
    '#markup' => '<div class="clr"></div>'.pinboard_helper_const('PINBOARD_REPLACE_DESCRIPTION_WHO_CAN_PIN').'<div class="clr"></div>',
  );
  */
/*************/

  $tags = array();
  $result = db_select('pinboard_accessboard')->fields('pinboard_accessboard', array('data'))->condition('bid', $arg, '=')->execute();
  foreach ($result as $k => $us) {
    $t = unserialize($us->data);
    $tags[$k] = new stdClass;
    $tags[$k]->tid = $t['uid'];
    $tags[$k]->name = $t['name'];
  }
  
  $form += array(
    '#type' => 'item',
    '#markup' => '',
    //'#element_validate' => array('active_tags_taxonomy_autocomplete_validate'),
  );
  $form['field_baccs_t'] = array(
    '#markup' => '<div class="form-item"><label>'.pinboard_helper_const('PINBOARD_REPLACE_TITLE_WHO_CAN_VIEW').'</label></div>',
  );
  $form['field_baccs'] = array(
    '#markup' => theme('pinboard_helper_bacc_list_remove', array('terms' => $tags)),
  );
  $form['bacc_entry'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
    '#autocomplete_path' => 'user/autocomplete',
    '#size' => 60,
    '#maxlength' => 1024,
    '#attributes' => array('class' => array('at-term-entry-bacc')),
    '#theme_wrappers' => array(),
  );
  $form['add_button_bacc'] = array(
    '#type' => 'button',
    '#value' => t('Add'),
    '#attributes' => array('class' => array('at-add-btn-bacc')),
  );
  $form['bacc'] = array(
    '#type' => 'hidden',
    '#default_value' => taxonomy_implode_tags($tags),
    '#size' => 60,
    '#maxlength' => 1024,
    //'#element_validate' => array('active_tags_taxonomy_autocomplete_validate'),
    '#attributes' => array('class' => array('at-terms-bacc')),
    '#theme_wrappers' => array(),
  );
  $form['field_baccs_eh'] = array(
    '#markup' => '<div class="clr"></div><fieldset class="collapsible collapsed" id="pin-flags"><legend><span class="fieldset-legend">'.pinboard_helper_const('PINBOARD_REPLACE_TITLE_BOARD_HELP').'</span></legend><div class="fieldset-wrapper">'.pinboard_helper_const('PINBOARD_REPLACE_TITLE_DESCRIPTION_BOARD_HELP').pinboard_helper_const('PINBOARD_REPLACE_DESCRIPTION_WHO_CAN_VIEW').'</div></fieldset>'.'<div class="clr"></div>',
  );
  /*
  $form['field_baccs_e'] = array(
    '#markup' => '<div class="clr"></div>'.pinboard_helper_const('PINBOARD_REPLACE_DESCRIPTION_WHO_CAN_VIEW').'<div class="clr">&nbsp;</div>',
  );
  */

  
  drupal_add_css(drupal_get_path('module', 'pinboard_helper') . '/at.css');
  drupal_add_js(array('activeTags' => array('mode' => 'csv')), 'setting');
  drupal_add_js(array('activeBaccs' => array('mode' => 'csv')), 'setting');
  drupal_add_js(drupal_get_path('module', 'pinboard_helper') . '/at.js');

  
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  if ($arg) {
    $form['actions']['delete'] = array('#type' => 'submit', '#value' => t('Delete'));
    $form['bid'] = array('#type' => 'value', '#value' => $arg);
  }
  $form['uid'] = array('#type' => 'value', '#value' => $acc->uid);
  $form['uname'] = array('#type' => 'value', '#value' => $acc->name);
  

  return $form;
}

/**
 * Implements hook_theme().
 */
function pinboard_helper_theme($existing, $type, $theme, $path) {
  return array(
    'pinboard_helper_term_list_remove' => array(
      'variables' => array('terms' => NULL),
    ),
    'pinboard_helper_bacc_list_remove' => array(
      'variables' => array('terms' => NULL),
    ),
    'pinboard_helper_term_list_add' => array(
      'variables' => array('terms' => NULL),
    ),
  );
}


function theme_pinboard_helper_term_list_remove($variables) {
  $output = '<div class="at-term-list">';
  $output .= '<div id="at-termm-my" class="at-termmy"><span class="at-termm-text">' . t('Me') . '</span></div> ';
  foreach ($variables['terms'] as $term) {
    // @todo add field level id for div id to prevent collisions.
    $output .= '<div id="at-term-' . $term->tid . '" class="at-term at-term-remove"><span class="at-term-text">' . $term->name . '</span><span class="at-term-action-remove">x</span></div> ';
  }
  $output .= '</div>';
  return $output;
}

function theme_pinboard_helper_bacc_list_remove($variables) {
  $output = '<div class="at-term-list-bacc">';
  if (isset($variables['terms']) and count($variables['terms'])) {
    $output .= '<div id="at-bacm-my" class="at-baccmy hideA"><span class="at-termm-text-bacc">' . t('All') . '</span></div> ';
  } else {
    $output .= '<div id="at-bacm-my" class="at-baccmy"><span class="at-termm-text-bacc">' . t('All') . '</span></div> ';
  }
  foreach ($variables['terms'] as $term) {
    // @todo add field level id for div id to prevent collisions.
    $output .= '<div id="at-term-' . $term->tid . '" class="at-term-bacc at-term-remove-bacc"><span class="at-term-text-bacc">' . $term->name . '</span><span class="at-term-action-remove-bacc">x</span></div> ';
  }
  $output .= '</div>';
  return $output;
}


function theme_pinboard_helper_term_list_add($variables) {
  $output = '';
  foreach ($variables['terms'] as $term) {
    $output .= '<div id="at-term-' . $term->tid . '" class="at-term at-term-add"><span class="at-term-text">' . $term->name . '</span><span class="at-term-action-add">x</span></div> ';
  }
  return $output;
}

function theme_pinboard_helper_bacc_list_add($variables) {
  $output = '';
  foreach ($variables['terms'] as $term) {
    $output .= '<div id="at-term-' . $term->tid . '" class="at-term at-term-add-bacc"><span class="at-term-text-bacc">' . $term->name . '</span><span class="at-term-action-add-bacc">x</span></div> ';
  }
  return $output;
}

function pinboard_helper_form_board_edit_validate($form, &$form_state) {
  global $user;
  if (isset($form_state['values']['name']) and $form_state['triggering_element']['#value'] != t('Delete') and !isset($form_state['values']['bid']) ) {
    $bid = db_select('pinboard_boards')->fields('pinboard_boards', array('bid'))->condition('name', $form_state['values']['name'], '=')->condition('uid', $form_state['values']['uid'], '=')->execute()->fetchCol();
    if (count($bid) and $bid[0]) {
      form_set_error('name', t('The name already exists'));
    }
  }
}

function pinboard_helper_form_board_edit_submit($form, &$form_state) {
  global $user;
  if ($form_state['triggering_element']['#value'] == t('Delete')) {

    $form_state['rebuild'] = TRUE;
    $form_state['confirm_delete'] = TRUE;
    return;
  }
  /*
  drupal_set_message('<pre>'. check_plain(print_r($form_state['values']['bacc'], 1)) .'</pre>');
  $bacc = drupal_explode_tags($form_state['values']['bacc']);
  $uca = array();
  foreach ($bacc as $item) {
    $us = user_load_by_name($item);
    if (isset($us->uid) and $us->uid) {
    	$uca[$us->uid] = $us->uid;
    }
  }
  */
  //drupal_set_message('<pre>'. check_plain(print_r($form_state['values'], 1)) .'</pre>');
  $data = array('category' => $form_state['values']['category'], 'description' => $form_state['values']['description']);
  //if (count($uca)) $data = $data + array('access' => $uca);
  
  if (isset($form_state['values']['bid']) and $form_state['values']['bid']) {
    db_update('pinboard_boards')
      ->condition('bid', $form_state['values']['bid'])
      ->fields(array(
    	  'uid' => $form_state['values']['uid'], 
    	  'name' => $form_state['values']['name'], 
    	  'data' => serialize($data)
  	  ))
      ->execute();
    drupal_set_message(pinboard_helper_const('PINBOARD_REPLACE_TITLE_UPDATED_BOARD_NAME', array('%name' => $form_state['values']['name'])));
    $bid = $form_state['values']['bid'];
    $bp = new stdClass;
    $bp->bid = $bid;
    $bp->uid = $form_state['values']['uid'];
    $bp->name = $form_state['values']['name'];
    $bp->username = $form_state['values']['uname'];
    pinboard_helper_pathauto_update_alias($bp, 'update');
  } else {
    $query = db_insert('pinboard_boards')->fields(array('uid', 'name', 'data'));
    $query->values(array('uid' => $form_state['values']['uid'], 'name' => $form_state['values']['name'], 'data' => serialize($data)));
    $query->execute();
    $bid = db_select('pinboard_boards')->fields('pinboard_boards', array('bid'))->condition('name', $form_state['values']['name'], '=')->condition('uid', $form_state['values']['uid'], '=')->execute()->fetchCol();
    drupal_set_message(pinboard_helper_const('PINBOARD_REPLACE_TITLE_CREATE_BOARD_NAME', array('!board' => $form_state['values']['name'], '!link' => url(PINBOARD_REPLACE_PATH_BOARD.'/edit/'.$bid[0]))));
    $bid = $bid[0];
    $bp = new stdClass;
    $bp->bid = $bid;
    $bp->uid = $form_state['values']['uid'];
    $bp->name = $form_state['values']['name'];
    $bp->username = $form_state['values']['uname'];
    pinboard_helper_pathauto_update_alias($bp, 'insert');
  } 
	
  db_delete('pinboard_userboard')
    ->condition('bid', $bid)
    ->execute();
  $terms = drupal_explode_tags($form_state['values']['terms']);
  foreach ($terms as $item) {
    $us = user_load_by_name($item);
    if (isset($us->uid) and $us->uid) {
    	$query = db_insert('pinboard_userboard')
      	->fields(array('uid', 'bid', 'data'));
      $query->values(array(
        'uid' => $us->uid, 
        'bid' => $bid,
        'data' => serialize(array(
          'uid' => $us->uid, 
          'name' => $us->name,
          'bid' => $bid, 
          'bname' => $form_state['values']['name'],
          'vuid' => $form_state['values']['uid'], 
          'vname' => $form_state['values']['uname']
        )),
      ));
      $query->execute();
    }
  }

  db_delete('pinboard_accessboard')
    ->condition('bid', $bid)
    ->execute();
  $tta = array();
  $terms = drupal_explode_tags($form_state['values']['bacc']);
  foreach ($terms as $item) {
    $us = user_load_by_name($item);
    if (isset($us->uid) and $us->uid and empty($tta[$us->uid])) {
      $tta[$us->uid] = $us->uid;
    	$query = db_insert('pinboard_accessboard')
      	->fields(array('uid', 'bid', 'data'));
      $query->values(array(
        'uid' => $us->uid, 
        'bid' => $bid,
        'data' => serialize(array(
          'uid' => $us->uid, 
          'name' => $us->name,
          'bid' => $bid, 
          'bname' => $form_state['values']['name'],
          'vuid' => $form_state['values']['uid'], 
          'vname' => $form_state['values']['uname']
        )),
      ));
      $query->execute();
    }
  }
  if (count($tta) and empty($tta[$form_state['values']['uid']])) {
    $query = db_insert('pinboard_accessboard')
      ->fields(array('uid', 'bid', 'data'));
    $query->values(array(
      'uid' => $form_state['values']['uid'], 
      'bid' => $bid,
      'data' => serialize(array(
        'uid' => $form_state['values']['uid'], 
        'name' => $form_state['values']['uname'],
        'bid' => $bid, 
        'bname' => $form_state['values']['name'],
        'vuid' => $form_state['values']['uid'], 
        'vname' => $form_state['values']['uname']
      )),
    ));
    $query->execute();
  }
  
  
  drupal_set_time_limit(240);
  $result = db_select('pinboard_repins', 'r')->fields('r', array('nid'))->condition('bid', $bid, '=')->execute()->fetchCol();
  foreach ($result as $nid) {
    db_delete('node_access')->condition('nid', $nid)->execute();
    $node = node_load($nid, NULL, TRUE);
    if (!empty($node)) {
      node_access_acquire_grants($node);
    }
  }
  
  $form_state['bid'] = $bid;
  $form_state['redirect'] = 'user/'.$form_state['values']['uid'];
}

function pinboard_helper_board_confirm_delete($form, &$form_state, $bid, $name) {
	
  $form['bid'] = array('#type' => 'value', '#value' => $bid);
  $form['uid'] = array('#type' => 'value', '#value' => $form_state['values']['uid']);
  $form['#id'] = 'pinboard_helper_board_confirm_delete';
  $form['name'] = array('#type' => 'value', '#value' => $name);
  $form['#submit'] = array('pinboard_helper_board_confirm_delete_submit');
  return confirm_form($form,
    pinboard_helper_const('PINBOARD_REPLACE_TITLE_DELETE1_BOARD_NAME',
    array('%title' => $name)),
    'user',
    pinboard_helper_const('PINBOARD_REPLACE_TITLE_DELETE2_BOARD_NAME'),
    t('Delete'),
    t('Cancel'));
}

function pinboard_helper_board_confirm_delete_submit($form, &$form_state) {
  //$status = taxonomy_vocabulary_delete($form_state['values']['vid']);
  $result = db_select('pinboard_repins', 'r')
    ->fields('r', array('nid'))
    ->condition('bid', $form_state['values']['bid'], '=')
    ->execute()->fetchCol();
  node_delete_multiple($result);
  db_delete('pinboard_boards')->condition('bid', $form_state['values']['bid'], '=')->execute();
  db_delete('pinboard_userboard')->condition('bid', $form_state['values']['bid'], '=')->execute();
  db_delete('pinboard_accessboard')->condition('bid', $form_state['values']['bid'], '=')->execute();
  $bp = new stdClass;
  $bp->bid = $form_state['values']['bid'];
  $bp->uid = $form_state['values']['uid'];
  pinboard_helper_pathauto_delete($bp);
  drupal_set_message(pinboard_helper_const('PINBOARD_REPLACE_TITLE_DELETE3_BOARD_NAME', array('%name' => $form_state['values']['name'])));
  //watchdog('taxonomy', 'Deleted board %name.', array('%name' => $form_state['values']['name']), WATCHDOG_NOTICE);
  
  $form_state['redirect'] = 'user/'.$form_state['values']['uid'];
  //cache_clear_all();
  return;
}

function pinboard_helper_follow_access() {
  if ($GLOBALS['user']->uid ) {
    return TRUE;
  }
  return FALSE;
}

function pinboard_helper_uac_access() {
  if ($GLOBALS['user']->uid == arg(1) ) {
    return TRUE;
  }
  return FALSE;
}

function pinboard_helper_uacb_access() {
  if ($GLOBALS['user']->uid > 0 /* and ($GLOBALS['user']->uid == arg(1) or $GLOBALS['user']->uid == 1) */ ) {
    return TRUE;
  }
  return FALSE;
}

function pinboard_helper_repin() {
  global $user;
  if (!$user->uid) {
    drupal_set_message(pinboard_helper_const('PINBOARD_REPLACE_TITLE_LOGIN_REPIN'));
    drupal_goto('user');
  } else {
    require_once(drupal_get_path('module', 'node').'/node.pages.inc');
    //return drupal_get_form('pinboard_helper_repin_form');
    $rnode = node_load(arg(1));
    $repin = db_select('pinboard_repins')->fields('pinboard_repins', array('did'))->condition('nid', $rnode->nid, '=')->condition('uid', $rnode->uid, '=')->execute()->fetchCol();
    //drupal_set_message('<pre>'. check_plain(print_r($repin, 1)) .'</pre>');
    if (count($repin)) {
      $rnode->did = $repin[0];
    } else {
      $rnode->did = $rnode->nid;
    }
    $rnode->gid = $rnode->nid;

    unset($rnode->created);
    unset($rnode->changed);
    unset($rnode->rdf_mapping);
    unset($rnode->vid);
    unset($rnode->log);
    unset($rnode->status);
    unset($rnode->comment);
    if (theme_get_setting('tm_value_repinpromote')) {
      $rnode->promote = 1;
    } else {
      //unset($rnode->promote);
      $rnode->promote = 0;
    }
    unset($rnode->sticky);
    unset($rnode->nid);
    unset($rnode->tnid);
    unset($rnode->translate);
    unset($rnode->revision_timestamp);
    unset($rnode->revision_uid);
    unset($rnode->cid);
    unset($rnode->last_comment_timestamp);
    unset($rnode->last_comment_name);
    unset($rnode->last_comment_uid);
    unset($rnode->comment_count);
    unset($rnode->picture);
    unset($rnode->data);

    $rnode->uid = $user->uid;
    $rnode->name = $user->name;

    module_invoke_all('pinboard_helper_repin', $rnode);

    //drupal_set_message('<pre>'. check_plain(print_r($rnode, 1)) .'</pre>');
    return drupal_get_form($rnode->type . '_node_form', $rnode);
//    return drupal_get_form('pinboard_helper_repin_form');
  }

//  print '';
//  exit;
}

function pinboard_helper_count_followers ($uid, $bid = 0) {
    global $user;
    if ($uid) {
      if ($bid) {
        $pids = db_select('pinboard_follow', 'p')
            ->condition('p.aid', $uid)
            ->condition('p.pid', $bid);
        $pids->addExpression('COUNT(distinct(p.uid))');
        //$pids->addExpression('distinct(p.uid)');
        $pids = $pids->execute()->fetchField();
        return $pids;
      } else {
        $pids = db_select('pinboard_follow', 'p')
            ->condition('p.aid', $uid);
        $pids->addExpression('COUNT(distinct(p.uid))');
        //$pids->addExpression('distinct(p.uid)');
        $pids = $pids->execute()->fetchField();
        return $pids;
      }
    } else {
        return '0';
    }
}

function pinboard_helper_count_following ($uid) {
    global $user;
    if ($uid) {
        $pids = db_select('pinboard_follow', 'p')
            ->condition('p.uid', $uid);
        $pids->addExpression('COUNT(distinct(p.aid))');
        //$pids->addExpression('distinct(p.aid)');
        $pids = $pids->execute()->fetchField();
        return $pids;
    } else {
        return '0';
    }
}


function pinboard_helper_followers () {
    global $user;
    if ($user->uid) {
        $out = '';
        $pids = db_select('pinboard_follow')
            ->fields('pinboard_follow', array('pid'))
            ->condition('uid', $user->uid)
            ->execute()->fetchCol();
        if(isset($pids[0])) {
            $result = db_select('pinboard_repins', 'r')
                ->extend('PagerDefault')
                ->fields('r', array('nid'))
                ->condition('bid', $pids, 'IN')
                ->limit(15)
                ->execute()->fetchCol();
            if(isset($result)) {
                $nodes = node_load_multiple($result);
                $nodes = node_view_multiple($nodes);
                $out .= render($nodes);
                $out .= theme('pager');
            }
        }
        if ($out) {
            return $out;
        } else {
            return pinboard_helper_const('PINBOARD_REPLACE_TITLE_NO_PINS');
        }
    } else {
        drupal_goto('user');
    }
}

function pinboard_helper_youfollow () {
  global $user;
  if ($user->uid) {
    $out = '';
    $pids = db_select('pinboard_follow')
    ->fields('pinboard_follow', array('pid'))
    ->condition('uid', $user->uid)
    ->execute()->fetchCol();
    if(isset($pids[0])) {
      $result = db_select('pinboard_repins', 'r')
      ->extend('PagerDefault')
      ->fields('r', array('nid'))
      ->condition('bid', $pids, 'IN')
      ->orderBy('nid', 'DESC')
      ->limit(15)
      ->execute()->fetchCol();
      if(isset($result)) {
        $nodes = node_load_multiple($result);
        $nodes = node_view_multiple($nodes);
        $out .= render($nodes);
        //$out .= theme('pager');
      }
    }
    if ($out) {
      $pp = theme('pager');
      if (!$pp or !isset($_GET['page']) or strpos($pp,'page='.$_GET['page']) or strpos($pp, '>'.($_GET['page'] + 1).'<'))
      return $out.$pp;
      else
      return '';
    } else {
      return '<p>&nbsp;</p><center><h1>'.pinboard_helper_const('PINBOARD_REPLACE_TITLE_NO_PINS').'</h1></center><p>&nbsp;</p>';
    }
  } else {
    drupal_goto('user');
  }
}
function pinboard_helper_follow () {
  global $user;
  if ($user->uid) {
    $out = '';
    $arg1 = arg(1);
    $arg2 = arg(2);
    if (!is_numeric($arg2)) $arg2 = 0;
    if (is_numeric($arg1)) {
      if (!$arg2) {
        $bids = db_select('pinboard_boards')
        ->fields('pinboard_boards', array('bid'))
        ->condition('uid', $arg1, '=')
        ->execute()->fetchCol();
        if (count($bids)) foreach ($bids as $bid) {
          db_delete('pinboard_follow')
          ->condition('uid', $user->uid)
          ->condition('aid', $arg1)
          ->condition('pid', $bid)
          ->execute();
          $query = db_insert('pinboard_follow')
          ->fields(array('uid', 'aid', 'pid', 'timestamp'));
          $query->values(array(
            'uid' => $user->uid, 
            'aid' => $arg1,
            'pid' => $bid,
            'timestamp' => time(),
          ));
          $query->execute();          
        }
      } else {
        db_delete('pinboard_follow')
        ->condition('uid', $user->uid)
        ->condition('aid', $arg1)
        ->condition('pid', $arg2)
        ->execute();
        $query = db_insert('pinboard_follow')
        ->fields(array('uid', 'aid', 'pid', 'timestamp'));
        $query->values(array(
          'uid' => $user->uid, 
          'aid' => $arg1,
          'pid' => $arg2,
          'timestamp' => time(),
        ));
        $query->execute();
      }
    }
    $name = '';
    if ($arg2) {
      $bid = db_select('pinboard_boards')
      ->fields('pinboard_boards', array('name'))
      ->condition('bid', $arg2, '=')
      ->execute()->fetchCol();
      if (count($bid)) $name = $bid[0];
      drupal_set_message(pinboard_helper_const('PINBOARD_REPLACE_TITLE_YOUFOLLOW').' '.$name);
      //drupal_goto('user/'.$arg1.'/board/'.$arg2);
    } else {
       $bids = db_select('pinboard_boards')
      ->fields('pinboard_boards', array('name'))
      ->condition('uid', $arg1, '=')
      ->execute()->fetchCol();
      if (count($bids)) $name = implode(', ', $bids);
      drupal_set_message(pinboard_helper_const('PINBOARD_REPLACE_TITLE_YOUFOLLOW').' '.$name);
      //drupal_goto('user/'.$arg1);
    }
    $var = new stdClass;
    $var->nid = '';
    $var->did = '';
    $var->cid = '';
    if (isset($arg1) and $arg1) 
      pinboard_helper_notify_send_mail($arg1, 
        variable_get('notify_follow_subject', NOTIFY_FOLLOW_SUBJECT), 
        variable_get('notify_follow_message', NOTIFY_FOLLOW_MESSAGE), 
        t('follow'),
        $var
      );
    drupal_goto();
  } else {
    drupal_goto('user');
  }
}

function pinboard_helper_unfollow () {
  global $user;
  if ($user->uid) {
    $out = '';
    $arg1 = arg(1);
    $arg2 = arg(2);
    if (!is_numeric($arg2)) $arg2 = 0;
    if (is_numeric($arg1)) {
      if ($arg2) {
        db_delete('pinboard_follow')
        ->condition('uid', $user->uid)
        ->condition('aid', $arg1)
        ->condition('pid', $arg2)
        ->execute();
      } else {
        db_delete('pinboard_follow')
        ->condition('uid', $user->uid)
        ->condition('aid', $arg1)
        ->execute();
      }
    }

    $name = '';
    if ($arg2) {
      $bid = db_select('pinboard_boards')
      ->fields('pinboard_boards', array('name'))
      ->condition('bid', $arg2, '=')
      ->execute()->fetchCol();
      if (count($bid)) $name = $bid[0];
      drupal_set_message(pinboard_helper_const('PINBOARD_REPLACE_TITLE_YOUUNFOLLOW').' '.$name);
      //drupal_goto('user/'.$arg1.'/board/'.$arg2);
    } else {
       $bids = db_select('pinboard_boards')
      ->fields('pinboard_boards', array('name'))
      ->condition('uid', $arg1, '=')
      ->execute()->fetchCol();
      if (count($bids)) $name = implode(', ', $bids);
      drupal_set_message(pinboard_helper_const('PINBOARD_REPLACE_TITLE_YOUUNFOLLOW').' '.$name);
      //drupal_goto('user/'.$arg1);
    }
    $var = new stdClass;
    $var->nid = '';
    $var->did = '';
    $var->cid = '';
    if (isset($arg1) and $arg1) 
      pinboard_helper_notify_send_mail($arg1, 
        variable_get('notify_unfollow_subject', NOTIFY_UNFOLLOW_SUBJECT), 
        variable_get('notify_unfollow_message', NOTIFY_UNFOLLOW_MESSAGE), 
        t('unfollow'),
        $var
      );
    $acc = user_load($arg1);
    if (isset($acc->data['pinboard']['unfollowers'])) {
      $data['data']['pinboard']['unfollowers'] = $acc->data['pinboard']['unfollowers'] + 1;
    } else {
      $data['data']['pinboard']['unfollowers'] = 1;
    }
    user_save($acc, $data) ;
      
    drupal_goto();
  } else {
    drupal_goto('user');
  }
}

function pinboard_helper_isfollow ($acc = false, $pid = 0) {
  global $user;
  static $pids = array();
  if ($user->uid and $acc) {
    if (!count($pids)) {
      $pidsr = db_select('pinboard_follow')
      ->fields('pinboard_follow', array('pid'))
      ->condition('uid', $user->uid)
      ->condition('aid', $acc->uid)
      ->execute()->fetchCol();
      foreach ($pidsr as $pidr) $pids[$pidr] = $pidr;
    }
    //drupal_set_message('<pre>'. check_plain(print_r($pids, 1)) .'</pre>');
    if (!$pid and count($pids)) return true;
    if (isset($pids[$pid])) return true;
    else return false;
  } else {
    return false;
  }
}

function pinboard_helper_comment_insert($comment) {
  // Reindex the node when comments are added.
  //drupal_set_message('<pre>'. check_plain(print_r($comment, 1)) .'</pre>');
    $var = new stdClass();
    $var->nid = $comment->nid;
    $var->did = $comment->nid;
    $var->cid = $comment->cid;
    $no = db_select('node')->fields('node', array('uid'))->condition('nid', $comment->nid, '=')->execute()->fetchCol();
    if (isset($no[0]) and $no[0]) 
      pinboard_helper_notify_send_mail($no[0], 
        variable_get('notify_comment_subject', NOTIFY_COMMENT_SUBJECT), 
        variable_get('notify_comment_message', NOTIFY_COMMENT_MESSAGE), 
        t('comment'),
        $var
      );
}
/**
 * Implements hook_form_alter().
 */

function pinboard_helper_form_alter(&$form, $form_state, $form_id) {
  global $user;
  //drupal_set_message($form_id);
//drupal_set_message('<pre>'. check_plain(print_r($_GET, 1)) .'</pre>');
//watchdog('upload_file', '<pre>'. check_plain(print_r($_FILES, 1)) .'</pre>');

  if ($form_id == 'pin_node_form' and $user->uid) {
    $fw = field_bundle_settings('node',PINBOARD_REPLACE_PATH_PIN);
  //drupal_set_message('<pre>'. check_plain(print_r($fw, 1)) .'</pre>');
    
    //drupal_set_message('<pre>'. check_plain(print_r($_GET, 1)) .'</pre>');
    //drupal_add_js(drupal_get_path('module', 'pinboard_helper').'/acb.js');
    //drupal_set_message('<pre>'. check_plain(print_r(url('node/add/pin', array('absolute' => TRUE)), 1)) .'</pre>');
    //drupal_set_message('<pre>'. check_plain(print_r($form, 1)) .'</pre>');
    
    
    $nid = 0;
    if (isset($form['#node']->gid)) $nid = $form['#node']->gid; elseif (isset($form['#node']->nid)) $nid = $form['#node']->nid;
    $bid = db_select('pinboard_repins')->fields('pinboard_repins', array('bid'))->condition('nid', $nid, '=')->condition('uid', $form['#node']->uid, '=')->execute()->fetchCol();
    if (count($bid)) $bid = $bid[0]; else $bid = 0;
    $name = db_select('pinboard_boards')->fields('pinboard_boards', array('name'))->condition('bid', $bid, '=')->execute()->fetchCol();
    if (count($name)) $name = $name[0]; else $name = '';
    $form['pinboard_board'] = array(
      '#title' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_BOARD'),
      '#type' => 'textfield',
      '#default_value' => $name,
      '#autocomplete_path' => PINBOARD_REPLACE_PATH_PINBOARD.'/autocomplete',
      '#size' => 16,
      '#maxlength' => 1024,
      '#weight' => (isset($fw['extra_fields']['form']['pinboard_board']['weight']) ? $fw['extra_fields']['form']['pinboard_board']['weight'] : -5),
      '#required' => true,
      '#description' => pinboard_helper_const('PINBOARD_REPLACE_DESCRIPTION_BOARD'),
    );
    if (isset($form['#node']->did)) {
      $form['pinboard_did'] = array(
        '#type' => 'hidden',
        '#value' => $form['#node']->did,
      );
    }

    if (isset($_GET['title'])) {
      $form['body'][$form['body']['#language']][0]['#default_value'] = $_GET['title'];
    }
    if (isset($_GET['description'])) {
      $form['body'][$form['body']['#language']][0]['#default_value'] .= "\n".$_GET['description'];
    }
    $isvi = 1;
    if (isset($_GET['url'])) {
      $_GET['url'] = str_replace('~qwerty~', 'http', $_GET['url']);
      $form['field_url'][$form['field_url']['#language']][0]['value']['#default_value'] = $_GET['url'];
      if (isset($_GET['is_video']) and $_GET['is_video'] == 'true') {
        if (strpos($_GET['media'],'youtube.com') and !strpos($_GET['url'],'youtube.com')) {
        	$url1 = explode('/',$_GET['media']);
        	//drupal_set_message('<pre>'. check_plain(print_r($url1, 1)) .'</pre>');
          $form['field_embed'][$form['field_embed']['#language']][0]['video_url']['#default_value'] = 'http://www.youtube.com/watch?v='.$url1[count($url1)-2];
        } else {
          $form['field_embed'][$form['field_embed']['#language']][0]['video_url']['#default_value'] = $_GET['url'];
        }
        
        $isvi = 0;
      }
    }
    if (isset($_GET['fid']) and is_numeric($_GET['fid'])) {
      $file = file_load($_GET['fid']);
      if ($fileinfo = image_get_info(drupal_realpath($file->uri))) {            
            //drupal_set_message('<pre>'. check_plain(print_r($fileinfo, 1)) .'</pre>');
            $form['field_image'][$form['field_image']['#language']][0]['#default_value'] = (array)$file;
            if (isset($_GET['title'])) $form['field_image'][$form['field_image']['#language']][0]['#default_value']['alt'] = $_GET['title'];
            $form['field_image'][$form['field_image']['#language']][0]['#default_value']['title'] = '';
            $form['field_image'][$form['field_image']['#language']][0]['#default_value']['width'] = $fileinfo['width'];
            $form['field_image'][$form['field_image']['#language']][0]['#default_value']['height'] = $fileinfo['height'];
            $form['field_image'][$form['field_image']['#language']][0]['#description'] = '';
      }
    } elseif (isset($_GET['media']) and $isvi) {
      $_GET['media'] = str_replace(array('~qwerty~','%7Eqwerty%7E'), 'http', $_GET['media']);
      if (function_exists('transliteration_clean_filename')) {
      	$destination = $form['field_image'][$form['field_image']['#language']][0]['#upload_location'].'/'.transliteration_clean_filename(basename($_GET['media']));
      } else {
      	$destination = $form['field_image'][$form['field_image']['#language']][0]['#upload_location'].'/'.basename($_GET['media']);
      }
      /*
      if (substr($destination, -1) != '/') {
        $destination .= '/';
      }
      */
      $ch = curl_init();
      curl_setopt($ch, CURLOPT_HEADER, 0);
      curl_setopt($ch, CURLOPT_FAILONERROR, 1);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
      //curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");
      //curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en-en) AppleWebKit/418.9.1 (KHTML, like Gecko) Safari/419.3");
      curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:16.0) Gecko/20120815 Firefox/16.0");
      curl_setopt($ch, CURLOPT_URL, $_GET['media']);
      $result = curl_exec($ch);
      curl_close($ch);
      
      if ($result) {

        $file = file_save_data($result, $destination);        
        if (isset($file->fid) and $file->fid) {
          $file->status = 0;
          drupal_write_record('file_managed', $file, 'fid');
          //drupal_set_message('<pre>'. check_plain(print_r($file, 1)) .'</pre>');
          if ($fileinfo = image_get_info(drupal_realpath($file->uri))) {            
            //drupal_set_message('<pre>'. check_plain(print_r($fileinfo, 1)) .'</pre>');
            $form['field_image'][$form['field_image']['#language']][0]['#default_value'] = (array)$file;
            if (isset($_GET['title'])) $form['field_image'][$form['field_image']['#language']][0]['#default_value']['alt'] = $_GET['title'];
            $form['field_image'][$form['field_image']['#language']][0]['#default_value']['title'] = '';
            $form['field_image'][$form['field_image']['#language']][0]['#default_value']['width'] = $fileinfo['width'];
            $form['field_image'][$form['field_image']['#language']][0]['#default_value']['height'] = $fileinfo['height'];
            $form['field_image'][$form['field_image']['#language']][0]['#description'] = '';
          } else {
            file_delete($file);
          }
        }
      }
      $form['field_embed']['#attributes']['style']  = 'display:none;visibility:hidden;';
    } elseif(!$isvi) {
      $form['field_image']['#attributes']['style']  = 'display:none;visibility:hidden;';
    } 
    if (arg(0) == PINBOARD_REPLACE_PATH_REPIN) $form['field_image']['#prefix'] = '<style type="text/css">.image-widget .form-submit {display:none;visibility:hidden;}</style>';
    
    $form['pinboard_separator'] = array(
        '#type' => 'hidden',
        '#value' => 'separator',
        '#weight' => (isset($fw['extra_fields']['form']['pinboard_separator']['weight']) ? $fw['extra_fields']['form']['pinboard_separator']['weight'] : 3),
        '#suffix' => '<fieldset class="collapsible collapsed form-wrapper" id="edit-advansed-pin-settings"><legend><span class="fieldset-legend">'.t('Advanced Settings').'</span></legend><div class="fieldset-wrapper">',
    );
    if (!user_access('Visible Advanced Settings')) $form['pinboard_separator']['#prefix'] = '<style type="text/css">#edit-advansed-pin-settings {display:none;visibility:hidden;}</style>';
    //$form['body']['#suffix'] = '<fieldset class="collapsible collapsed form-wrapper" id="edit-advansed-pin-settings"><legend><span class="fieldset-legend">'.t('Advanced Settings').'</span></legend><div class="fieldset-wrapper">';
    $form['actions']['#prefix'] = '</div></fieldset>';
    drupal_add_js('misc/collapse.js');
    
/*    $form['advansed_pin_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced Settings'),
      '#weight' => 20,
		  '#collapsible' => TRUE,
		  '#collapsed' => TRUE,
    );*/
 /*
    foreach ($form as $key => $name) {
      if (
           strpos($key, '#') === false and           
           $key != 'form_build_id' and $key != 'nid' and $key != 'vid' and $key != 'uid' and
           $key != 'form_token' and $key != 'form_id' and $key != 'actions' and 
           $key != 'created' and $key != 'type' and $key != 'language' and 
           $key != 'changed' and $key != 'advansed_pin_settings' and 
           $key != 'field_image' and 
           $key != 'field_embed' and 
           $key != 'body' and
           $key != 'field_url' and
           $key != 'pinboard_board'
         ) {
        $form['advansed_pin_settings'][$key] = $form[$key];
        unset($form[$key]);
      }
      if (
           $key == 'field_url' and !$form['nid']['#value']
         ) {
        $form['advansed_pin_settings'][$key] = $form[$key];
        unset($form[$key]);
      }
    }
    */
    /*
    $form['field_image']['#weight'] = -100;
    $form['field_embed']['#weight'] = -99;
    $form['pinboard_board']['#weight'] = -98;
    if ($form['nid']['#value']) $form['field_url']['#weight'] = -97;
    $form['body']['#weight'] = -96;
    $form['actions']['#weight'] = 100;
    */
    //$form['#submit'][] = 'pinboard_helper_form_node_pin_edit_submit';

  } 
  
  if ($form_id == 'user_admin_settings') {

    $email_token_help = t('Available variables are: !site_name, !user, !user_url, !repin_url, !pin_url, !comment_url.');
    $options = array(
      1 => t('Always send notifications'),
      0 => t('Only one notification until the next login to the site'),
      2 => t('Never send notification'),
    );
    $form['email_admin_notify_repin'] = array(
      '#type' => 'fieldset',
      '#title' => t('Notification of '.pinboard_helper_const('PINBOARD_REPLACE_TITLE_REPIN')),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#description' => t('Edit the Notification of '.pinboard_helper_const('PINBOARD_REPLACE_TITLE_REPIN').' e-mail messages.') . ' ' . $email_token_help,
      '#group' => 'email',
    );
    $form['email_admin_notify_repin']['notify_repin_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => variable_get('notify_repin_subject', NOTIFY_REPIN_SUBJECT),
      '#maxlength' => 180,
    );
    $form['email_admin_notify_repin']['notify_repin_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => variable_get('notify_repin_message', NOTIFY_REPIN_MESSAGE),
      '#rows' => 15,
    );
    $form['email_admin_notify_repin']['notify_repin_notification_def'] = array(
      '#type' => 'select',
      '#title' => t('Notification of a new Repin by default'),
      '#default_value' => variable_get('notify_repin_notification_def', 0),
      '#options' => $options,
      '#required' => TRUE,
    //'#description' => t(''),
    );

    $form['email_admin_notify_follow'] = array(
      '#type' => 'fieldset',
      '#title' => t('Notification of '.pinboard_helper_const('PINBOARD_REPLACE_TITLE_FOLLOWER')),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#description' => t('Edit the Notification of '.pinboard_helper_const('PINBOARD_REPLACE_TITLE_FOLLOWER').' e-mail messages.') . ' ' . $email_token_help,
      '#group' => 'email',
    );
    $form['email_admin_notify_follow']['notify_follow_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => variable_get('notify_follow_subject', NOTIFY_FOLLOW_SUBJECT),
      '#maxlength' => 180,
    );
    $form['email_admin_notify_follow']['notify_follow_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => variable_get('notify_follow_message', NOTIFY_FOLLOW_MESSAGE),
      '#rows' => 15,
    );
    $form['email_admin_notify_follow']['notify_follow_notification_def'] = array(
      '#type' => 'select',
      '#title' => t('Notification of a new Follower by default'),
      '#default_value' => variable_get('notify_follow_notification_def', 0),
      '#options' => $options,
      '#required' => TRUE,
    //'#description' => t(''),
    );

    $form['email_admin_notify_unfollow'] = array(
      '#type' => 'fieldset',
      '#title' => t('Notification of '.pinboard_helper_const('PINBOARD_REPLACE_TITLE_UNFOLLOWER')),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#description' => t('Edit the Notification of '.pinboard_helper_const('PINBOARD_REPLACE_TITLE_UNFOLLOWER').' e-mail messages.') . ' ' . $email_token_help,
      '#group' => 'email',
    );
    $form['email_admin_notify_unfollow']['notify_unfollow_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => variable_get('notify_unfollow_subject', NOTIFY_UNFOLLOW_SUBJECT),
      '#maxlength' => 180,
    );
    $form['email_admin_notify_unfollow']['notify_unfollow_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => variable_get('notify_unfollow_message', NOTIFY_UNFOLLOW_MESSAGE),
      '#rows' => 15,
    );
    $form['email_admin_notify_unfollow']['notify_unfollow_notification_def'] = array(
      '#type' => 'select',
      '#title' => t('Notification of a new Unfollower default'),
      '#default_value' => variable_get('notify_unfollow_notification_def', 0),
      '#options' => $options,
      '#required' => TRUE,
    //'#description' => t(''),
    );

    $form['email_admin_notify_comment'] = array(
      '#type' => 'fieldset',
      '#title' => t('Notification of comment'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#description' => t('Edit the Notification of comment e-mail messages.') . ' ' . $email_token_help,
      '#group' => 'email',
    );
    $form['email_admin_notify_comment']['notify_comment_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => variable_get('notify_comment_subject', NOTIFY_COMMENT_SUBJECT),
      '#maxlength' => 180,
    );
    $form['email_admin_notify_comment']['notify_comment_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => variable_get('notify_comment_message', NOTIFY_COMMENT_MESSAGE),
      '#rows' => 15,
    );
    $form['email_admin_notify_comment']['notify_comment_notification_def'] = array(
      '#type' => 'select',
      '#title' => t('Notification of new comments by default'),
      '#default_value' => variable_get('notify_comment_notification_def', 0),
      '#options' => $options,
      '#required' => TRUE,
    //'#description' => t(''),
    );
    
    $form['email_admin_pinboard_helper_flag'] = array(
      '#type' => 'fieldset',
      '#title' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_PIN_FLAG'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#group' => 'email',
    );
    $form['email_admin_pinboard_helper_flag']['user_mail_register_pinboard_helper_flag_text'] = array(
      '#type' => 'textarea',
      '#title' => t('Text'),
      '#default_value' => variable_get('user_mail_register_pinboard_helper_flag_text', PINBOARD_HELPER_FLAG_PIN_TEXT),
    );
    $form['email_admin_pinboard_helper_flag']['user_mail_register_pinboard_helper_flag_types'] = array(
      '#type' => 'textarea',
      '#title' => t('Types'),
      '#default_value' => variable_get('user_mail_register_pinboard_helper_flag_types', PINBOARD_HELPER_FLAG_TYPES),
      '#rows' => 15,
    );

    $form['email_admin_pinboard_helper_predefined_board'] = array(
      '#type' => 'fieldset',
      '#title' => t('Predefined Board'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#group' => 'email',
    );
    $form['email_admin_pinboard_helper_predefined_board']['predefined_board'] = array(
      '#type' => 'textarea',
      '#title' => t('Predefined Board'),
      '#default_value' => variable_get('predefined_board', ''),
      '#rows' => 15,
    );
    
  }

}

function pinboard_helper_node_validate($node, $form, &$form_state) {
//drupal_set_message('<pre>'. check_plain(print_r($form, 1)) .'</pre>');
//$form['field_image']['#required']
  if (isset($node->type) and $node->type == PINBOARD_REPLACE_PATH_PIN and empty($form['field_image'][$form['field_image']['#language']][0]['#required'])) $form['field_image'][$form['field_image']['#language']][0]['#required'] = 0;
  if (isset($node->type) and $node->type == PINBOARD_REPLACE_PATH_PIN and empty($form['field_embed'][$form['field_embed']['#language']][0]['#required'])) $form['field_embed'][$form['field_embed']['#language']][0]['#required'] = 0;
  if (isset($node->type) and $node->type == PINBOARD_REPLACE_PATH_PIN and 
      $form_state['values']['op'] != t('Delete') and 
      !$form['field_image'][$form['field_image']['#language']][0]['#required'] and 
      !$form['field_embed'][$form['field_embed']['#language']][0]['#required']
      ) {
    if (isset($node->field_image[pinboard_helper_get_lng($node->field_image)][0]['fid']) and $node->field_image[pinboard_helper_get_lng($node->field_image)][0]['fid']) {
      return;
    }
    if (isset($node->field_embed[pinboard_helper_get_lng($node->field_embed)][0]['video_url']) and $node->field_embed[pinboard_helper_get_lng($node->field_embed)][0]['video_url']) {
      return;
    }
    form_set_error('field_image', pinboard_helper_const('PINBOARD_REPLACE_ERROR_IMG_EMBED'));
    //form_set_error('field_embed', '&nbsp;');
  }
  
}

function pinboard_helper_get_lng($ar) {
  if (is_array($ar)) {
    foreach ($ar as $key => $us) {
      //if ($us)
      return $key;
    }
  }
  
}

function pinboard_helper_node_presave($node) {
  global $user;
  //drupal_set_message('<pre>'. check_plain(print_r($node, 1)) .'</pre>');
  if (isset($node->pinboard_board) and is_array($node->pinboard_board) and isset($node->pinboard_board[$node->language][0]['pinboard_board'])) {
    $node->pinboard_board = $node->pinboard_board[$node->language][0]['pinboard_board'];
  }
  if (isset($node->pinboard_board) and $node->pinboard_board) {
    //if (strpos($node->pinboard_board, ' - ')) 
    $t = explode(' - ', $node->pinboard_board);
    if (isset($t[1])) $us = user_load_by_name($t[1]);
    if (isset($us->uid) and $us->uid) {
    	$buid = $us->uid;
    	$bname = $t[0];
    } else {
    	$buid = $node->uid;
    	$bname = $node->pinboard_board;
    }
    //drupal_set_message('<pre>'. check_plain(print_r($buid, 1).print_r($bname, 1)) .'</pre>');
    $bid = db_select('pinboard_boards')->fields('pinboard_boards', array('bid'))->condition('name', $bname, '=')->condition('uid', $buid, '=')->execute()->fetchCol();
    if (!count($bid) or !$bid[0]) {
      $query = db_insert('pinboard_boards')->fields(array('uid', 'name', 'data'));
      $query->values(array('uid' => $node->uid, 'name' => $node->pinboard_board, 'data' => ''));
      $query->execute();
      $bid = db_select('pinboard_boards')->fields('pinboard_boards', array('bid'))->condition('name', $node->pinboard_board, '=')->condition('uid', $node->uid, '=')->execute()->fetchCol();
      drupal_set_message(pinboard_helper_const('PINBOARD_REPLACE_TITLE_CREATE_BOARD_NAME', array('!board' => $node->pinboard_board, '!link' => url(PINBOARD_REPLACE_PATH_BOARD.'/edit/'.$bid[0]))));
      $bp = new stdClass;
      $bp->bid = $bid[0];
      $bp->uid = $user->uid;
      $bp->name = $node->pinboard_board;
      $bp->username = $user->name;
      pinboard_helper_pathauto_update_alias($bp, 'insert');
    }
  } elseif (isset($node->ph_bid) and $node->ph_bid) {
    $bid = $node->ph_bid;
  } else {
    $bid = 0;
  }
  if (is_array($bid) and count($bid)) {
    $bid = $bid[0];
  } else {
    $bid = 0;
  }
  	if (isset($node->field_category) and !isset($node->field_category[pinboard_helper_get_lng($node->field_category)][0])) {
      $result = db_select('pinboard_boards')->fields('pinboard_boards', array('data'))->condition('bid', $bid, '=')->execute();
  		foreach ($result as $us) {
    	  $data = unserialize($us->data);
  	  }
  	  //drupal_set_message('<pre>'. check_plain(print_r($data, 1)) .'</pre>');
  	  if (isset($data['category']) and $data['category']) {
  	    $node->field_category[pinboard_helper_get_lng($node->field_category)][0]['tid'] = $data['category'];
  	    //taxonomy_delete_node_index($node);
        //taxonomy_build_node_index($node);
  	  }
  	}
  $node->bid = $bid;
  
  module_invoke_all('pinboard_helper_node_presave', $node);
  
  //$node->field_category[$node->language][0]['tid'] = 1;
}

/**
 * Implements hook_node_load().
 */
function pinboard_helper_node_load($nodes, $types) {

  $result = db_query('SELECT nid, did, bid FROM {pinboard_repins} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $ns[$record->did] = $record->did;
    $bs[$record->bid] = $record->bid;
    $nodes[$record->nid]->ph_did = $record->did;
    $nodes[$record->nid]->ph_bid = $record->bid;
  }
  if (isset($bs)) {
    $result = db_query('SELECT bid, name FROM {pinboard_boards} WHERE bid IN(:bids)', array(':bids' => $bs));
    foreach ($result as $record) {
      $bsu[$record->bid] = $record->name;
    }
  }
  if (isset($ns)) {
    $result = db_query('SELECT nid, uid FROM {node} WHERE nid IN(:nids)', array(':nids' => $ns));
    foreach ($result as $record) {
      $us[$record->uid] = $record->uid;
      $nsu[$record->nid] = $record->uid;
    }
  }
  foreach ($nodes as $record) {
    $us[$record->uid] = $record->uid;
    $nsu[$record->nid] = $record->uid;
  }
  if (isset($us)) {
    $result = db_query('SELECT uid, name FROM {users} WHERE uid IN(:uids)', array(':uids' => $us));
    foreach ($result as $record) {
      $usu[$record->uid] = $record->name;
    }
  }
	$an = t('Anonimous');
	$bn = t('None');
  foreach ($nodes as $record) {
    if (!isset($record->ph_did) or !$record->ph_did) $nodes[$record->nid]->ph_did = $record->nid;
    if (!isset($record->ph_bid) or !$record->ph_bid) $nodes[$record->nid]->ph_bid = 0;    
    $nodes[$record->nid]->ph_uid = isset($nsu[$nodes[$record->nid]->ph_did]) ? $nsu[$nodes[$record->nid]->ph_did] : $nodes[$record->nid]->uid;
    $nodes[$record->nid]->ph_name = (isset($usu[$nodes[$record->nid]->ph_uid])) ? $usu[$nodes[$record->nid]->ph_uid] : $an;
    $nodes[$record->nid]->ph_bname = (isset($bsu[$nodes[$record->nid]->ph_bid])) ? $bsu[$nodes[$record->nid]->ph_bid] : $bn;
  }
  //drupal_set_message('<pre>'. check_plain(print_r($nsu, 1).' - '.print_r($usu, 1)) .'</pre>');
}
/**
 * Implements hook_node_update().
 */
function pinboard_helper_node_update($node) {
 if ($node->type == PINBOARD_REPLACE_PATH_PIN) pinboard_helper_save_pinboard($node);
}
/**
 * Implements hook_node_insert().
 */
function pinboard_helper_node_insert($node) {
 if ($node->type == PINBOARD_REPLACE_PATH_PIN) pinboard_helper_save_pinboard($node);
}

/**
 * Implements hook_node_delete().
 */
function pinboard_helper_node_delete($node) {
 db_delete('pinboard_repins')->condition('nid', $node->nid)->execute();
}


function pinboard_helper_save_pinboard($node) {

//function pinboard_helper_node_submit($node, $form, &$form_state) {
//function pinboard_helper_board_form_submit($form, &$form_state) {
//drupal_set_message('<pre>node: '. check_plain(print_r($node, 1)) .'</pre>');

  module_invoke_all('pinboard_helper_save_in', $node);
  
  global $user;
  //drupal_set_message('<pre>'. check_plain(print_r($node, 1)) .'</pre>');
  if (isset($node->pinboard_board) and $node->pinboard_board) {
    if (strpos($node->pinboard_board, ' - ')) $t = explode(' - ', $node->pinboard_board);
    if (isset($t[1])) $us = user_load_by_name($t[1]);
    if (isset($us->uid) and $us->uid) {
    	$buid = $us->uid;
    	$bname = $t[0];
    } else {
    	$buid = $node->uid;
    	$bname = $node->pinboard_board;
    }
    
    $bid = db_select('pinboard_boards')->fields('pinboard_boards', array('bid'))->condition('name', $bname, '=')->condition('uid', $buid, '=')->execute()->fetchCol();
    //$bid = db_select('pinboard_boards')->fields('pinboard_boards', array('bid'))->condition('name', $node->pinboard_board, '=')->condition('uid', $node->uid, '=')->execute()->fetchCol();
    if (!count($bid) or !$bid[0]) {
      $query = db_insert('pinboard_boards')->fields(array('uid', 'name', 'data'));
      $query->values(array('uid' => $node->uid, 'name' => $node->pinboard_board, 'data' => ''));
      $query->execute();
      $bid = db_select('pinboard_boards')->fields('pinboard_boards', array('bid'))->condition('name', $node->pinboard_board, '=')->condition('uid', $node->uid, '=')->execute()->fetchCol();
    }
  } else {
    $bid = 0;
  }
  if (is_array($bid) and count($bid)) {
    $bid = $bid[0];
  } elseif (isset($node->ph_bid) and $node->ph_bid) {
    $bid = $node->ph_bid;
  } else {
    $bid = 0;
  }

  if (isset($node->pinboard_did)) {
    $did = $node->pinboard_did;
  } else {
    $repin = db_select('pinboard_repins')->fields('pinboard_repins', array('did'))->condition('nid', $node->nid, '=')->condition('uid', $node->uid, '=')->execute()->fetchCol();
    if (count($repin)) {
      $did = $repin[0];
    } else {
      $did = $node->nid;
    }
  }
  if ($did != $node->nid) {
    $var = new stdClass;
    $var->nid = $node->nid;
    $var->did = $did;
    $var->cid = '';
    $no = db_select('node')->fields('node', array('uid'))->condition('nid', $did, '=')->execute()->fetchCol();
    //$no = node_load($did);
    if (isset($no[0]) and $no[0]) 
      pinboard_helper_notify_send_mail($no[0], 
        variable_get('notify_repin_subject', NOTIFY_REPIN_SUBJECT), 
        variable_get('notify_repin_message', NOTIFY_REPIN_MESSAGE), 
        t('repin'),
        $var
      );
  }
  	//drupal_set_message('<pre>'. check_plain(print_r($did, 1)) .'</pre>');
  
  db_delete('pinboard_repins')->condition('nid', $node->nid)->condition('uid', $node->uid)->execute();
  $query = db_insert('pinboard_repins')->fields(array('uid', 'nid', 'did', 'bid', 'data'));
  $query->values(array(
    'uid' => $node->uid, 
    'nid' => $node->nid,
    'did' => $did,
    'bid' => $bid,
    'data' => '',
  ));
  $query->execute();
  
  module_invoke_all('pinboard_helper_save_out', $node);
//  drupal_set_message(t('Your message has been sent.'));
}


function pinboard_helper_notify_send_mail($uid, $subject, $message, $category, $var) {
  global $user, $language;
  $us = user_load($uid);
  if ($us->uid) {
    $ntype = 0;
    $ntime = 0;
    if (!isset($us->data['pinboard_helper']['notification_comments'])) $us->data['pinboard_helper']['notification_comments'] = 0;
    if (!isset($us->data['pinboard_helper']['notification_repin'])) $us->data['pinboard_helper']['notification_repin'] = 0;
    if (!isset($us->data['pinboard_helper']['notification_follower'])) $us->data['pinboard_helper']['notification_follower'] = 0;
    if (!isset($us->data['pinboard_helper']['notification_unfollowed'])) $us->data['pinboard_helper']['notification_unfollowed'] = 0;
    $data['data']['pinboard_helper'] = $us->data['pinboard_helper'];
    if ($category == t('comment')) {
      if (isset($us->data['pinboard_helper']['notification_comments_t'])) {
        $ntype = $us->data['pinboard_helper']['notification_comments'];
        $ntime = $us->data['pinboard_helper']['notification_comments_t'];
      }
      $data['data']['pinboard_helper']['notification_comments_t'] = time();
    } elseif ($category == t('repin')) {
      if (isset($us->data['pinboard_helper']['notification_repin_t'])) {
        $ntype = $us->data['pinboard_helper']['notification_repin'];
        $ntime = $us->data['pinboard_helper']['notification_repin_t'];
      }
      $data['data']['pinboard_helper']['notification_repin_t'] = time();
    } elseif ($category == t('follow')) {
      if (isset($us->data['pinboard_helper']['notification_follower_t'])) {
        $ntype = $us->data['pinboard_helper']['notification_follower'];
        $ntime = $us->data['pinboard_helper']['notification_follower_t'];
      }
      $data['data']['pinboard_helper']['notification_follower_t'] = time();
    } elseif ($category == t('unfollow')) {
      if (isset($us->data['pinboard_helper']['notification_unfollowed_t'])) {
        $ntype = $us->data['pinboard_helper']['notification_unfollowed'];
        $ntime = $us->data['pinboard_helper']['notification_unfollowed_t'];
      }
      $data['data']['pinboard_helper']['notification_unfollowed_t'] = time();
    }
    //drupal_set_message('<pre>'.$ntime.' - '.$us->access.'</pre>');
    //drupal_set_message('send1');
    //drupal_set_message('<pre>'. check_plain(print_r($us, 1)) .'</pre>');
    //$fid = $us->picture;
    //unset($us->picture);
    //$us->picture->fid = $fid;
    user_save($us, $data);
    if ($ntype == 2 or ($ntype == 0 and $ntime > $us->access)) return;
    //drupal_set_message('send2');
  }
  //drupal_set_message('send');
  //if (!variable_get('pinboard_notify_send_mail', 1)) return;

  //$values = $form_state['values'];
  //$us = user_load($uid);
  
  $var->name = $us->name;
  $var->uid = $us->uid;
  if ($user->uid) {
    $var->uname = $user->name;
    $var->uuid = $user->uid;
  } else {
    $var->uuid = 0;
    $var->uname = t('Anonymous');
  }
  
  $values['subject'] = pinboard_helper_str_replace($subject, $var);
  $values['message'] = pinboard_helper_str_replace($message, $var);
  $values['category']['category'] = $category;
  //$values['sender'] = $us;
  $values['sender'] = new stdClass;
  $values['sender']->uid = 0;
  $values['sender']->name = check_plain(variable_get('site_name', 'Drupal'));
  $values['sender']->mail = variable_get('site_mail', ini_get('sendmail_from'));
  //$values['category'] = contact_load($values['cid']);

  $to = $us->mail;
  $from = $values['sender']->mail;

  drupal_mail('contact', 'page_mail', $to, language_default(), $values);

  watchdog('mail', '%sender-name (@sender-from) sent an e-mail regarding %category.', array('%sender-name' => $to, '@sender-from' => $from, '%category' => $values['category']['category']));

  //drupal_set_message(t('Your message has been sent.'));
}

function pinboard_helper_str_replace($string, $var) {
  $out = t($string, array(
    '!site_name' => check_plain(variable_get('site_name', 'Drupal')), 
    '!user' => $var->uname ? $var->uname : t('Anonymous'), 
    '!user_url' => $var->uuid ? url('user/'.$var->uuid, array('absolute' => TRUE)) : '', 
    '!repin_url' => $var->nid ? url('node/'.$var->nid, array('absolute' => TRUE)) : '', 
    '!pin_url' => $var->did ? url('node/'.$var->did, array('absolute' => TRUE)): '',
    '!comment_url' => $var->cid ? url('node/'.$var->did, array('fragment' => 'comment-'.$var->cid, 'absolute' => TRUE)) : url('node/'.$var->did, array('fragment' => 'comments', 'absolute' => TRUE))
  ));
  return $out;
}

function pinboard_helper_autocomplete($string = '') {
  global $user;
  $matches = array();
  //if ($string) {
  //  $result = db_select('pinboard_boards')->fields('pinboard_boards', array('name'))->condition('name', db_like($string) . '%', 'LIKE')->condition('uid', $user->uid, '=')->range(0, 50)->execute();
  //} else {
    $result = db_select('pinboard_boards')->fields('pinboard_boards', array('name'))->condition('uid', $user->uid, '=')->range(0, 50)->execute();
  //}
  foreach ($result as $us) {
    $matches[$us->name] = check_plain($us->name);
  }
  //if ($string) {
  //  $result = db_select('pinboard_userboard')->fields('pinboard_boards', array('name'))->condition('name', db_like($string) . '%', 'LIKE')->condition('uid', $user->uid, '=')->range(0, 50)->execute();
  //} else {
    $result = db_select('pinboard_userboard')->fields('pinboard_userboard', array('data'))->condition('uid', $user->uid, '=')->range(0, 50)->execute();
  //}
  foreach ($result as $us) {
    $t = unserialize($us->data);
    $matches[$t['bname'].' - '.$t['vname']] = $t['bname'].' - '.$t['vname'];
  }
  asort($matches);
  drupal_json_output($matches);
  exit;
}


function pinboard_helper_pinit_js() {
 global $base_url;

$t0 = pinboard_helper_const('PINBOARD_REPLACE_PINIT_JS_MESSAGE1');
$t1 = pinboard_helper_const('PINBOARD_REPLACE_PINIT_JS_MESSAGE2');
$t2 = pinboard_helper_const('PINBOARD_REPLACE_PINIT_JS_MESSAGE3');
$t3 = pinboard_helper_const('PINBOARD_REPLACE_PINIT_JS_MESSAGE4');
$t4 = pinboard_helper_const('PINBOARD_REPLACE_PINIT_JS_MESSAGE5');
$t5 = pinboard_helper_const('PINBOARD_REPLACE_PINIT_JS_MESSAGE6');
$t6 = pinboard_helper_const('PINBOARD_REPLACE_PINIT_JS_MESSAGE7');
$t7 = pinboard_helper_const('PINBOARD_REPLACE_PINIT_JS_MESSAGE8', array('!url' => url('', array('absolute' => TRUE))));
$t8 = pinboard_helper_const('PINBOARD_REPLACE_PINIT_JS_MESSAGE9');

if (true) {
//$url = str_replace(array('http://','https://'),'',url('node/add/'.PINBOARD_REPLACE_PATH_PIN, array('absolute' => TRUE)));
$url = url('nodeadd'.PINBOARD_REPLACE_PATH_PIN, array('absolute' => TRUE));
$get = url('pinboard_get_info', array('absolute' => TRUE));
$filter = url('pinboard_get_filter', array('absolute' => TRUE));

print str_replace(array("\n","\r","\t","  "),'','
(function(k,m,n,l){
  var a=k[l.k]={
    w:k,
    d:m,
    n:n,
    a:l,
    s:{},
    f:function(){
      return{
        callback:[],
        kill:function(b){
          if(typeof b==="string")b=a.d.getElementById(b);
          b&&b.parentNode&&b.parentNode.removeChild(b)
        },
        get:function(b,c){
          var d=null;
          return d=b[c]||b.getAttribute(c)
        },
        make:function(b){
          var c=false,d,e;

          for(d in b)if(b[d].hasOwnProperty){
            c=a.d.createElement(d);

           for(e in b[d])
              if(b[d][e].hasOwnProperty)
                if(typeof b[d][e]==="string")
                  c[e]=b[d][e];

           break
          }

         return c
        },
        listen:function(b,c,d){
          if(typeof a.w.addEventListener!=="undefined")
            b.addEventListener(c,d,false);

         else typeof a.w.attachEvent!=="undefined"&&b.attachEvent("on"+c,d)
        },
        getSelection:function(){
          return(""+(a.w.getSelection?a.w.getSelection():a.d.getSelection?a.d.getSelection():a.d.selection.createRange().text)).replace(/(^\s+|\s+$)/g,"")
        },
        pin:function(b){
          var c="";

         c=b.getElementsByTagName("IMG")[0];

         var d="false", e=a.a.pin+"?", f=(new Date).getTime();

         if(b.rel==="video")
            d="true";

         e=e+"media="+encodeURIComponent(b.getAttribute("pinImg")).replace(\'http\', \'~qwerty~\');

         e=e+"&url="+encodeURIComponent(c.getAttribute("url")||a.d.URL).replace(\'http\', \'~qwerty~\');

         e=e+"&title="+encodeURIComponent(a.d.title);

         e=e+"&is_video="+d;

         c=a.v.selectedText||c.title||c.alt;

         c=c.substr(0,500);

         e=e+"&description="+encodeURIComponent(c);

         if(a.v.inlineHandler)
            e=e+"&via="+encodeURIComponent(a.d.URL);

         if(a.v.hazIOS){
            a.w.setTimeout(
              function(){
                a.w.location="pinit12://"+e
              },25);

             a.w.location=e
          }

         else a.w.open(e,"pin"+f,a.a.pop)
        },
        close:function(b){
          if(a.s.bg){
            a.d.b.removeChild(a.s.shim);

           a.d.b.removeChild(a.s.bg);

           a.d.b.removeChild(a.s.bd)
          }

         k.hazPinningNow=false;
          b&&a.w.alert(b);

         a.v.hazGoodUrl=false;

         a.w.scroll(0,a.v.saveScrollTop)
        },
        click:function(b){
          b=b||a.w.event;

         var c=null;

         if(c=b.target?b.target.nodeType===3?b.target.parentNode:b.target:b.srcElement)
            if(c===a.s.x)
              a.f.close();

           else 
              if(c.className!==a.a.k+"_hideMe"){
                if(!c.className)
                  c=c.parentNode;

               if(c.parentNode.className===a.a.k+"_pinContainer"||c.parentNode.parentNode.className===a.a.k+"_pinContainer"||c.className===a.a.k+"_pinButton"){
                  a.f.pin(c.parentNode.getElementsByTagName("A")[0]);

                 a.w.setTimeout(
                  function(){
                    a.f.close()
                  },10)
                }

             }

       },
        behavior:function(){
          a.f.listen(a.s.bd,"click",a.f.click)
        },
        presentation:function(){
          var b=a.f.make({STYLE:{type:"text/css"}}),
          c=a.a.cdn[a.w.location.protocol]||a.a.cdn["http:"],
          d=a.a.rules.join("\n");

         d=d.replace(/#_/g,"#"+l.k+"_");

         d=d.replace(/\._/g,"."+l.k+"_");

         d=d.replace(/_cdn/g,c);

         if(b.styleSheet)b.styleSheet.cssText=d;

         else b.appendChild(a.d.createTextNode(d));

         a.d.h.appendChild(b)
        },
        addThumb:function(b,c,d){(d=b.getElementsByTagName(d)[0])?b.insertBefore(c,d):b.appendChild(c)},
        thumb:function(b){
          var c=a.a.k+"_thumb_"+b.src;

         if(b.src){
            if(!b.media)b.media="image";

           var d=a.f.make({SPAN:{className:a.a.k+"_pinContainer"}}),
            e=a.f.make({A:{rel:b.media}}),
            f=new Image;

           f.setAttribute("nopin","nopin");

           if(b.title)f.title=b.title;

           b.page&&f.setAttribute("url",b.page);

           f.style.visibility="hidden";

           f.onload=function(){
              var h=this.width,i=this.height;

             if(i>h){
                this.height=a.a.thumbCellSize;

               var j=a.a.thumbCellSize*(h/i);

               this.style.width=j;

               this.style.marginLeft=a.a.thumbCellSize/2-j/2+"px"
              }

             if(i<h){
                this.width=a.a.thumbCellSize;

               j=a.a.thumbCellSize*(i/h);

               this.style.height=j;

               this.style.marginTop=a.a.thumbCellSize/2-j/2+"px"
              }

             if(i===h){
                this.style.height=a.a.thumbCellSize+"px";

               this.style.width=a.a.thumbCellSize+"px"
              }

             this.style.visibility=""
            };

           f.src=b.thumb?b.thumb:b.src;

           e.setAttribute("pinImg",b.src);

           e.appendChild(f);

           if(b.media!=="image"){f=a.f.make({B:{}});

           e.appendChild(f)
          }

         f=a.f.make({CITE:{innerHTML:b.height+" x "+b.width}});

         e.appendChild(f);

         d.appendChild(e);

         d.appendChild(a.f.make({SPAN:{className:a.a.k+"_pinButton"}}));

         e=false;


          if(b.dupe){
            f=0;

           for(var g=a.v.thumbed.length;f<g;f+=1)
              if(a.v.thumbed[f].id.indexOf(b.dupe)!==-1){
                e=a.v.thumbed[f].id;

               break
              }

           }

           if(e!==false)
              if(e=a.d.getElementById(e)){
                e.parentNode.insertBefore(d,e);

               e.parentNode.removeChild(e)
              }

             else 
                b.page||b.media!=="image"?a.f.addThumb(a.s.embedContainer,d,"SPAN"):a.f.addThumb(a.s.imgContainer,d,"SPAN");

           else{
              a.s.imgContainer.appendChild(d);

             a.v.hazAtLeastOneGoodThumb+=1
            }

           (b=a.d.getElementById(c))&&b.parentNode.removeChild(b);

           d.id=c;

           a.v.thumbed.push(d)
          }

       },
        call:function(b,c){
          var d=a.f.callback.length,e=a.a.k+".f.callback["+d+"]",f=a.d.createElement("SCRIPT");

         a.f.callback[d]=function(g){
            c(g,d);

           a.v.awaitingCallbacks-=1;

           a.f.kill(e)
          };

         f.id=e;

         f.src=b+"&callback="+e;

         f.type="text/javascript";

         f.charset="utf-8";

         a.v.firstScript.parentNode.insertBefore(f,a.v.firstScript);

         a.v.awaitingCallbacks+=1
        },
        ping:{checkDomain:function(b){
          if(b&&b.disallowed_domains&&b.disallowed_domains.length)
            for(var c=0,d=b.disallowed_domains.length;c<d;c+=1)
              b.disallowed_domains[c]===a.w.location.host&&a.f.close(a.a.msg.noPin)
        },
        info:function(b){
          if(b)
            if(b.err)
              a.f.unThumb(b.id);

           else 
              if(b.reply&&b.reply.img&&b.reply.img.src){
                var c="";

               if(b.reply.page)
                  c=b.reply.page;

               b.reply.nopin&&b.reply.nopin===1?a.f.unThumb(b.id):a.f.thumb({src:b.reply.img.src,height:b.reply.img.height,width:b.reply.img.width,media:b.reply.media,title:b.reply.description,page:c,dupe:b.id})}
              }

       },
        unThumb:function(b){
          if(b=a.d.getElementById(a.a.k+"_thumb_"+b)){
            var c=b.getElementsByTagName("SPAN")[0];

           b.removeChild(c);

           c=a.f.make({SPAN:{className:a.a.k+"_hideMe",innerHTML:a.a.msg.grayOut}});

           b.appendChild(c);

           a.v.hazAtLeastOneGoodThumb-=1
          }

       },
        getExtendedInfo:function(b){
          if(!a.v.hazCalledForInfo[b]){
            a.v.hazCalledForInfo[b]=true;

           a.f.call(a.a.embed+b,a.f.ping.info)
          }

       },
        getId:function(b){
          for(var c,d=b.u.split("?")[0].split("#")[0].split("/");!c;)
            c=d.pop();

         if(b.r)c=parseInt(c,b.r);

         return encodeURIComponent(c)
        },
        hazUrl:{
          /*
          flickr:function(){
            var b=a.d.getElementById("image-src");

           if(b&&b.href){
              var c=new Image;

             c.onload=function(){
                a.f.thumb({src:this.src,height:this.height,width:this.width});

               a.f.getExtendedInfo("src=flickr&id="+encodeURIComponent(a.v.canonicalImage))
              };

             c.src=a.v.canonicalImage=b.href.split("_m.jpg")[0]+"_z.jpg"
            }

         },
          */
          vimeo:function(){
            var b=a.f.getId({u:a.d.URL,r:10});

           a.d.getElementsByTagName("DIV");

           a.d.getElementsByTagName("LI");

           a.d.getElementsByTagName("A");

           var c="vimeo";

           if(a.d.URL.match(/^https/))c+="_s";

           b>1E3&&a.f.getExtendedInfo("src="+c+"&id="+b)
          },
          youtube:function(){
            for(var b=a.d.getElementsByTagName("META"),c=0,d=b.length;c<d;c+=1){
              var e=a.f.get(b[c],"property");

             if(e==="og:url"){
                a.v.canonicalUrl=a.f.get(b[c],"content");

               a.v.canonicalId=a.v.canonicalUrl.split("=")[1].split("&")[0]
              }

             if(e==="og:image")a.v.canonicalImage=a.f.get(b[c],"content")
            }

           if(a.v.canonicalImage&&a.v.canonicalUrl){
              b=new Image;
              b.onload=function(){
                a.f.thumb({src:this.src,height:this.height,width:this.width,type:"video"});

               a.f.getExtendedInfo("src=youtube&id="+encodeURIComponent(a.v.canonicalId))
              };

             b.src=a.v.canonicalImage
            }

           else{
              a.v.canonicalImage=null;

             a.v.canonicalUrl=null
            }

         },
          /*
          pinterest:function(){
            a.f.close(a.a.msg.installed)
          },
          facebook:function(){
            a.f.close(a.a.msg.privateDomain.replace(/%privateDomain%/,"Facebook"))
          },
          googleReader:function(){
            a.f.close(a.a.msg.privateDomain.replace(/%privateDomain%/,"Google Reader"))
          },
          stumbleUpon:function(){
            var b=0,c=a.a.stumbleFrame.length,d;

           for(b=0;b<c;b+=1)
              if(d=a.d.getElementById(a.a.stumbleFrame[b])){
                a.f.close();

               if(a.w.confirm(a.a.msg.bustFrame))a.w.location=d.src;

               break
              }

         },
          googleImages:function(){
            a.v.inlineHandler="google"
          },
          tumblr:function(){
            a.v.inlineHandler="tumblr"
          },
          netflix:function(){
            a.v.inlineHandler="netflix"
          }
          */

       },
        hazSite:{
          /*
          flickr:{
            img:function(b){
              if(b.src){
                b.src=b.src.split("?")[0];

               a.f.getExtendedInfo("src=flickr&id="+encodeURIComponent(b.src))
              }

           }

         },
          behance:{
            img:function(b){
              if(b.src){
                b.src=b.src.split("?")[0];

               a.f.getExtendedInfo("src=behance&id="+encodeURIComponent(b.src))
              }

           }

         },
          netflix:{
            img:function(b){
              if(b=b.src.split("?")[0].split("#")[0].split("/").pop()){
                id=parseInt(b.split(".")[0]);

               id>1E3&&a.v.inlineHandler&&a.v.inlineHandler==="netflix"&&a.f.getExtendedInfo("src=netflix&id="+id)
              }

           }

         },
          */
          youtube:{
            img:function(b){
              b=b.src.split("?")[0].split("#")[0].split("/");

             b.pop();

             (id=b.pop())&&a.f.getExtendedInfo("src=youtube&id="+id)
            },
            iframe:function(b){
              (b=a.f.getId({u:b.src}))&&a.f.getExtendedInfo("src=youtube&id="+b)
            },
            video:function(b){
              (b=b.getAttribute("data-youtube-id"))&&a.f.getExtendedInfo("src=youtube&id="+b)
            },
            embed:function(b){
              var c=b.getAttribute("flashvars"),d="";

             if(c){
                if(d=c.split("video_id=")[1])d=d.split("&")[0];

               d=encodeURIComponent(d)
              }

             else d=a.f.getId({u:b.src});

             d&&a.f.getExtendedInfo("src=youtube&id="+d)
            },
            object:function(b){
              b=b.getAttribute("data");
              var c="";

             if(b)
                (c=a.f.getId({u:b}))&&a.f.getExtendedInfo("src=youtube&id="+c)
            }

         },
          vimeo:{
            iframe:function(b){
              b=a.f.getId({u:b.src,r:10});

             b>1E3&&a.f.getExtendedInfo("src=vimeo&id="+b)
            }

         }

       },
        parse:function(b,c){
          b=b.split(c);

         if(b[1])return b[1].split("&")[0];

         return""
        },
        handleInline:{
          google:function(b){
            var c,d,e=0,f=0;

           if(b.src){
              f=b.parentNode;

             if(f.tagName==="A"&&f.href){
                c=a.f.parse(f.href,"&imgrefurl=");

               d=a.f.parse(f.href,"&imgurl=");

               e=parseInt(a.f.parse(f.href,"&w="));
                f=parseInt(a.f.parse(f.href,"&h="));

               d&&c&&f>a.a.minImgSize&&e>a.a.minImgSize&&a.f.thumb({thumb:b.src,src:d,page:c,height:f,width:e})
              }

           }

         },
          tumblr:function(b){
            var c=[];

           c=null;

           c="";

           if(b.src){
              for(c=b.parentNode;c.tagName!=="LI"&&c!==a.d.b;)
                c=c.parentNode;

             if(c.tagName==="LI"&&c.parentNode.id==="posts"){
                c=c.getElementsByTagName("A");

               (c=c[c.length-1])&&c.href&&a.f.thumb({src:b.src,page:c.href,height:b.height,width:b.width})
              }

           }

         }

       },
        hazTag:{
          img:function(b){
            if(a.v.inlineHandler&&typeof a.f.handleInline[a.v.inlineHandler]==="function")a.f.handleInline[a.v.inlineHandler](b);
 
          else b.src.match(/^data/)||b.height>a.a.minImgSize&&b.width>a.a.minImgSize&&a.f.thumb({src:b.src,height:b.height,width:b.width})
          },
          meta:function(b){
            var c,d;

           if(b.name&&b.name.toUpperCase()==="PINTEREST"&&b.content&&b.content.toUpperCase()==="NOPIN")
              if(d=a.f.get(b,"description")){
                c="The owner of the site";
                b=a.d.URL.split("/");

               if(b[2])c=b[2];

               a.f.close(a.a.msg.noPinReason.replace(/%s%/,c)+"\n\n"+d)
              }

             else a.f.close(a.a.msg.noPin)
            }

         },
          checkTags:function(){
            var b,c,d,e,f,g,h,i,j;

           a.v.tag=[];

           b=0;

           for(c=a.a.check.length;b<c;b+=1){
              f=a.d.getElementsByTagName(a.a.check[b]);

             d=0;

             for(e=f.length;d<e;d+=1){
                g=f[d];

               !g.getAttribute("nopin")&&g.style.display!=="none"&&g.style.visibility!=="hidden"&&a.v.tag.push(g)
              }

           }

           b=0;

           for(c=a.v.tag.length;b<c;b+=1){
              f=a.v.tag[b];

             g=f.tagName.toLowerCase();

             if(a.a.tag[g])
                for(h in a.a.tag[g])
                  if(a.a.tag[g][h].hasOwnProperty){
                    i=a.a.tag[g][h];

                   if(j=a.f.get(f,i.att)){
                      d=0;

                     for(e=i.match.length;d<e;d+=1)j.match(i.match[d])&&a.f.hazSite[h][g](f)
                    }

                 }

                 a.f.hazTag[g]&&
                  a.f.hazTag[g](f)
            }

         },
          getHeight:function(){
            return Math.max(Math.max(a.d.b.scrollHeight,a.d.d.scrollHeight),Math.max(a.d.b.offsetHeight,a.d.d.offsetHeight),Math.max(a.d.b.clientHeight,a.d.d.clientHeight))
          },
          structure:function(){
            a.s.shim=a.f.make({IFRAME:{height:"100%",width:"100%",allowTransparency:true,id:a.a.k+"_shim"}});

           a.s.shim.setAttribute("nopin","nopin");

           a.d.b.appendChild(a.s.shim);

           a.s.bg=a.f.make({DIV:{id:a.a.k+"_bg"}});

           a.d.b.appendChild(a.s.bg);

           a.s.bd=a.f.make({DIV:{id:a.a.k+"_bd"}});

           a.s.x=a.f.make({A:{id:a.a.k+"_x",innerHTML:a.a.msg.cancelTitle}});
            a.s.bd.appendChild(a.s.x);

           a.s.bd.appendChild(a.f.make({SPAN:{id:a.a.k+"_logo"}}));

           a.s.embedContainer=a.f.make({I:{id:a.a.k+"_embedContainer"}});

           a.s.bd.appendChild(a.s.embedContainer);

           a.s.imgContainer=a.f.make({I:{id:a.a.k+"_imgContainer"}});

           a.s.bd.appendChild(a.s.imgContainer);

           a.d.b.appendChild(a.s.bd);

           var b=a.f.getHeight();

           if(a.s.bd.offsetHeight<b){
              a.s.bd.style.height=b+"px";

             a.s.bg.style.height=b+"px";

             a.s.shim.style.height=b+"px"
            }

           a.w.scroll(0,0)
          },
          checkUrl:function(){
            var b;

            for(b in a.a.url)
              if(a.a.url[b].hasOwnProperty)
                if(a.d.URL.match(a.a.url[b])){
                  a.f.hazUrl[b]();

                 if(a.v.hazGoodUrl===false)return false
                }

               return true
          },
          checkPage:function(){
            if(a.f.checkUrl()){
              a.v.canonicalImage||a.f.checkTags();

             if(a.v.hazGoodUrl===false)return false
            }

           else return false;

           return true
          },
          init:function(){
            a.d.d=a.d.documentElement;

           a.d.b=a.d.getElementsByTagName("BODY")[0];

           a.d.h=a.d.getElementsByTagName("HEAD")[0];

           if(!a.d.b||!a.d.h)
              a.f.close(a.a.msg.noPinIncompletePage);

           else 
              if(k.hazPinningNow!==true){
                k.hazPinningNow=true;

               var b,c=a.n.userAgent;

               a.v={
                  saveScrollTop:a.w.pageYOffset,
                  hazGoodUrl:true,
                  hazAtLeastOneGoodThumb:0,
                  awaitingCallbacks:0,
                  thumbed:[],
                  hazIE:function(){
                    return/msie/i.test(c)&&!/opera/i.test(c)
                  }(),
                  hazIOS:function(){
                    return c.match(/iP/)!==null
                  }(),
                  firstScript:a.d.getElementsByTagName("SCRIPT")[0],
                  selectedText:a.f.getSelection(),
                  hazCalledForInfo:{}

               };

               b=a.a.checkDomain.url+"?domains="+encodeURIComponent(a.w.location.host);

               a.f.call(b,a.f.ping.checkDomain);

               a.f.presentation();

               a.f.structure();

               if(a.f.checkPage())
                  if(a.v.hazGoodUrl===true){
                    a.f.behavior();

                   if(a.f.callback.length>1)
                      a.v.waitForCallbacks=a.w.setInterval(function(){
                        if(a.v.awaitingCallbacks===0)
                          if(a.v.hazAtLeastOneGoodThumb===0||a.v.tag.length===0){
                            a.w.clearInterval(a.v.waitForCallbacks);

                           a.f.close(a.a.msg.notFound)
                          }

                       },500);

                   else if(!a.v.canonicalImage&&(a.v.hazAtLeastOneGoodThumb===0||a.v.tag.length===0))a.f.close(a.a.msg.notFound)
                  }

             }

         }

       }

     }()
    };

   a.f.init()
  })
  (window,document,navigator,{k:"PIN_"+(new Date).getTime(),checkDomain:{url:"'.$filter.'"},
    cdn:{
      "https:":"'.$url.'",
      "http:":"'.$url.'"
    },
    embed:"'.$get.'?",
    pin:"'.$url.'",
    minImgSize:80,
    thumbCellSize:200,
    check:["meta","iframe","embed","object","img","video","a"],
    url:{/*
      facebook:/^https?:\/\/.*?\.facebook\.com\//,
      flickr:/^https?:\/\/www\.flickr\.com\//,
      googleImages:/^https?:\/\/.*?\.google\.com\/search/,
      googleReader:/^https?:\/\/.*?\.google\.com\/reader\//,
      netflix:/^https?:\/\/.*?\.netflix\.com/,
      pinterest:/^https?:\/\/.*?\.?pinterest\.com\//,
      stumbleUpon:/^https?:\/\/.*?\.stumbleupon\.com\//,
      tumblr:/^https?:\/\/www\.tumblr\.com/,*/
      vimeo:/^https?:\/\/vimeo\.com\//,
      youtube:/^https?:\/\/www\.youtube\.com\/watch\?/
    },
    stumbleFrame:["tb-stumble-frame","stumbleFrame"],
    tag:{
      img:{
      /*
        flickr:{att:"src",match:[/staticflickr.com/,/static.flickr.com/]},
        behance:{att:"src",match:[/^http:\/\/behance\.vo\.llnwd\.net/]},
        netflix:{att:"src",match:[/^http:\/\/cdn-?[0-9]\.nflximg\.com/,/^http?s:\/\/netflix\.hs\.llnwd\.net/]},
      */
        youtube:{att:"src",match:[/ytimg.com\/vi/,/img.youtube.com\/vi/]}
      },
      video:{
        youtube:{att:"src",match:[/videoplayback/]}

     },
      embed:{
        youtube:{att:"src",match:[/^http:\/\/s\.ytimg\.com\/yt/,/^http:\/\/.*?\.?youtube-nocookie\.com\/v/]}

     },
      iframe:{
        youtube:{att:"src",match:[/^http:\/\/www\.youtube\.com\/embed\/([a-zA-Z0-9\-_]+)/]},
        vimeo:{att:"src",match:[/^http?s:\/\/vimeo.com\/(\d+)/,/^http:\/\/player\.vimeo\.com\/video\/(\d+)/]}

     },
      object:{
        youtube:{att:"data",match:[/^http:\/\/.*?\.?youtube-nocookie\.com\/v/]}

     }

   },
    msg:{
      check:"",
      cancelTitle:"'.$t0.'",
      grayOut:"'.$t6.'",
      noPinIncompletePage:"'.$t7.'",
      bustFrame:"'.$t1.'",
      noPin:"'.$t2.'",
      noPinReason:"'.$t8.'",
      privateDomain:"'.$t3.'",
      notFound:"'.$t4.'",
      installed:"'.$t5.'"
    },
    pop:"status=yes,resizable=yes,scrollbars=yes,personalbar=no,directories=yes,location=yes,toolbar=yes,menubar=yes,left=0,top=0",
    rules:[
      "
      #_shim {
        z-index:8675309;

       position: absolute;

       background: transparent;

       top:0;

       right:0;

       bottom:0;

       left:0;

       width: 100%;

     }

     ","
      #_bg {
        z-index:8675310;

       position: absolute;

       top:0;

       right:0;

       bottom:0;

       left:0;

       background-color:#f2f2f2;

       opacity:.95;

       width: 100%;

     }

     ","
      #_bd {
        z-index:8675311;

       position: absolute;

       text-align: left;

       padding-top: 38px;

       width: 100%;

       top: 0;

       left: 0;

       right: 0;

       font:16px hevetica neue,arial,san-serif;

     }

     ","
      #_bd i { 
        font-style:normal;

     }

     ","
      #_bd a#_x { 
        z-index:8675332;

       position: fixed;

       *position:absolute;

       width:100%;

       top: 0;

       left: 0;

       right: 0;

       cursor: pointer;

       height: 37px;

       line-height: 36px;

       font-size: 14px;

       font-weight: bold;

       display: block;

       margin: 0;

       background: url('.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/fullGradient07Normal.png) repeat-x scroll 0 0 #FFFFFF;

       border-bottom: 1px solid #aaa;

       color: #211922;

       text-align: center;

     }

     ","
      #_bd a#_x:active {
        background-color: #211922;

       background-image: url('.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/fullGradient07Inverted.png);

       border-color: #211922;

       text-shadow: 0 -1px #211922;

     }

     ","
      #_bd a#_x:hover {
        color: #fff;

       text-decoration: none;

       background-color: #900;

       border-color: #900;

       text-shadow: 0 -1px #900;

     }

     ","
      #_bd span { 
        z-index:8675312;

       height:200px;

       width:200px;

       overflow:hidden;

       zoom:1;

       display:inline-block;

       background: #fff;

       text-shadow: 0 1px #fff;

       position: relative;

       vertical-align:middle;

       border: 1px solid #aaa;

       border-top: none;

       border-left: none;

     }

     ","
      #_bd span#_logo {
        background: #FCF9F9 url('.theme_get_setting('logo').') 50% 50% no-repeat;

     }

     ","
      #_bd span a {
        z-index:8675314;

       cursor: pointer;

       height: 200px;

       width: 200px;

     }

     ","
      #_bd span a img { 
        z-index: 8675316;

       position: absolute;

       top: 0;

       left: 0;

       border: 0;

       margin: 0;

     }

     ","
      #_bd span a b {
        z-index: 8675317;

       position: absolute;

       top: 50%;

       left: 50%;

       height: 50px;

       width: 50px;

       background: transparent url('.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/VideoIndicator.png) 0 0 no-repeat;

       margin-top: -25px;

       margin-left: -25px;

     }

     ","
      #_bd span a cite {
        z-index: 8675317;

       position: absolute;

       font-size: 10px;

       font-style: normal;

       bottom: 5px;

       width: 100px;

       left: 50%;

       margin-left: -50px;

       text-align: center;

       color: #000;

       background: #fff;

       padding: 3px;

     }

     ","
      #_bd span._pinContainer span._pinButton {
        z-index: 8675318;

       line-height: 200px;

       font-size: 200px;

       cursor: pointer;

       position: absolute;

       top: 0;

       left: 0;

       height:200px;

       width:200px;

       background: transparent;

     }

     ","
      #_bd span._pinContainer span._pinButton:hover {
        background: transparent url('.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/PinThis.png) 50% 50% no-repeat;

     }

     ","
      #_bd span._pinContainer span._hideMe { 
        z-index: 8675332;

       position: absolute;

       height: 200px;

       width: 200px;

       background: rgba(128, 128, 128, .5);

       *background: #aaa;

       line-height: 200px;

       font-size: 10px;

       color: #fff;

       text-align: center;

       font-weight: normal!important;

     }

     "
    ]}

 );

');
} else {
//$url = str_replace(array('http:','https:'),'',url('node/add/pin', array('absolute' => TRUE)));
$url = url('node/add/'.PINBOARD_REPLACE_PATH_PIN, array('absolute' => TRUE));
print str_replace(array("\n","\r"),'','
(function(k,o,p,l){
	var a=k[l.k]={w:k,d:o,n:p,a:l,s:{
  }, f:function(){
		return{
			callback:[],kill:function(b){
				b.parentNode&&b.parentNode.removeChild(b)
			}, get:function(b,c){
				var e=null;
				return e=b[c]||b.getAttribute(c)
			}, make:function(b){
				var c=false,e,d;
				for(e in b)if(b[e].hasOwnProperty){
					c=a.d.createElement(e);
					for(d in b[e]) if(b[e][d].hasOwnProperty) if(typeof b[e][d]==="string") c[d]=b[e][d];
					break
				}

				return c
			} ,listen:function(b,c,e){
				if(typeof a.w.addEventListener!=="undefined")b.addEventListener(c,e,false);
				else typeof a.w.attachEvent!=="undefined"&&b.attachEvent("on"+c,e)
			}, getSelection:function(){
				return(""+(a.w.getSelection?a.w.getSelection():a.d.getSelection?a.d.getSelection():a.d.selection.createRange().text)).replace(/(^\s+|\s+$)/g,"")
			}, pin:function(b){
				var c=b.getElementsByTagName("IMG")[0],e="false",d=a.a.pin+"?",f=(new Date).getTime();
				if(b.rel==="video")e="true";
				d=d+"media="+encodeURIComponent(c.src).replace(\'http\', \'~qwerty~\');
				d=d+"&url="+encodeURIComponent(c.getAttribute("url")||a.d.URL).replace(\'http\', \'~qwerty~\');
				d=d+"&title="+encodeURIComponent(a.d.title);
				d=d+"&is_video="+e;
				d=d+"&description="+encodeURIComponent(a.v.selectedText||c.title||c.alt);
				a.v.hazIOS&&a.w.setTimeout(function(){
					a.w.location="pinit12:"+d
				}, 25);
				a.w.open(d,"pin"+f,a.a.pop)
			}, close:function(b){
				if(a.s.bg){
					a.d.b.removeChild(a.s.shim);
					a.d.b.removeChild(a.s.bg);
					a.d.b.removeChild(a.s.bd)
				}

				k.hazPinningNow=false;
				b&&a.w.alert(b);
				a.v.hazGoodUrl=false;
				a.w.scroll(0,a.v.saveScrollTop)
			}, click:function(b){
				b=b||a.w.event;
				var c=null;
				if(c=b.target?b.target.nodeType===3?b.target.parentNode:b.target:b.srcElement)
					if(c===a.s.x)
					  a.f.close();
					else 
						if(c.parentNode.className===a.a.k+"_pinContainer"||c.className===a.a.k+"_pinButton"){
							a.f.pin(c.parentNode.getElementsByTagName("A")[0]);
							a.w.setTimeout(function(){
								a.f.close()
							},10)
						}
			}, behavior:function(){
				a.f.listen(a.s.bd,"click",a.f.click)
			}, presentation:function(){
				var b=a.f.make({
					STYLE:{
						type:"text/css"
					}
				}),c=a.a.rules.join("\n").replace(/#_/g,"#"+l.k+"_").replace(/\._/g,"."+l.k+"_");
				if(b.styleSheet)b.styleSheet.cssText=c;
				else b.appendChild(a.d.createTextNode(c));
				a.d.h.appendChild(b)
			}, thumb:function(b,c,e,d,f,g){
				if(a.v.hazSrc[b]!==true)a.v.hazSrc[b]=true;
				else if(!a.v.hazIE)return;
				a.v.hazAtLeastOneGoodThumb=true;
				d||(d="image");
				var h=a.f.make({
					SPAN:{
						className:a.a.k+"_pinContainer"
					}
				}), j=a.f.make({
					A:{
						rel:d
					}
				}), i=new Image,m,n;
				i.setAttribute("nopin","nopin");
				i.style.visibility="hidden";
				if(f)i.title=f;
				g&&i.setAttribute("url",g);
				i.onload=function(){
					m=this.width;
					n=this.height;
					this.style.marginTop=n<a.a.thumbCellSize?-n/2+"px":"-"+a.a.thumbCellSize/2+"px";
					this.style.marginLeft=m<a.a.thumbCellSize?-m/2+"px":"-"+a.a.thumbCellSize/2+"px";
					this.style.visibility=""
				};
				i.src=b;
				j.appendChild(i);
				if(d!=="image"){
					b=a.f.make({
						B:{
						}
					});
					j.appendChild(b)
				}

				c=a.f.make({
					CITE:{
						innerHTML:c+" x "+e
					}

				});
				j.appendChild(c);
				h.appendChild(j);
				h.appendChild(a.f.make({
					SPAN:{
						className:a.a.k+"_pinButton"
					}

				}));
				if(d!=="image")(d=a.s.bd.getElementsByTagName("SPAN")[1])?d.parentNode.insertBefore(h,d):a.s.bd.appendChild(h);
				else a.s.bd.appendChild(h)
			}, call:function(b,c){
				var e=a.a.k+".f.callback["+a.f.callback.length+"]",d=a.d.createElement("SCRIPT");
				a.f.callback.push(function(f){
					c(f);
					a.f.kill(e)
				});
				d.id=e;
				d.src=b+e;
				d.type="text/javascript";
				d.charset="utf-8";
				a.v.firstScript.parentNode.insertBefore(d,a.v.firstScript)
			}, ping:{
				check:function(b){
					b&&b.ok===false&&a.f.close(a.a.msg.noPin)
				}, vimeo:function(b){
					var c;
					if(b[0]&&b[0].thumbnail_large&&b[0].embed_privacy==="anywhere"){
						c="";
						if(b[0].title)c+=b[0].title;
						if(b[0].user_name)c=c+". Video by "+b[0].user_name;
						if(b[0].user_description)c=c+". "+b[0].user_description;
						c+=".";
						a.f.thumb(b[0].thumbnail_large,150,200,"video",c,b[0].url)
					}
				}
			}, hazUrl:{
				vimeo:function(){
				var b=a.d.URL.split("/").pop(),c=a.d.getElementsByTagName("LI"),e=a.d.getElementsByTagName("A"),d,f;
				b=parseInt(b,10);
				if(b>1&&a.v.hazCalledForThumb["_"+b]!==true){
					a.f.call("http://vimeo.com/api/v2/video/"+b+".json?callback=",a.f.ping.vimeo);
					a.v.hazCalledForThumb["_"+b]=true
				}

				d=c.length;
				for(f=0; f<d; f+=1) if(c[f].id&&c[f].id.split("clip_")[1]){
					b=c[f].id.split("clip_")[1];
					b=parseInt(b,10);
					if(b>1&&a.v.hazCalledForThumb["_"+b]!==true){
						a.v.hazCalledForThumb["_"+b]=true;
						a.f.call("http://vimeo.com/api/v2/video/"+b+".json?callback=",a.f.ping.vimeo)
					}	
				}

				d=e.length;
				for(f=0; f<d; f+=1)if(e&&e[f].href){
					b=parseInt(e[f].href.split("/").pop(),10);
					if(b>1&&a.v.hazCalledForThumb["_"+b]!==true){
						a.f.call("http://vimeo.com/api/v2/video/"+b+".json?callback=",a.f.ping.vimeo);
						a.v.hazCalledForThumb["_"+b]=true
					}
				}
			}, pinterest:function(){
				a.f.close(a.a.msg.installed)
			}, facebook:function(){
				a.f.close(a.a.msg.privateDomain.replace(/%privateDomain%/,"Facebook"))
			}, googleReader:function(){
				a.f.close(a.a.msg.privateDomain.replace(/%privateDomain%/,"Google Reader"))
			}, stumbleUpon:function(){
				var b=0,c=a.a.stumbleFrame.length,e;
				for(b=0; b<c; b+=1)if(e=a.d.getElementById(a.a.stumbleFrame[b])){
					a.f.close();
					if(a.w.confirm(a.a.msg.bustFrame)){
						a.d.location=e.src;
						a.w.open(e.src)
					}

					break
				}
			}
		}, hazSite:{
			youtube:{
				iframe:function(b){
					b=b.src.split("?")[0].split("&")[0].split("/");
					a.f.thumb("http://img.youtube.com/vi/"+b.pop()+"/0.jpg",360,480,"video")
				}, video:function(b){
					b.getAttribute("data-youtube-id")&&a.f.thumb("http://img.youtube.com/vi/"+b.getAttribute("data-youtube-id")+"/0.jpg",360,480,"video")
				}, embed:function(b){
					var c=b.getAttribute("flashvars"),e="";
					(e=c?c.split("video_id=")[1].split("&")[0]:b.src.split("?")[0].split("&")[0].split("/").pop())&&a.f.thumb("http://img.youtube.com/vi/"+e+"/0.jpg",360,480,"video")
				}, object:function(b){
					b=b.getAttribute("data");
					var c="";
					if(b)c=b.split("?")[0].split("&")[0].split("/").pop();
					c&&a.f.thumb("http://img.youtube.com/vi/"+c+"/0.jpg",360,480,"video")
				}
			}, vimeo:{
				iframe:function(b){
					a.f.call("http://vimeo.com/api/v2/video/"+b.src.split("/").pop()+".json?callback=",a.f.ping.vimeo)
				}

			}

		},hazTag:{
			img:function(b){
				var c;
				if(!b.src.match(/^data/)){
					c=new Image;
					c.src=b.src;
					c.height>a.a.minImgSize&&c.width>a.a.minImgSize&&a.f.thumb(c.src,c.height,c.width)
				}
			},meta:function(b){
				b.name&&b.name.toUpperCase()==="PINTEREST"&&b.content&&b.content.toUpperCase()==="NOPIN"&&a.f.close(a.a.msg.noPin)
			}
		},checkTags:function(){
			var b,c,e,d,f,g,h,j,i;
			a.v.tag=[];
			b=0;
			for(c=a.a.check.length; b<c; b+=1){
				f=a.d.getElementsByTagName(a.a.check[b]);
				e=0;
				for(d=f.length; e<d; e+=1){
					g=f[e];
					!g.getAttribute("nopin")&&g.style.display!=="none"&&g.style.visibility!=="hidden"&&a.v.tag.push(g)
				}
			}

			b=0;
			for(c=a.v.tag.length;b<c;b+=1){
				f=a.v.tag[b];
				g=f.tagName.toLowerCase();
				if(a.f.hazTag[g])
					a.f.hazTag[g](f);
				else 
					if(a.a.tag[g])for(h in a.a.tag[g])if(a.a.tag[g][h].hasOwnProperty){
				j=a.a.tag[g][h];
				if(i=a.f.get(f,j.att)){
					e=0;
					for(d=j.match.length; e<d;e+=1)i.match(j.match[e])&&a.f.hazSite[h][g](f)
				}
			}
		}
	},structure:function(){
		a.s.shim=a.f.make({
			IFRAME:{
				height:"100%",width:"100%",allowTransparency:true,id:a.a.k+"_shim"
			}
		});
		a.s.shim.setAttribute("nopin","nopin");
		a.d.b.appendChild(a.s.shim);
		a.s.bg=a.f.make({
			DIV:{
				id:a.a.k+"_bg"
			}
		});
		a.d.b.appendChild(a.s.bg);
		a.s.bd=a.f.make({
			DIV:{
				id:a.a.k+"_bd"
			}
		});
		a.s.x=a.f.make({
			A:{
				id:a.a.k+"_x",innerHTML:a.a.msg.cancelTitle
			}
		});
		a.s.bd.appendChild(a.s.x);
		a.s.bd.appendChild(a.f.make({
			SPAN:{
				id:a.a.k+"_logo"
			}
		}));
		a.d.b.appendChild(a.s.bd);
		a.w.scroll(0,0)
	},checkUrl:function(){
		var b;
		for(b in a.a.url)if(a.a.url[b].hasOwnProperty)if(a.d.URL.match(a.a.url[b])){
			a.f.hazUrl[b]();
			if(a.v.hazGoodUrl===false)return false
		}

		return true
	},checkPage:function(){
		if(a.f.checkUrl()){
			a.f.checkTags();
			if(a.v.hazGoodUrl===false)return false
		}
		else return false;
		return true
	},init:function(){
		a.d.b=a.d.getElementsByTagName("BODY")[0];
		a.d.h=a.d.getElementsByTagName("HEAD")[0];
		if(!(!a.d.b||!a.d.h||k.hazPinningNow===true)){
			var b,c=a.n.userAgent;
			a.v={
				saveScrollTop:a.w.pageYOffset,hazGoodUrl:true,hazAtLeastOneGoodThumb:false,hazSrc:{
			},hazCalledForThumb:{
		},hazIE:function(){
			return/msie/i.test(c)&&!/opera/i.test(c)
		}(),hazIOS:function(){
			return c.match(/iP/)!==null
		}(),firstScript:a.d.getElementsByTagName("SCRIPT")[0],selectedText:a.f.getSelection()
	};
	b=a.a.checkpoint.url+"?url="+encodeURIComponent(a.d.URL)+"&callback=";
	a.f.call(b,a.f.ping.check);
	a.f.structure();
	a.f.presentation();
	if(a.f.checkPage())if(a.v.hazGoodUrl===true){
		a.f.behavior();
		if(!(a.f.callback.length>1))if(a.v.hazAtLeastOneGoodThumb===false||a.v.tag.length===0){
			a.f.close(a.a.msg.notFound);
			return
		}
	}

	k.hazPinningNow=true
}
}
}
}()
};
a.f.init()
})(window,document,navigator,{
	k:"PIN_"+(new Date).getTime(),
	checkpoint:{
		url:"'.$url.'"
	},pin:"'.$url.'",minImgSize:80,thumbCellSize:200,check:["meta","iframe","embed","object","img","video"],
		url:{
			vimeo:/^https?:\/\/.*?\.?vimeo\.com\//,facebook:/^https?:\/\/.*?\.?facebook\.com\//,googleReader:/^https?:\/\/.*?\.?google\.com\/reader\//,pinterest:/^https?:\/\/.*?\.?pinterest\.com\//,stumbleUpon:/^https?:\/\/.*?\.?stumbleupon\.com\//
		},
		stumbleFrame:["tb-stumble-frame","stumbleFrame"],
		tag:{
		video:{
			youtube:{
				att:"src",
				match:[/videoplayback/]
			}
		},
		embed:{
			youtube:{
				att:"src",match:[/^http:\/\/s\.ytimg\.com\/yt/,/^http:\/\/.*?\.?youtube-nocookie\.com\/v/]
			}
		},
		iframe:{
			youtube:{
				att:"src",match:[/^http:\/\/www\.youtube\.com\/embed\/([a-zA-Z0-9\-_]+)/]
			},
			vimeo:{
				att:"src",match:[/^http?s:\/\/vimeo.com\/(\d+)/,/^http:\/\/player\.vimeo\.com\/video\/(\d+)/]
			}
		},
		object:{
			youtube:{
				att:"data",match:[/^http:\/\/.*?\.?youtube-nocookie\.com\/v/]
			}
		}
	},
	msg:{
		check:"",
		cancelTitle:"'.$t0.'",
		bustFrame:"'.$t1.'",
		noPin:"'.$t2.'",
		privateDomain:"'.$t3.'",
		notFound:"'.$t4.'",
		installed:"'.$t5.'"
	},
	pop:"status=yes,resizable=yes,scrollbars=yes,personalbar=no,directories=yes,location=yes,toolbar=yes,menubar=yes,left=0,top=0",
		rules:["#_bg {
		position:fixed;
		z-index:8675309;
 		top:0;
 		right:0;
 		bottom:0;
 		left:0;
 		background-color:#e2e2e2;
 		opacity:.95; 
	}","
	#_shim {
		position:fixed;
 		background: transparent;
 		z-index:8675308;
 		top:0;
 		right:0;
 		bottom:0;
 		left:0;
	}","
	#_bd {
		position: absolute;
 		text-align: left;
 		padding-top: 36px;
 		top: 0;
 		left: 0;
 		right: 0;
 		z-index:8675320;
 		font:16px hevetica neue,arial,san-serif;
	}","
	#_bd span {
 		zoom:1;
 		display: inline-block;
 		background: #fff;
 		height:200px;
 		width:200px;
 		border: 1px solid #bbb;
 		border-top: none;
 		border-left:none;
 		text-decoration: none;
  	text-shadow: 0 1px #fff;
 		position: relative;
 		cursor: pointer;
 		vertical-align:middle; 
	}","
	#_bd span#_logo {
		background: #FCF9F9 url('.theme_get_setting('logo').') 50% 50% no-repeat;
 		box-shadow: none;
	}","
	#_bd a#_x {
		height: 36px;
 		line-height: 36px;
 		position: fixed;
 		font-size: 14px;
 		font-weight: bold;
 		display: block;
 		width:auto;
 		top: 0;
 		left: 0;
 		right: 0;
 		margin: 0;
 		background: url('.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/fullGradient07Normal.png) repeat-x scroll 0 0 #FFFFFF;
 		border-bottom: 1px solid #bbb;
 		color: #211922;
 		text-align: center;
 		z-index:8675321;
	}","
	#_bd a#_x:active {
		background-color: #211922;
 		background-image: url('.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/fullGradient07Inverted.png);
 		border-color: #211922;
 		text-shadow: 0 -1px #211922;
	}","
	#_bd a#_x:hover {
		color: #fff;
 		text-decoration: none;
 		background-color: #900;

 		border-color: #900;
 		text-shadow: 1px 1px #600;
	}","
	#_bd a img {
		max-height:200px;
 		max-width:200px;
 		top: 50%;
 		left: 50%;
 		position: absolute;
 		z-index:8675312;
	}","
	#_bd a b {
 		z-index: 8675315;
 		position: absolute;
 		top: 50%;
 		left: 50%;
 		height: 50px;
 		width: 50px;
 		background: transparent url('.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/VideoIndicator.png) 0 0 no-repeat;
 		margin-top: -25px;
 		margin-left: -25px;
	}","
	#_bd a cite {
		z-index: 8675316;
 		position: absolute;
 		font-size: 10px;
 		font-style: normal;
 		bottom: 5px;
 		width: 100px;
 		left: 50%;
 		margin-left: -50px;
 		text-align: center;
 		color: #000;
 		background: #fff;
 		padding: 3px;
	}","
	#_bd span._pinContainer {
		z-index: 8675320;
 		height: 200px;
 		width: 200px;
 		background: #fff;
	}","
	#_bd span._pinButton {
		z-index: 8675320;
 		height: 200px;
 		width: 200px;
 		background: transparent;
	}","
	#_bd span._pinButton:hover {
		height: 200px;
 		width: 200px;
 		background: transparent url('.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/PinThis.png) 50% 50% no-repeat;
	}"]

});
');
}
exit;
}


function pinboard_helper_addboardpin () {
  
  global $base_url;
  $out = '';
  $out .= '<div class="PinButtonB">'.l('<img src="'.$base_url.'/'.path_to_theme().'/'.PINBOARD_REPLACE_ADDBOARDPIN_IMG1.'" /><br /><span>'.pinboard_helper_const('PINBOARD_REPLACE_TITLE_ADDAPIN'), PINBOARD_REPLACE_PATH_ADDAPIN, array('html' => TRUE)).'</span>';
  $out .= l('<img src="'.$base_url.'/'.path_to_theme().'/'.PINBOARD_REPLACE_ADDBOARDPIN_IMG2.'" /><br /><span>'.pinboard_helper_const('PINBOARD_REPLACE_ADDBOARDPIN_TITLE2'), 'node/add/'.PINBOARD_REPLACE_PATH_PIN, array('html' => TRUE)).'</span>';
  $out .= l('<img src="'.$base_url.'/'.path_to_theme().'/'.PINBOARD_REPLACE_ADDBOARDPIN_IMG3.'" /><br /><span>'.pinboard_helper_const('PINBOARD_REPLACE_ADDBOARDPIN_TITLE3'), PINBOARD_REPLACE_PATH_BOARD.'/add', array('html' => TRUE)).'</span></div>';
  return t($out);
}

function pinboard_helper_addpinit () {
  global $user;
  if (!$user->uid) drupal_goto('user');
  if (isset($GLOBALS['conf']['clean_url'])) $t = '?'; else $t = '&';
  $url = url(PINBOARD_REPLACE_PATH_PINIT, array('absolute' => TRUE)).$t;
  $url = str_replace(array('http:', 'https:'), '', $url);
  $out = '';
  $out .= '<div id="PinItButtonContainer"><div id="PinButton"><div id="ButtonHolder"><a onclick="alert(\''.pinboard_helper_const('PINBOARD_REPLACE_ADDPINIT_MESSAGE1').'\'); return false;" href="javascript:void((function(){var e=document.createElement(\'script\');e.setAttribute(\'type\',\'text/javascript\');e.setAttribute(\'charset\',\'UTF-8\');e.setAttribute(\'src\',\''.$url.'r=\'+Math.random()*99999999);document.body.appendChild(e)})());" title="'.pinboard_helper_const('PINBOARD_REPLACE_ADDPINIT_MESSAGE2').'" id="BigPinItButton"><strong>'.pinboard_helper_const('PINBOARD_REPLACE_ADDPINIT_MESSAGE2').'</strong><span></span></a>';
  $out .= '<p id="ButtonInstructions"> &nbsp;&nbsp;'.pinboard_helper_const('PINBOARD_REPLACE_ADDPINIT_MESSAGE3').'</p></div>';

  $out .= '<p>'.pinboard_helper_const('PINBOARD_REPLACE_ADDPINIT_MESSAGE4').'</p>';
  $out .= '<div id="InstallationInstructions" class="small"><ol>';
  $out .= '<li>'.pinboard_helper_const('PINBOARD_REPLACE_ADDPINIT_MESSAGE5').'</li>';
  $out .= '<li>'.pinboard_helper_const('PINBOARD_REPLACE_ADDPINIT_MESSAGE6').'</li>';
  $out .= '<li>'.pinboard_helper_const('PINBOARD_REPLACE_ADDPINIT_MESSAGE7').'</li>';
  $out .= '</ol></div>';
  $out .= '<p>'.pinboard_helper_const('PINBOARD_REPLACE_ADDPINIT_MESSAGE8').'</p>';
  $out .= '</div></div>';
  return $out;
}

function pinboard_helper_userpage_pins () {
	global $base_url, $user; 
	if (arg(1)) {
  	$acc = user_load(arg(1));
	} else {
		return '';
	}
	$destination = drupal_get_destination();
	$out = '';

	if (arg(2) == PINBOARD_REPLACE_PATH_BOARD) {
  	if (is_numeric(arg(3)) and arg(3)){
  	    $result = db_select('pinboard_boards')->fields('pinboard_boards', array('data'))->condition('bid', arg(3), '=')->execute();
  			foreach ($result as $us) {
    			$bdata = unserialize($us->data);
  			}
  			if (!isset($bdata['description'])) $bdata['description'] = '';
      $result = db_select('pinboard_boards', 'b')
      	->fields('b',array('name'))
        ->condition('bid', arg(3))
        ->condition('uid', arg(1))
        ->execute()->fetchCol(); 
          
      
      if (!(isset($_GET['mob']) and $_GET['mob'])) {
        if ($user->uid and $acc->uid != $user->uid)
          if (pinboard_helper_isfollow ($acc, arg(3))) 
            $out .= '<div class="flr"><a href="'.url(PINBOARD_REPLACE_PATH_UNFOLLOW.'/'.$acc->uid.'/'.arg(3), array('query' => $destination)).'">'.pinboard_helper_const('PINBOARD_REPLACE_TITLE_UNFOLLOW').'</a></div>';
          else
            $out .= '<div class="flr"><a href="'.url(PINBOARD_REPLACE_PATH_FOLLOW.'/'.$acc->uid.'/'.arg(3), array('query' => $destination)).'">'.pinboard_helper_const('PINBOARD_REPLACE_TITLE_FOLLOW').'</a></div>';
          if (isset($result[0])) $out .= '<h3>'.$result[0].'</h3>';
          if (!isset($_GET['page']) and $bdata['description']) $out .= '<p>'.$bdata['description'].'</p>';
          if ($out) $out = '<div class="titlebg">'.$out.'</div>';
          $out .= '<div id="block-system-main" class="block block-system"><div class="content">';
        }
        $result = db_select('pinboard_repins', 'r')->extend('PagerDefault')->fields('r', array('nid'))->condition('bid', arg(3), '=')->orderBy('nid', 'DESC')->limit(15)->execute()->fetchCol();
    } else {
      $out .= ''.'';
      $out .= '<div id="block-system-main" class="block block-system"><div class="content">';
      $result = db_select('node', 'r')->extend('PagerDefault')->fields('r', array('nid'))->condition('type', PINBOARD_REPLACE_PATH_PIN, '=')->condition('status', 1, '=')->condition('uid', $acc->uid, '=')->orderBy('created', 'DESC')->limit(15)->execute()->fetchCol();
    }
    $nodes = node_load_multiple($result);
    $nodes = node_view_multiple($nodes);
    
    $pp = theme('pager');
    if (!$pp or !isset($_GET['page']) or strpos($pp,'page='.$_GET['page']) or strpos($pp, '>'.($_GET['page'] + 1).'<'))
    	$out .= render($nodes);
    $out .= $pp;
  } elseif (arg(2) == PINBOARD_REPLACE_PATH_FOLLOWERS) {
    $out1 = '';
    $out1 .= '<div class="titlebg"><h2>'.pinboard_helper_const('PINBOARD_REPLACE_TITLE_FOLLOWERS').'</h2></div>';
    $out1 .= '<div id="block-system-main" class="block block-system"><div class="content">';
    $uids = db_select('pinboard_follow','p')
      ->extend('PagerDefault')
      ->limit(15)
      //->fields('p', array('uid'));
    	->condition('p.aid', $acc->uid);
    $uids->addExpression('distinct(p.uid)');
    $uids = $uids->execute()->fetchCol();

    if (count($uids)) foreach ($uids as $uidi) {
      $ui = user_load($uidi);
      $result = db_select('node', 'r')
        ->fields('r', array('nid'))
        ->condition('uid', $uidi, '=')
        ->condition('type', PINBOARD_REPLACE_PATH_PIN, '=')
        ->range(0, 12)->execute()->fetchCol();
      $nodes = node_load_multiple($result);
      $nodes = node_view_multiple($nodes);
      $out1 .= '<div class="repins_box zoom_info"><h3>'.theme('username', array('account' => $ui)).'</h3><a href="'.url('user/'.$ui->uid).'"><ul class="b_thumbs">';
      foreach ($nodes['nodes'] as $k2 => $v2) {
        if (isset($v2['field_image'][0]['#image_style'])) $v2['field_image'][0]['#image_style'] = 'pin_tmb_2';
        if (isset($v2['field_image'][0]['#path'])) $v2['field_image'][0]['#path'] = '';
        if (isset($v2['field_image']) and is_array($v2['field_image'])) $out1 .= '<li>'.render($v2['field_image']).'</li>';
      }
      $out1 .= '</ul></a></div>';
    }
    
    $pp = theme('pager');
    if (!$pp or !isset($_GET['page']) or strpos($pp,'page='.$_GET['page']) or strpos($pp, '>'.($_GET['page'] + 1).'<'))
      $out .= $out1;
    $out .= $pp;
  } elseif (arg(2) == PINBOARD_REPLACE_PATH_FOLLOWING) {
    $out1 = '';
    $out1 .= '<div class="titlebg"><h2>'.pinboard_helper_const('PINBOARD_REPLACE_TITLE_FOLLOWING').'</h2></div>';
    $out1 .= '<div id="block-system-main" class="block block-system"><div class="content">';
    $uids = db_select('pinboard_follow','p')
      //->fields('p', array('uid'));
      ->condition('p.uid', $acc->uid);
    $uids->addExpression('distinct(p.aid)');
    $uids = $uids->execute()->fetchCol();

    if (count($uids)) foreach ($uids as $uidi) {
      $ui = user_load($uidi);
      $result = db_select('node', 'r')
        ->fields('r', array('nid'))
        ->condition('uid', $uidi, '=')
        ->condition('type', PINBOARD_REPLACE_PATH_PIN, '=')
        ->range(0, 12)->execute()->fetchCol();
      $nodes = node_load_multiple($result);
      $nodes = node_view_multiple($nodes);
      $out1 .= '<div class="repins_box zoom_info"><h3>'.theme('username', array('account' => $ui)).'</h3><a href="'.url('user/'.$ui->uid).'"><ul class="b_thumbs">';
      foreach ($nodes['nodes'] as $k2 => $v2) {
        if (isset($v2['field_image'][0]['#image_style'])) $v2['field_image'][0]['#image_style'] = 'pin_tmb_2';
        if (isset($v2['field_image'][0]['#path'])) $v2['field_image'][0]['#path'] = '';
        if (isset($v2['field_image']) and is_array($v2['field_image'])) $out1 .= '<li>'.render($v2['field_image']).'</li>';
      }
      $out1 .= '</ul></a></div>';
    }
    $pp = theme('pager');
    if (!$pp or !isset($_GET['page']) or strpos($pp,'page='.$_GET['page']) or strpos($pp, '>'.($_GET['page'] + 1).'<'))
    	$out .= $out1;
    $out .= $pp;
    } else {
      $out1 = '';
      $out1 = '<div id="block-system-main" class="block block-system"><div class="content">';
      $result = db_select('pinboard_boards', 'b')
        ->extend('PagerDefault')
        ->fields('b',array('bid', 'name'))
        ->condition('uid', arg(1))
        ->orderBy('name', 'ASC')
        ->limit(15)->execute()->fetchAllKeyed();   
      foreach ($result as $k => $v) {
        
        $result2 = db_select('pinboard_repins', 'r')->fields('r', array('nid'))->condition('bid', $k, '=')->orderBy('nid', 'DESC')->range(0, 9)->execute()->fetchCol();
        if (count($result2)) {
          $out1 .= '<div class="board"><div class="board_in clearfix"><h2>'.$v.'</h2><div class="thumb clearfix"><a class="link" href="'.url('user/'.$acc->uid.'/'.PINBOARD_REPLACE_PATH_BOARD.'/'.$k).'">';
          $nodes = node_load_multiple($result2);
          $nodes = node_view_multiple($nodes);
          //print '<div class="user_profile_main"><pre>'. check_plain(print_r($nodes['nodes'], 1)) .'</pre></div>'; 
          foreach ($nodes['nodes'] as $k2 => $v2) {
            //print '<div class="user_profile_main"><pre>'. check_plain(print_r($v2['field_embed'], 1)) .'</pre></div>';  
            if (isset($v2['field_image']) and is_array($v2['field_image'])) { 
            	if (isset($v2['field_image'][0]['#image_style'])) $v2['field_image'][0]['#image_style'] = 'pin_tmb_2';
              if (isset($v2['field_image'][0]['#path'])) $v2['field_image'][0]['#path'] = '';
              $out1 .= render($v2['field_image']);
            } elseif (isset($v2['field_embed']) and is_array($v2['field_embed'])) {
              if (isset($v2['field_embed'][0][0]['#style_name'])) $v2['field_embed'][0][0]['#style_name'] = 'pin_tmb_2';
              if (isset($v2['field_embed'][0]['#prefix'])) $v2['field_embed'][0]['#prefix'] = '';
              if (isset($v2['field_embed'][0]['#suffix'])) $v2['field_embed'][0]['#suffix'] = '';
              $out1 .= render($v2['field_embed']);
            }
          }
          $ii = 9 - count($result2);
        } else {
          $out1 .= '<div class="board"><div class="board_in clearfix"><h2>'.$v.'</h2><div class="thumb clearfix">';
          $ii = 9;
        }
        for ( $i=0; $i<$ii; $i++) {
          $out1 .= '<div class="noimgpinbrd">&nbsp;</div>';
        }
        if (count($result2)) {
          $out1 .= '</a></div>';
        } else {
          $out1 .= '</div>';
        }
        
        if ($user->uid and $acc->uid != $user->uid) { 
          if (pinboard_helper_isfollow ($acc, $k)) 
            $out1 .= '<div class="follow_b"><a class="b" href="'.url(PINBOARD_REPLACE_PATH_UNFOLLOW.'/'.$acc->uid.'/'.$k, array('query' => $destination)).'">'.pinboard_helper_const('PINBOARD_REPLACE_TITLE_UNFOLLOW').'</a></div>';
          else
            $out1 .= '<div class="follow_b"><a class="b" href="'.url(PINBOARD_REPLACE_PATH_FOLLOW.'/'.$acc->uid.'/'.$k, array('query' => $destination)).'">'.pinboard_helper_const('PINBOARD_REPLACE_TITLE_FOLLOW').'</a></div>';
        } elseif ($user->uid) {
          $out1 .= '<div class="follow_b"><a class="b" href="'.url(PINBOARD_REPLACE_PATH_BOARD.'/edit/'.$k, array('query' => $destination)).'">'.t('Edit').'</a></div>';
        }
        $out1 .= '</div></div>';
        //} else {
          //db_delete('pinboard_boards')->condition('bid', $k, '=')->execute();
        //}
        //print '</a></div><div class="follow_b"><a class="b" href="#">Follow</a></div></div></div>';
      }
      $pp = theme('pager');
      if (!$pp or !isset($_GET['page']) or strpos($pp,'page='.$_GET['page']) or strpos($pp, '>'.($_GET['page'] + 1).'<'))
        $out .= $out1;
      $out .= $pp;
      //print theme('pager');
    }
    return $out;
}

function pinboard_helper_originally_pinned($node) {
  //drupal_set_message('<pre>'. check_plain(print_r($node, 1)) .'</pre>');

  $out = $out1 = '';
  $query = db_select('pinboard_repins', 'v');
  $query->addField('v', 'nid');
  $query->condition('v.uid', $node->ph_uid, '=');
  $query->orderRandom();
  $query->range(0, 6);
  $result = $query->execute()->fetchCol();
  $nodes = node_load_multiple($result);
  $nodes = node_view_multiple($nodes);

  foreach ($nodes['nodes'] as $k2 => $v2) {
    $out1 = '';
    if (isset($v2['field_image']) and is_array($v2['field_image'])) { 
      if (isset($v2['field_image'][0]['#image_style'])) $v2['field_image'][0]['#image_style'] = 'pin_tmb_2';
      if (isset($v2['field_image'][0]['#path'])) $v2['field_image'][0]['#path'] = '';
      $out1 = render($v2['field_image']);
    } elseif (isset($v2['field_embed']) and is_array($v2['field_embed'])) {
      if (isset($v2['field_embed'][0][0]['#style_name'])) $v2['field_embed'][0][0]['#style_name'] = 'pin_tmb_2';
      if (isset($v2['field_embed'][0]['#prefix'])) $v2['field_embed'][0]['#prefix'] = '';
      if (isset($v2['field_embed'][0]['#suffix'])) $v2['field_embed'][0]['#suffix'] = '';
      $out1 = render($v2['field_embed']);
    }
    $out .= $out1 ? '<li>'.$out1.'</li>' : ''; 
  }
  return $out;
}

function pinboard_helper_pinned_onto_board($node) {
  

  $out = $out1 = '';
  $query = db_select('pinboard_repins', 'v');
  $query->addField('v', 'nid');
  $query->condition('v.bid', $node->ph_bid, '=');
  $query->orderRandom();
  $query->range(0, 5);
  $result = $query->execute()->fetchCol();
  $nodes = node_load_multiple($result);
  $nodes = node_view_multiple($nodes);
//drupal_set_message('<pre>'. check_plain(print_r($nodes, 1)) .'</pre>');
  foreach ($nodes['nodes'] as $k2 => $v2) {
    $out1 = '';
    if (isset($v2['field_image']) and is_array($v2['field_image'])) { 
      if (isset($v2['field_image'][0]['#image_style'])) $v2['field_image'][0]['#image_style'] = 'pin_tmb_2';
      if (isset($v2['field_image'][0]['#path'])) $v2['field_image'][0]['#path'] = '';
      $out1 = render($v2['field_image']);
    } elseif (isset($v2['field_embed']) and is_array($v2['field_embed'])) {
      if (isset($v2['field_embed'][0][0]['#style_name'])) $v2['field_embed'][0][0]['#style_name'] = 'pin_tmb_2';
      if (isset($v2['field_embed'][0]['#prefix'])) $v2['field_embed'][0]['#prefix'] = '';
      if (isset($v2['field_embed'][0]['#suffix'])) $v2['field_embed'][0]['#suffix'] = '';
      $out1 = render($v2['field_embed']);
    }
    $out .= $out1 ? '<li>'.$out1.'</li>' : ''; 
  }
  return $out;
}

function pinboard_helper_repins_count($node) {
  $out = 0;
  $query = db_select('pinboard_repins', 'v');
  $query->addExpression('COUNT(v.nid)');
  $query->condition('v.did', $node->nid, '=');
  $query->condition('v.nid', $node->nid, '!=');
  $count = $query->execute()->fetchCol();
  if ($count[0]) { $out = $count[0]; }
  return $out;
}

function pinboard_helper_repins_users_count($node) {
  $out = 0;
  $query = db_select('pinboard_repins', 'v');
  $query->addExpression('COUNT(v.uid)');
  $query->condition('v.did', $node->nid, '=');
  $query->condition('v.nid', $node->nid, '!=');
  $count = $query->execute()->fetchCol();
  if ($count[0]) { $out = $count[0]; }
  return $out;
}

function pinboard_helper_repins_users_out($node) {
  $out = '';
  $query = db_select('pinboard_repins', 'v');
  $query->addField('v', 'uid');
  $query->condition('v.did', $node->nid, '=');
  $query->condition('v.nid', $node->nid, '!=');
  $query->range(0, 12);
  $result = $query->execute()->fetchCol();
  foreach ($result as $ruid) {
    $ruser->uid = $ruid;
    $ruser = user_load($ruid);
    $out .= '<li>'.theme('user_picture', array('account' => $ruser))./*'<p>'.theme('username', array('account' => $ruser)).'</p>'.*/'</li>';
    unset($ruser);
  }
  return $out;
}

function pinboard_helper_like_box_count($node) {
  $out = 0;
  $query = db_select('votingapi_vote', 'v');
  $query->addExpression('COUNT(v.uid)');
  $query->condition('v.entity_type', 'node', '=');
  $query->condition('v.entity_id', $node->nid, '=');
  $query->condition('v.uid', 0, '>');
  $count = $query->execute()->fetchCol();
  if ($count[0]) { $out = $count[0]; }
  return $out;
}

function pinboard_helper_like_box_out($node) {
  $out = '';
  $query = db_select('votingapi_vote', 'v');
  $query->addField('v', 'uid');
  $query->condition('v.entity_type', 'node', '=');
  $query->condition('v.entity_id', $node->nid, '=');
  $query->condition('v.uid', 0, '>');
  $query->range(0, 12);
  $result = $query->execute()->fetchCol();
  foreach ($result as $ruid) {
    $ruser->uid = $ruid;
    $ruser = user_load($ruid);
    $out .= '<li>'.theme('user_picture', array('account' => $ruser)).'</li>';
    unset($ruser);
  }
  return $out;
}

function pinboard_helper_user_boards_count($uid) {
  $out = 0;
  $query = db_select('pinboard_boards', 'v');
  $query->addExpression('COUNT(v.bid)');
  $query->condition('v.uid', $uid, '=');
  $count = $query->execute()->fetchCol();
  if ($count[0]) { $out = $count[0]; }
  return $out;
}

function pinboard_helper_user_pin_count($uid) {
  $out = 0;
  $query = db_select('pinboard_repins', 'v');
  $query->addExpression('COUNT(v.nid)');
  $query->condition('v.uid', $uid, '=');
  $count = $query->execute()->fetchCol();
  if ($count[0]) { $out = $count[0]; }
  return $out;
}

function pinboard_helper_board_pin_count($bid) {
  $out = 0;
  $query = db_select('pinboard_repins', 'v');
  $query->addExpression('COUNT(v.nid)');
  $query->condition('v.bid', $bid, '=');
  $count = $query->execute()->fetchCol();
  if ($count[0]) { $out = $count[0]; }
  return $out;
}

function pinboard_helper_user_like_count($uid) {
  $out = 0;
  $query = db_select('votingapi_vote', 'v');
  $query->addExpression('COUNT(v.vote_id)');
  $query->condition('v.entity_type', 'node', '=');
  $query->condition('v.uid', $uid, '=');
  $count = $query->execute()->fetchCol();
  if ($count[0]) { $out = $count[0]; }
  return $out;
}

function pinboard_helper_preprocess_html(&$vars) {
  if (isset($vars['page']['page_top']['toolbar'])) {
    $vars['classes_array'][] = 'toolbar';
    if (!_toolbar_is_collapsed()) {
      $vars['classes_array'][] = 'toolbar-drawer';
    }
  }
}


function pinboard_helper_url_outbound_alter(&$path, &$options, $original_path) {
  if (isset($_GET['mob']) and $_GET['mob']) {
    $options['query']['mob'] = $_GET['mob'];
  }
}

function pinboard_helper_mobile_top_out() {
  global $user, $base_url;
  drupal_add_js('misc/tableheader.js');
  drupal_add_js('misc/jquery.cookie.js');
  drupal_add_js(drupal_get_path('module','toolbar').'/toolbar.js');
  drupal_add_js(array('tableHeaderOffset' => 'Drupal.toolbar.height'),'setting');
  drupal_add_css(drupal_get_path('module','toolbar').'/toolbar.css');
  
  $out = '';
  $out .= '<a href="'.url('', array('absolute' => TRUE, 'query' => array('mob' => '1'))).'"><img src="'.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/ic_menu_home.png'.'" /></a>';
  $out .= '<a href="'.url('category-list', array('absolute' => TRUE, 'query' => array('mob' => '1'))).'"><img src="'.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/ic_menu_show_list.png'.'" /></a>';
  if ($user->uid) {
    $out .= '<a href="JavaScript:console.log(\'uploadPH\');uploadPH();"><img src="'.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/ic_menu_add.png'.'" /></a>';
    $out .= '<a href="'.url('user/logout', array('absolute' => TRUE, 'query' => array('mob' => '1'))).'"><img src="'.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/ic_menu_logout.png'.'" /></a>';
  } else {
    //if (arg(0) == 'user' and arg(1) != 'register') {
      $out .= '<a href="'.url('user/register', array('absolute' => TRUE, 'query' => array('mob' => '1'))).'"><img src="'.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/ic_menu_invite.png'.'" /></a>';
    //} else {
      $out .= '<a href="'.url('user', array('absolute' => TRUE, 'query' => array('mob' => '1'))).'"><img src="'.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/ic_menu_login.png'.'" /></a>';
    //}
  }
  
  $out .= '<a href="JavaScript:history.back();"><img src="'.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/ic_menu_revert.png'.'" /></a>';
  $out .= '<a href="JavaScript:window.location.reload(1);"><img src="'.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/ic_menu_refresh.png'.'" /></a>';
  //$out .= '<a href="JavaScript:onDeviceReady();">D</a>';
  return $out;
}


function pinboard_helper_mobilefileupload() {
  global $user;
  //watchdog('upload_file', '<pre>'. check_plain(print_r($_FILES, 1)) .'</pre>');

  $file = new stdClass();
  $file->uid      = $user->uid;
  $file->status   = 0;
  $file->filename = trim(drupal_basename($_FILES['file']['name']), '.');
  $file->uri      = $_FILES['file']['tmp_name'];
  $file->filemime = file_get_mimetype($file->filename);
  $file->filesize = $_FILES['file']['size'];
  
  $destination = file_default_scheme() . '://';
  $file->destination = file_destination($destination . $file->filename, FILE_EXISTS_RENAME);
  
  $file->uri = $file->destination;
  if (drupal_move_uploaded_file($_FILES['file']['tmp_name'], $file->uri)) {
    drupal_chmod($file->uri);
  }
  if ($file = file_save($file)) {
    print $file->fid;
  }
  exit;
}

function pinboard_helper_image_styles_alter(&$styles) {
  //if ($styles['thumbnail']['storage'] == IMAGE_STORAGE_DEFAULT) {
  if (theme_get_setting('tm_value_6')) {
    foreach ($styles as $s => $style) {
      if (count($style['effects']) == 1) foreach ($style['effects'] as $e => $effect) {
        if ($effect['name'] == 'image_scale') {
          $styles[$s]['effects'][$e]['effect callback'] = 'pinboard_helper_image_scale_effect';
          $styles[$s]['effects'][$e]['dimensions callback'] = 'pinboard_helper_image_scale_dimensions';
        }
        if ($effect['name'] == 'image_scale_and_crop') {
          $styles[$s]['effects'][$e]['effect callback'] = 'pinboard_helper_image_scale_and_crop_effect';
          $styles[$s]['effects'][$e]['dimensions callback'] = 'pinboard_helper_image_resize_dimensions';
        }
      }
    }
  }
  //watchdog('image_styles', '<pre>'. check_plain(print_r($styles, 1)) .'</pre>');
  //}
}

function pinboard_helper_image_scale_effect(&$image, $data) {
  $data += array(
    'width' => NULL,
    'height' => NULL,
    'upscale' => FALSE,
  );
  //watchdog('pinboard_helper_image_scale_effect_image', '<pre>'. check_plain(print_r($image, 1)) .'</pre>');
  //watchdog('pinboard_helper_image_scale_effect_data', '<pre>'. check_plain(print_r($data, 1)) .'</pre>');
  if ($image->info['mime_type'] == 'image/gif') {
    $image->toolkit = 'gifresize';  
  }
  if (!image_scale($image, $data['width'], $data['height'], $data['upscale'])) {
      watchdog('image', 'Image scale failed using the %toolkit toolkit on %path (%mimetype, %dimensions)', array('%toolkit' => $image->toolkit, '%path' => $image->source, '%mimetype' => $image->info['mime_type'], '%dimensions' => $image->info['width'] . 'x' . $image->info['height']), WATCHDOG_ERROR);
      return FALSE;
  }

  //watchdog('pinboard_helper_image_scale_effect_image_out', '<pre>'. check_plain(print_r($image, 1)) .'</pre>');
  return TRUE;
}

function pinboard_helper_image_scale_and_crop_effect(&$image, $data) {
  if ($image->info['mime_type'] == 'image/gif') {
    $image->toolkit = 'gifresize';  
  }
  if (!pinboard_helper_image_scale_and_crop($image, $data['width'], $data['height'])) {
    watchdog('image', 'Image scale and crop failed using the %toolkit toolkit on %path (%mimetype, %dimensions)', array('%toolkit' => $image->toolkit, '%path' => $image->source, '%mimetype' => $image->info['mime_type'], '%dimensions' => $image->info['width'] . 'x' . $image->info['height']), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

function pinboard_helper_image_scale_and_crop(stdClass $image, $width, $height) {
  $scale = max($width / $image->info['width'], $height / $image->info['height']);
  $x = ($image->info['width'] * $scale - $width) / 2;
  $y = ($image->info['height'] * $scale - $height) / 2;

  if ($image->toolkit == 'gifresize') {
    if (theme_get_setting('tm_value_6') == 1) {
      if (!scaleGifFile($image->source, $width, $height, $image->info['width'], $image->info['height'], $res, 4)) {
        $image->resource = $res;
        return TRUE;
      }
    } else {
      if (!scaleGifFileNOP($image->source, $width, $height, $image->info['width'], $image->info['height'], $res, 4)) {
        $image->resource = $res;
        return TRUE;
      }
    }
  } else {
    if (image_resize($image, $image->info['width'] * $scale, $image->info['height'] * $scale)) {
      return image_crop($image, $x, $y, $width, $height);
    }
  }
  return FALSE;
}

function pinboard_helper_image_scale_dimensions(array &$dimensions, array $data) {
  if ($dimensions['width'] && $dimensions['height']) {
    //watchdog('image_styles_dimensions', '<pre>'. check_plain(print_r($dimensions, 1)) .'</pre>');
    //watchdog('image_styles_dimensions_data', '<pre>'. check_plain(print_r($data, 1)) .'</pre>');
    image_dimensions_scale($dimensions, $data['width'], $data['height'], $data['upscale']);
    //watchdog('image_styles_dimensions_out', '<pre>'. check_plain(print_r($data, 1)) .'</pre>');
  }
}

function pinboard_helper_image_resize_dimensions(array &$dimensions, array $data) {
  // The new image will have the exact dimensions defined for the effect.
  $dimensions['width'] = $data['width'];
  $dimensions['height'] = $data['height'];
}

function image_gifresize_resize(stdClass $image, $width, $height) {

  
  //$res = image_gd_create_tmp($image, $width, $height);
  
  //watchdog('image_gifresize_resize_in', '<pre>'. check_plain(print_r($image, 1)) .'</pre>');
  
  //if (!imagecopyresampled($res, $image->resource, 0, 0, 0, 0, $width, $height, $image->info['width'], $image->info['height'])) {
  if (theme_get_setting('tm_value_6') == 1) {
    if (!scaleGifFile($image->source, $width, $height, $image->info['width'], $image->info['height'], $res, 4)) {
      return FALSE;
    }
  } else {
    if (!scaleGifFileNOP($image->source, $width, $height, $image->info['width'], $image->info['height'], $res, 4)) {
      return FALSE;
    }
  }

  imagedestroy($image->resource);
  // Update image object.
  $image->resource = $res;
  $image->info['width'] = $width;
  $image->info['height'] = $height;
  //watchdog('image_gifresize_resize_out', '<pre>'. check_plain(print_r($image, 1)) .'</pre>');
  return TRUE;
}

function image_gifresize_save(stdClass $image, $destination) {
  //watchdog('image_gifresize_save', '<pre>'. check_plain(print_r($image, 1)) .'</pre>');
  $scheme = file_uri_scheme($destination);
  // Work around lack of stream wrapper support in imagejpeg() and imagepng().
  if ($scheme && file_stream_wrapper_valid_scheme($scheme)) {
    // If destination is not local, save image to temporary local file.
    $local_wrappers = file_get_stream_wrappers(STREAM_WRAPPERS_LOCAL);
    if (!isset($local_wrappers[$scheme])) {
      $permanent_destination = $destination;
      $destination = drupal_tempnam('temporary://', 'gd_');
    }
    // Convert stream wrapper URI to normal path.
    $destination = drupal_realpath($destination);
  }

  $extension = str_replace('jpg', 'jpeg', $image->info['extension']);
  $function = 'image' . $extension;
  if (!function_exists($function)) {
    return FALSE;
  }
  if ($extension == 'gif') {
    $success = true;
    //if (!is_ani($image->resource)) {
      $image->resource = file_get_contents(drupal_realpath($image->source));
   // }
    FWrite ( FOpen ( $destination, "wb" ), $image->resource );
  
  } elseif ($extension == 'jpeg') {
    $success = $function($image->resource, $destination, variable_get('image_jpeg_quality', 75));
  }
  else {
    // Always save PNG images with full transparency.
    if ($extension == 'png') {
      imagealphablending($image->resource, FALSE);
      imagesavealpha($image->resource, TRUE);
    }
    $success = $function($image->resource, $destination);
  }
  // Move temporary local file to remote destination.
  if (isset($permanent_destination) && $success) {
    return (bool) file_unmanaged_move($destination, $permanent_destination, FILE_EXISTS_REPLACE);
  }
  return $success;
}

function image_gifresize_get_info(stdClass $image) {
  $details = FALSE;
  $data = getimagesize($image->source);

  if (isset($data) && is_array($data)) {
    $extensions = array('1' => 'gif', '2' => 'jpg', '3' => 'png');
    $extension = isset($extensions[$data[2]]) ?  $extensions[$data[2]] : '';
    $details = array(
      'width'     => $data[0],
      'height'    => $data[1],
      'extension' => $extension,
      'mime_type' => $data['mime'],
    );
  }

  return $details;
}

function pinboard_helper_node_view($node, $view_mode, $langcode = '') {
  // Adding the form to the node view
  $widgets = rate_get_active_widgets('node', $node->type, $view_mode);
  foreach ($widgets as $widget_id => $widget) {
    $widget_name = 'pinboard_helper_rate_' . $widget->name;
    _rate_check_widget($widget);
    //$node = $content_type == 'node' ? node_load($content_id) : NULL;
    $permission_status = _rate_check_permissions($widget, $node);
    isset($widget->noperm_behaviour) or $widget->noperm_behaviour = RATE_NOPERM_REDIRECT_WITH_MESSAGE;

    if ($permission_status != RATE_PERMISSION_OK) {
    
      switch ($widget->noperm_behaviour) {
        case RATE_NOPERM_REDIRECT_WITH_MESSAGE:
          $display_mode = $view_mode == 'teaser' ? $widget->teaser_display_mode : $widget->node_display_mode;
          $widget_code = array(
            '#weight' => $widget->node_display == RATE_DISPLAY_ABOVE_CONTENT ? -50 : 50,
            '#markup' => pinboard_helper_rate_generate_widget('user/login-to-rate',$widget_id, 'node', $node->nid, $display_mode),
          );
          break;
        case RATE_NOPERM_REDIRECT_WITHOUT_MESSAGE:
          $display_mode = $view_mode == 'teaser' ? $widget->teaser_display_mode : $widget->node_display_mode;
          $widget_code = array(
            '#weight' => $widget->node_display == RATE_DISPLAY_ABOVE_CONTENT ? -50 : 50,
            '#markup' => pinboard_helper_rate_generate_widget('user',$widget_id, 'node', $node->nid, $display_mode),
          );
          break;
        default:
          return;
      }
    
    } else {
      $display_mode = $view_mode == 'teaser' ? $widget->teaser_display_mode : $widget->node_display_mode;
      $widget_code = array(
        '#weight' => $widget->node_display == RATE_DISPLAY_ABOVE_CONTENT ? -50 : 50,
        '#markup' => rate_generate_widget($widget_id, 'node', $node->nid, $display_mode),
      );
    }
    if ($widget->node_display == RATE_DISPLAY_DISABLE) {
      $node->$widget_name = $widget_code;
    }
    else {
      $node->content[$widget_name] = $widget_code;
    }
  }
}

function pinboard_helper_rate_generate_widget($url_reg, $widget_id, $content_type, $content_id, $mode = RATE_FULL, $include_div = TRUE, $just_voted = FALSE, $displayed = NULL) {
  global $user;

  // Check input.
  if (!is_numeric($widget_id) || empty($content_type) || !is_numeric($content_id)) {
    return NULL;
  }
  
  $widgets = variable_get(RATE_VAR_WIDGETS, array());
  $widget = $widgets[$widget_id];
  _rate_check_widget($widget);

  // Determine if the user may vote.
  $node = $content_type == 'node' ? node_load($content_id) : NULL;
  $permission_status = _rate_check_permissions($widget, $node);

  // This option should be available, check for legacy.
  isset($widget->noperm_behaviour) or $widget->noperm_behaviour = RATE_NOPERM_REDIRECT_WITH_MESSAGE;
  isset($widget->displayed) or $widget->displayed = RATE_AVERAGE;

  if ($permission_status != RATE_PERMISSION_OK && $widget->noperm_behaviour == RATE_NOPERM_HIDE_WIDGET) {
    return NULL;
  }
  elseif ($permission_status == RATE_PERMISSION_DISALLOWED_ROLE && $widget->noperm_behaviour == RATE_NOPERM_SHOW_DISABLED_WIDGET) {
    $mode = RATE_DISABLED;
  }
  elseif ($permission_status == RATE_PERMISSION_DISALLOWED_AUTHOR) {
    $mode = RATE_DISABLED;
  }

  // Store the display mode in $widget, so it can be altered by hook_rate_widget.
  $widget->mode = $mode;

  // Let other modules alter the rate widget.
  $context = array(
    'content_type' => $content_type,
    'content_id' => $content_id,
  );
  drupal_alter('rate_widget', $widget, $context);

  $div_id = "rate-$content_type-$content_id-$widget_id-$mode";
  $theme_name = str_replace('-', '_', $widget->name);
  $theme = array('rate_widget__' . $theme_name, 'rate_widget');
  if (isset($widget->theme)) {
    // This overrules the default theming pattern. Used for templates.
    $theme = $widget->theme;
  }

  // Get voting results.
  $results = rate_get_results($content_type, $content_id, $widget_id);

  $results['empty'] = $results['count'] ? FALSE : TRUE;

  // Handle interaction modes.
  if (is_null($displayed)) {
    $displayed = RATE_AVERAGE;
    if ($just_voted) {
      if ($widget->displayed_just_voted == RATE_USER) {
        $displayed = RATE_USER;
      }
    }
    else {
      if (isset($results['user_vote']) && $widget->displayed == RATE_USER_OR_AVERAGE) {
        $displayed = RATE_USER;
      }
      if ($widget->displayed == RATE_USER) {
        $displayed = RATE_USER;
      }
    }
  }
  elseif ($displayed == RATE_USER_OR_AVERAGE && isset($results['user_vote'])) {
    $displayed = RATE_USER;
  }
  elseif ($displayed == RATE_USER) {
    $displayed = RATE_USER;
  }
  else {
    $displayed = RATE_AVERAGE;
  }
  if ($displayed == RATE_USER) {
    $results['rating'] = isset($results['user_vote']) ? $results['user_vote'] : 0;
    if (!isset($results['user_vote'])) {
      // We should display an empty rating in this case.
      $results['empty'] = TRUE;
    }
  }

  // Add generic javascript.
  //drupal_add_js(drupal_get_path('module', 'rate') . '/rate.js');
  
  $links = array();
  foreach ($widget->options as $option) {
    // This name must be unique for all submit buttons across the page.
    $id = "opt-$widget_id-$content_type-$content_id-{$option[0]}";
    $token = rate_get_token($id);
    if (isset($_GET['rate']) && $_GET['rate'] == $token) {
      rate_save_vote($widget, $content_type, $content_id, $option[0]);
      drupal_goto($_GET['q'], array('query' => _rate_get_query()));
    }
        $destination = isset($_GET['destination']) ? $_GET['destination'] : $_GET['q'];
        $destination = preg_replace('/http:\\/\\/[^\\/]+\\//', '', $destination);
        $query = array('destination' => $destination);
        
    isset($widget->translate) or $widget->translate = TRUE;
    $link_text = $widget->translate ? t($option[1]) : $option[1];
    $link_href = url($url_reg, array('query' => $query));
    
    if (isset($results['options']) && isset($results['options'][$option[0]])) {
      $link_votes = $results['options'][$option[0]];
    }
    else {
      $link_votes = NULL;
    }
    $disabled = FALSE;
    if ($widget->mode == RATE_DISABLED || $widget->mode == RATE_COMPACT_DISABLED || $widget->mode == RATE_CLOSED) {
      $disabled = TRUE;
    }
    $links[] = array(
      'text' => $link_text,
      'href' => $disabled ? NULL : $link_href,
      'value' => $option[0],
      'votes' => $link_votes,
    );
  }

  if (isset($widget->css)) {
    drupal_add_css($widget->css);
  }

  if (isset($widget->js)) {
    drupal_add_js($widget->js);
  }

  if ($widget->mode == RATE_CLOSED && ($mode == RATE_COMPACT || $mode == RATE_DISABLED || $mode == RATE_COMPACT_DISABLED)) {
    // The widget was closed by hook_rate_widget, but we want to display a compact or disabled
    // widget. Set the mode back to compact / disabled in order to display a compact / disabled
    // widget with disabled voting buttons.
    $widget->mode = $mode == RATE_DISABLED ? RATE_DISABLED : RATE_COMPACT_DISABLED;
  }

  $display_options = array(
    'description' => '',
  );
  if (($widget->mode != RATE_COMPACT && $widget->mode != RATE_COMPACT_DISABLED) || $widget->description_in_compact) {
    $display_options['description'] = check_plain($widget->description);
  }

  $widget_html = theme($theme, array('links' => $links, 'results' => $results, 'mode' => $widget->mode, 'just_voted' => $just_voted, 'content_type' => $content_type, 'content_id' => $content_id, 'display_options' => $display_options));

  if ($include_div) {
    $classes = array('rate-widget-' . $widget_id, 'rate-widget', 'clear-block');
    $classes[] = $displayed == RATE_AVERAGE ? 'rate-average' : 'rate-user';
    if (!empty($widget->template)) {
      $classes[] = 'rate-widget-' . $widget->template;
    }
    // This token is required for the AHAH callback when using arbitrary values.
    $id = "rate-$widget_id-$content_type-$content_id";
    $token = _rate_get_token($id);
    $classes[] = 'rate-' . $token;
    return
      '<div class="' . implode(' ', $classes) . '" id="' . $div_id . '">' .
      $widget_html .
      '</div>';
  }
  else {
    // We do not want the div for AJAX callbacks, we would have 2 div's otherwise.
    return $widget_html;
  }
}


function pinboard_helper_pin_it_get_info() {
  //watchdog('pinboard', '<pre>%out</pre>', array('%out' => check_plain(print_r($_GET, 1)) ));
  drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
  $string1 = $imgfile = $height = $width = '';
  //module_invoke_all('pinboard_helper_pin_it_get_info');
  if ($_GET['src'] == 'youtube') {
    $imgfile = 'http://img.youtube.com/vi/'.$_GET['id'].'/0.jpg';
    $page = 'http://www.youtube.com/watch/?v='.$_GET['id'];
    $width = 480;
    $height = 360;
    $result = pinboard_helper_get_curl($page);
    if ($result) {
      $result1 = str_replace(array("\n","\r"),'',$result);
      preg_match('/\<div id\="watch-description-text"\>(.+)\<\/div\>/isU', $result1, $string);
      if (isset($string[0]) and $string[0]) $string1 = truncate_utf8(trim(strip_tags($string[0])), 200, true, true);
      preg_match('/\<meta property\="og\:image" content\="(.+)"\>/isU', $result1, $string);
      if (isset($string[0]) and $string[0]) $imgfile = str_replace(array('<meta property="og:image" content="','">'), '', $string[0]);
      preg_match('/\<meta property\="og\:video\:width" content\="(.+)"\>/isU', $result1, $string);
      if (isset($string[0]) and $string[0]) $height = str_replace(array('<meta property="og:video:width" content="','">'), '', $string[0]);
      preg_match('/\<meta property\="og\:video\:height" content\="(.+)"\>/isU', $result1, $string);
      if (isset($string[0]) and $string[0]) $width = str_replace(array('<meta property="og:video:height" content="','">'), '', $string[0]);
      //watchdog('pinboard', '%out', array('%out' => $string1));
    }
    //if (file_exists($imgfile)) 
    //list($width, $height, $type, $attr)= getimagesize($imgfile); 
    print $_GET['callback'].'({"status": "success", "reply": {"media": "video", "description": "'.$string1.'", "img": {"src": "'.$imgfile.'", "width": '.$width.', "height": '.$height.'}, "page": "'.$page.'"}, "callback": "'.$_GET['callback'].'", "id": "'.$_GET['id'].'", "src": "'.$_GET['src'].'"})';
  }
  elseif ($_GET['src'] == 'vimeo') {
    $imgfile = '';
    $page = 'http://vimeo.com/'.$_GET['id'];
    $width = 480;
    $height = 360;
    $string1 = '';
    $result = pinboard_helper_get_curl($page);
    if ($result) {
      $result1 = str_replace(array("\n","\r"),'',$result);
      preg_match('/\<div class\="description_wrapper"\>(.+)\<\/div\>/isU', $result1, $string);
      if (isset($string[0]) and $string[0]) $string1 = truncate_utf8(trim(strip_tags($string[0])), 200, true, true);
      preg_match('/\<meta itemprop\="thumbnailUrl" content\="(.+)"\>/isU', $result1, $string);
      if (isset($string[0]) and $string[0]) $imgfile = str_replace(array('<meta itemprop="thumbnailUrl" content="','">'), '', $string[0]);
      preg_match('/\<meta itemprop\="width" content\="(.+)"\>/isU', $result1, $string);
      if (isset($string[0]) and $string[0]) $width = str_replace(array('<meta itemprop="width" content="','">'), '', $string[0]);
      preg_match('/\<meta itemprop\="height" content\="(.+)"\>/isU', $result1, $string);
      if (isset($string[0]) and $string[0]) $height = str_replace(array('<meta itemprop="height" content="','">'), '', $string[0]);
      //watchdog('pinboard', '%out', array('%out' => $imgfile));
    }
    print $_GET['callback'].'({"status": "success", "reply": {"duration": 0, "media": "video", "page": "'.$page.'", "img": {"src": "'.$imgfile.'", "width": '.$width.', "height": '.$height.'}, "description": "'.$string1.'"}, "callback": "'.$_GET['callback'].'", "id": "'.$_GET['id'].'", "src": "'.$_GET['src'].'"})';
  }
  /*
  elseif ($_GET['src'] == 'flickr') {
    $imgfile = '';
    $page = 'http://vimeo.com/'.$_GET['id'];
    $width = 480;
    $height = 360;
    $string1 = '';
    $result = pinboard_helper_get_curl($page);
    if ($result) {
      $result1 = str_replace(array("\n","\r"),'',$result);
      preg_match('/\<div class\="description_wrapper"\>(.+)\<\/div\>/isU', $result1, $string);
      if ($string[0]) $string1 = truncate_utf8(trim(strip_tags($string[0])), 500, true, true);
      preg_match('/\<meta itemprop\="thumbnailUrl" content\="(.+)"\>/isU', $result1, $string);
      if ($string[0]) $imgfile = str_replace(array('<meta itemprop="thumbnailUrl" content="','">'), '', $string[0]);
      preg_match('/\<meta itemprop\="width" content\="(.+)"\>/isU', $result1, $string);
      if ($string[0]) $width = str_replace(array('<meta itemprop="width" content="','">'), '', $string[0]);
      preg_match('/\<meta itemprop\="height" content\="(.+)"\>/isU', $result1, $string);
      if ($string[0]) $height = str_replace(array('<meta itemprop="height" content="','">'), '', $string[0]);
      //watchdog('pinboard', '%out', array('%out' => $imgfile));
    }
    //ok
    print $_GET['callback'].'({"status": "success", "reply": {""media": "image", "page": "'.$page.'", "img": {"src": "'.$imgfile.'", "width": '.$width.', "height": '.$height.', "nopin": 0}, "description": "'.$string1.'"}, "callback": "'.$_GET['callback'].'", "id": "'.$_GET['id'].'", "src": "'.$_GET['src'].'"})';
  }
  */
  else {
    print $_GET['callback'].'({"status": "failure", "src": "'.$_GET['src'].'", "id": "'.$_GET['id'].'", "err": "'.t('endpoint returned an error').'", "callback": "'.$_GET['callback'].'"})';
  }
  exit;
}

function pinboard_helper_pin_it_get_filter() {
  drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
  print '{"status": "success", "disallowed_domains": []}';
  exit;
}

function pinboard_helper_get_curl($url) {
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_setopt($ch, CURLOPT_FAILONERROR, 1);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
  //curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");
  curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:16.0) Gecko/20120815 Firefox/16.0");
  
  curl_setopt($ch, CURLOPT_URL, $url);
  $result = curl_exec($ch);
  //drupal_set_message('<pre>Code:'. check_plain(print_r(curl_getinfo($ch, CURLINFO_HTTP_CODE), 1)) .'</pre>');
  curl_close($ch);
  if ($result) {
    return $result;
  } else return FALSE;
}

function pinboard_helper_user_insert(&$edit, $account, $category) {
  //watchdog('pinboard', '<pre>%out</pre>', array('%out' => check_plain(print_r($account, 1)) ));
  
  $boards = drupal_explode_tags(str_replace("\n", ',', variable_get('predefined_board', '')));
  if (isset($boards) and is_array($boards)) {
    $data = serialize(array('category' => '', 'description' => ''));
    foreach ($boards as $key => $value) {
      $query = db_insert('pinboard_boards')->fields(array('uid', 'name', 'data'));
      $query->values(array('uid' => $account->uid, 'name' => t($value), 'data' => $data));
      $query->execute();
      $bid = db_select('pinboard_boards')->fields('pinboard_boards', array('bid'))->condition('name', t($value), '=')->condition('uid', $account->uid, '=')->execute()->fetchCol();

      $bp = new stdClass;
      $bp->bid = $bid[0];
      $bp->uid = $account->uid;
      $bp->name = $value;
      $bp->username = $account->name;
      pinboard_helper_pathauto_update_alias($bp, 'insert');
    
      drupal_set_message(pinboard_helper_const('PINBOARD_REPLACE_TITLE_CREATE_BOARD_NAME', array('!board' =>t($value), '!link' => url(PINBOARD_REPLACE_PATH_BOARD.'/edit/'.$bid[0]))));
    }
  }
}

function pinboard_helper_user_delete($account) {

  db_delete('pinboard_boards')->condition('uid', $account->uid, '=')->execute();
  db_delete('pinboard_userboard')->condition('uid', $account->uid, '=')->execute();
  db_delete('pinboard_accessboard')->condition('uid', $account->uid, '=')->execute();
  db_delete('node_access')->condition('gid', $account->uid, '=')->execute();
/*  
    $result = db_select('pinboard_repins', 'r')
    //->fields('r', array('nid')) 
    ->condition('uid', $account->uid, '=');
    $result->addExpression('distinct(r.bid)');
    $result = $result->execute()->fetchCol();
    foreach ($result as $key => $value) {
      $bid = db_select('pinboard_boards')->fields('pinboard_boards', array('name'))->condition('bid', $value, '=')->execute()->fetchCol();
      if (isset($bid) and is_array($bid) and count($bid)) {
        db_update('pinboard_boards')
          ->condition('bid', $value)
          ->fields(array(
    	      'uid' => 1, 
    	      'name' => '['.$account->name.'] '.$bid[0]
  	      ))
          ->execute();
      }
    }
    db_delete('pinboard_boards')->condition('uid', $account->uid, '=')->execute();
*/
}


/**
 * Implements hook_node_grants().
 */
function pinboard_helper_node_grants($account, $op) {
  $grants = array();
  // First grant a grant to the author for own content.
  //$grants['pin_access_author'] = array($account->uid);
  //$grants['node_access_author'] = array($account->uid);
  if ($op == 'view') {
    if ($account->uid == 0) {
      $grants['pin_access'] = array(0);
      $grants['node_access'] = array(0);
    } else {
      $grants['pin_access'] = array(0, $account->uid);
      $grants['node_access'] = array(0, $account->uid);
    }
  }
  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function pinboard_helper_node_access_records($node) {
  $grants = array();

  if (is_object($node) and isset($node->type)) {
    if ($node->type == PINBOARD_REPLACE_PATH_PIN) {
      /*
      $grants[] = array(
        'realm' => 'pin_access_author',
        'gid' => $node->uid,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 0,
      );
      */
      $result = db_query('SELECT bid FROM {pinboard_repins} WHERE nid IN(:nids)', array(':nids' => array($node->nid => $node->nid)));
      foreach ($result as $record) {
        $bid = $record->bid;
      }
      if (isset($bid)) {
        $no = TRUE;
        $result = db_select('pinboard_accessboard')->fields('pinboard_accessboard', array('uid'))->condition('bid', $bid, '=')->execute();
        foreach ($result as $k => $us) {
          $no = FALSE;
          //if ($us->uid != $node->uid) {
            $grants[] = array(
              'realm' => 'pin_access',
              'gid' => $us->uid,
              'grant_view' => 1,
              'grant_update' => 0,
              'grant_delete' => 0,
              'priority' => 0,
            );
          //}
        }
        if ($no) {
          $grants[] = array(
            'realm' => 'pin_access',
            'gid' => 0,
            'grant_view' => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority' => 0,
          );
        }
    
      } else {
        $grants[] = array(
          'realm' => 'pin_access',
          'gid' => 0,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        );
      }
    } else {
      /*
      $grants[] = array(
        'realm' => 'node_access_author',
        'gid' => $node->uid,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 0,
      );
      */
      $grants[] = array(
        'realm' => 'node_access',
        'gid' => 0,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
      
    }
  }

  return $grants;
}


function pinboard_helper_addapin($form, &$form_state, $edit = array()) {
  if (!user_access('create '.PINBOARD_REPLACE_PATH_PIN.' content')) drupal_goto('user');
  $out = '';
  $arg = base64_decode(arg(1));
  //drupal_set_message('<pre>Code:'. check_plain(print_r($form_state, 1)) .'</pre>');
  if (!isset($form_state['input']['urlimg']) and $arg) {
    drupal_add_js('
      jQuery( function($) {
        $(window).load(function() {
          $("div.blkfn").imgCenter();
        });
      });
    ', array('type' => 'inline',  'scope' => 'header', 'weight' => 10));
    if ($arg) {
      if (strpos($arg, 'http://') === FALSE and strpos($arg, 'https://') === FALSE) {
        $arg = 'http://'.$arg;
      }
    }

    if (valid_url($arg, TRUE)) {
      //drupal_set_message('<pre>1:'. check_plain(print_r($form_state, 1)) .'</pre>');
      $data = @pinboard_helper_file_get_html($arg);
      //drupal_set_message('<pre>data:'. check_plain(print_r($data, 1)) .'</pre>');
      if ($data) { 
        $is_safe_mode = ini_get('safe_mode') == '1' ? 1 : 0;
        if (!$is_safe_mode) set_time_limit(600);
        
        $argres = parse_url($arg);
				$surl = $argres['scheme'].'://'.$argres['host'];
      
        $ta = $data->find('title');      
        if(count($ta)){
          $title = $ta[0]->plaintext; 
        } else {
          $title = ''; 
        }
        //$out .= '<pre>'. check_plain(print_r($title , 1)) .'</pre>'.'<div class="clr">&nbsp;</div>';
        
        if (strpos($arg, 'youtube.com')) {
          preg_match('%/watch\?v=([A-Za-z0-9\-_]{1,})%s', $arg, $result);
          if (isset($result[1])) {
            if (!isset($respage[$result[1]])) {
              $time = $title1 = '';
              $respage[$result[1]] = $result[1];
              $imgfile = 'http://i1.ytimg.com/vi/'.$result[1].'/default.jpg';
              $page = 'http://www.youtube.com/watch/?v='.$result[1];
              $title1 = $data->find('meta[property=og:title]', 0)->content;
              $description = $data->find('meta[property=og:description]', 0)->content;
              $imgfile = $data->find('meta[property=og:image]', 0)->content;
              //$time = $data->find('meta[itemprop=duration]', 0)->content;
              $out .= '<div class="blkfn"><a href="'.url('node/add/'.PINBOARD_REPLACE_PATH_PIN, array('absolute' => TRUE, 'query' => array('media' => str_replace('http', '~qwerty~', $imgfile), 'url' => str_replace('http', '~qwerty~', $page), 'title' => $title1, 'is_video' => 'true', 'description' => $description) )).'">';
              $out .= '<img src="'.$imgfile.'" />';
              $out .= '<div class="video"></div>';
              //if ($time) $out .= '<div><b>'.$time.'</b></div>';
              $out .= '</a></div>';
            }
          }
        }
        
        if (strpos($arg, 'vimeo.com')) {
          preg_match('%/([0-9]{1,})%s', $arg, $result);
          //drupal_set_message('<pre>data:'. check_plain(print_r($result, 1)) .'</pre>');
          if (isset($result[1])) {
            if (!isset($respage[$result[1]])) {
              $time = $title1 = '';
              $respage[$result[1]] = $result[1];
              $page = 'http://vimeo.com/'.$result[1];
              $title1 = $data->find('meta[property=og:title]', 0)->content;
              $description = $data->find('meta[property=og:description]', 0)->content;
              $imgfile = $data->find('meta[property=og:image]', 0)->content;
              //$time = $data->find('meta[itemprop=duration]', 0)->content;
              $out .= '<div class="blkfn"><a href="'.url('node/add/'.PINBOARD_REPLACE_PATH_PIN, array('absolute' => TRUE, 'query' => array('media' => str_replace('http', '~qwerty~', $imgfile), 'url' => str_replace('http', '~qwerty~', $page), 'title' => $title1, 'is_video' => 'true', 'description' => $description) )).'">';
              $out .= '<img src="'.$imgfile.'" />';
              $out .= '<div class="video"></div>';
              //if ($time) $out .= '<div><b>'.$time.'</b></div>';
              $out .= '</a></div>';
            }
          }
        }
        if(count($data->find('a'))){
          foreach($data->find('a') as $img){
            if (strpos($img->href, '.jpg') or 
                strpos($img->href, '.jpeg') or 
                strpos($img->href, '.gif') or 
                strpos($img->href, '.png')
            ) {
              //$im = @getimagesize($img->href);
              //if($im and $im[0] > 60 and $im[1] > 60) {
              if (strpos($img->href, $surl) !== FALSE) {
                $img_src = $img->href;
              } else {
                $img_src = $surl.'/'.$img->href;
              }
              $im[0] = $im[1] = 220;
              $out .= '<div class="blkfn"><a href="'.url('node/add/'.PINBOARD_REPLACE_PATH_PIN, array('absolute' => TRUE, 'query' => array('media' => str_replace('http', '~qwerty~', ($img_src)), 'url' => str_replace('http', '~qwerty~', ($arg)), 'title' => $title, 'is_video' => 'false', 'description' => '') )).'">';
              //$out .= '<img src="'.$img->href.'"'.($im[0] > $im[1] ? ($im[0] > 220 ? ' width="220"' : '') : ($im[1] > 220 ? ' height="220"' : '')).' hspace="'.($im[0] > 220 ? ($im[0] < $im[1] ? floor((220 - (220 / ($im[1] / $im[0]))) / 2) : '0') : floor((220 - $im[0]) / 2)).'" vspace="'.($im[1] > 220 ? ($im[0] > $im[1] ? floor((220 - (220 / ($im[0] / $im[1]))) / 2) : '0') : floor((220 - $im[1]) / 2)).'" />';
              $out .= '<img src="'.$img_src.'" />';
              //$out .= '<span><b>'.$im[0].' x '.$im[1].'</b></span>';
              $out .= '<span><b>'.t('Loading...').'</b></span>';
              $out .= '</a></div>';
              //}
            }
            if (strpos($arg, 'vimeo.com')) {
              //drupal_set_message('<pre>data:'. check_plain(print_r($img->href, 1)) .'</pre>');
              preg_match('%/([0-9]{1,})%s', $img->href, $result);
              //drupal_set_message('<pre>data:'. check_plain(print_r($result, 1)) .'</pre>');
              if (isset($result[1]) and strlen($result[1]) > 5) {
                if (!isset($respage[$result[1]])) {
                  $time = $title = $imgfile = '';
                  $respage[$result[1]] = $result[1];
                  $page = 'http://vimeo.com/'.$result[1];
                  
                  foreach($data->find('li') as $li){
                    if ($li->id == 'clip'.$result[1]) {
                      $imgfile = $li->find('div.ac', 0)->datathumb;
                      $title = $li->find('a.cj', 0)->plaintext;
                      //drupal_set_message('<pre>data:'. check_plain(print_r($title, 1)) .'</pre>');
                    }      
                  }
                  
                  if (!$imgfile) {
                    $title = $img->title;
                    $imgfile = @$img->find('img', 0)->src;
                  }
                  
                  if ($imgfile) {
                    $out .= '<div class="blkfn"><a href="'.url('node/add/'.PINBOARD_REPLACE_PATH_PIN, array('absolute' => TRUE, 'query' => array('media' => str_replace('http', '~qwerty~', $imgfile), 'url' => str_replace('http', '~qwerty~', $page), 'title' => $title, 'is_video' => 'true', 'description' => '') )).'">';
              
                    $out .= '<img src="'.$imgfile.'" />';
                    $out .= '<div class="video"></div>';
                    $out .= '</a></div>';
                  }
                }
              }
            }
            
            
            if (strpos($arg, 'youtube.com')) {
              //drupal_set_message('<pre>data:'. check_plain(print_r($img->href, 1)) .'</pre>');
              preg_match('%/watch\?v=([A-Za-z0-9\-_]{1,})%s', $img->href, $result);
              //drupal_set_message('<pre>data:'. check_plain(print_r($result, 1)) .'</pre>');
              if (isset($result[1])) {
                if (!isset($respage[$result[1]])) {
                  $time = $title = '';
                  $respage[$result[1]] = $result[1];
                  /*
                  foreach($data->find('div') as $div){
                    //drupal_set_message('<pre>data:'. check_plain(print_r($div->datacontextitemid, 1)) .'</pre>');
                    if ($div->datacontextitemid == $result[1]) {
                      $title = $div->datacontextitemtitle;
                      $time = $div->datacontextitemtime;
                    }              
                  }
                  */
                  //$imgfile = 'http://img.youtube.com/vi/'.$result[1].'/1.jpg';
                  $imgfile = 'http://i1.ytimg.com/vi/'.$result[1].'/default.jpg';
                  $page = 'http://www.youtube.com/watch/?v='.$result[1];
                  foreach($data->find('img') as $img){
                    //drupal_set_message('<pre>data:'. check_plain(print_r($div->datacontextitemid, 1)) .'</pre>');
                    if (strpos($img->src, $result[1])) {
                      $imgfile = 'http:'.$img->src;
                    }
                    if (strpos($img->datathumb, $result[1])) {
                      $imgfile = 'http:'.$img->datathumb;
                    }              
                  }
                  $title = '';
                  $time = '';
                  foreach($data->find('div') as $div){
                    //drupal_set_message('<pre>data:'. check_plain(print_r($div->datacontextitemid, 1)) .'</pre>');
                    if ($div->datacontextitemid == $result[1]) {
                    //drupal_set_message('<pre>data:'. check_plain(print_r($div->datacontextitemid, 1)) .'</pre>');
                      $title = $div->datacontextitemtitle;
                      $time = $div->datacontextitemtime;
                    }              
                  }
                  foreach($data->find('div.context-data-item') as $div){
                    //drupal_set_message('<pre>data:'. check_plain(print_r($div->datacontextitemid, 1)) .'</pre>');
                    if ($div->datacontextitemid == $result[1]) {
                    //drupal_set_message('<pre>data:'. check_plain(print_r($div->datacontextitemid, 1)) .'</pre>');
                      $title = $div->datacontextitemtitle;
                      $time = $div->datacontextitemtime;
                    }              
                  }
                  foreach($data->find('div.video') as $li){
                    if (strpos($li->find('img', 0)->src, $result[1])) {
                      if ($li->find('div.title', 0)) $title = $li->find('div.title', 0)->plaintext;
                      if ($li->find('div.video-time', 0)) $time = $li->find('div.video-time', 0)->plaintext;
                    }          
                  }
                  foreach($data->find('li.channels-content-item') as $li){
                    if (strpos($li->find('img', 0)->src, $result[1])) {
                      if ($li->find('div.content-item-detail', 0) and $li->find('div.content-item-detail', 0)->find('a', 0)) $title = trim($li->find('div.content-item-detail', 0)->find('a', 0)->plaintext);
                      if ($li->find('div.video-time', 0)) $time = $li->find('div.video-time', 0)->plaintext;
                    }            
                  }
                  foreach($data->find('li.video-list-item') as $li){
                    if (strpos($li->find('img', 0)->datathumb, $result[1])) {
                      if ($li->find('div.title', 0)) $title = $li->find('div.title', 0)->plaintext;
                      if ($li->find('div.video-time', 0)) $time = $li->find('div.video-time', 0)->plaintext;
                    }          
                  }
                  $out .= '<div class="blkfn"><a href="'.url('node/add/'.PINBOARD_REPLACE_PATH_PIN, array('absolute' => TRUE, 'query' => array('media' => str_replace('http', '~qwerty~', $imgfile), 'url' => str_replace('http', '~qwerty~', $page), 'title' => $title, 'is_video' => 'true', 'description' => '') )).'">';
              
                  $out .= '<img src="'.$imgfile.'" />';
                  $out .= '<div class="video"></div>';
                  if ($time) $out .= '<div><b>'.$time.'</b></div>';
                  $out .= '</a></div>';
                }
              }
            }
            if (!$is_safe_mode) set_time_limit(600);
          }
        }
        if(count($data->find('img'))){
          foreach($data->find('img') as $img){
            //$im = @getimagesize($img->src);
            //if($im and $im[0] > 60 and $im[1] > 60) {
            $im[0] = $im[1] = 220;
            /*
            if (strpos($arg, 'youtube.com')) {
              $imgsrc = $img->datathumb;
              //drupal_set_message('<pre>data:'. check_plain(print_r($imgsrc, 1)) .'</pre>');
              preg_match('/ytimg\.com\/vi\/(.+)\/mqdefault.jpg/isU', $imgsrc, $result);
              if (isset($result[1])) {
                $vid = $result[1];
              } else {
                preg_match('/ytimg\.com\/vi\/(.+)\/default.jpg/isU', $imgsrc, $result);
                if (isset($result[1])) {
                  $vid = $result[1];
                } else {
                  preg_match('/ytimg\.com\/vi\/(.+)\/hqdefault.jpg/isU', $imgsrc, $result);
                  if (isset($result[1])) {
                    $vid = $result[1];
                  }
                }
              }
            }
            */
            if (isset($vid)) {
              $title1 = '';
              foreach($data->find('div') as $div){
                if ($div->datacontextitemid == $vid) {
                  $title1 = $div->datacontextitemtitle;
                  $time = $div->datacontextitemtime;
                }              
              }
              $imgsrc = 'http:'.$imgsrc;
              $out .= '<div class="blkfn"><a href="'.url('node/add/'.PINBOARD_REPLACE_PATH_PIN, array('absolute' => TRUE, 'query' => array('media' => str_replace('http', '~qwerty~', ($imgsrc)), 'url' => str_replace('http', '~qwerty~', 'http://www.youtube.com/watch?v='.$vid), 'title' => $title1, 'is_video' => 'true', 'description' => '') )).'">';
              
              $out .= '<img src="'.$imgsrc.'" alt="'.$title1.'" title="'.$title1.'" />';
              //$out .= '<span><b>'.$im[0].' x '.$im[1].'</b></span>';
              $out .= '<div><b>'.$time.'</b></div>';
              $out .= '</a></div>';
            } else {
              if (strpos($img->src, $surl) !== FALSE) {
                $img_src = $img->src;
              } else {
                $img_src = $surl.'/'.$img->src;
              }
              $out .= '<div class="blkfn"><a href="'.url('node/add/'.PINBOARD_REPLACE_PATH_PIN, array('absolute' => TRUE, 'query' => array('media' => str_replace('http', '~qwerty~', ($img_src)), 'url' => str_replace('http', '~qwerty~', ($arg)), 'title' => $title, 'is_video' => 'false', 'description' => '') )).'">';
              //$out .= '<img src="'.$img->src.'"'.($im[0] > $im[1] ? ($im[0] > 220 ? ' width="220"' : '') : ($im[1] > 220 ? ' height="220"' : '')).' hspace="'.($im[0] > 220 ? ($im[0] < $im[1] ? floor((220 - (220 / ($im[1] / $im[0]))) / 2) : '0') : floor((220 - $im[0]) / 2)).'" vspace="'.($im[1] > 220 ? ($im[0] > $im[1] ? floor((220 - (220 / ($im[0] / $im[1]))) / 2) : '0') : floor((220 - $im[1]) / 2)).'" />';
              $out .= '<img src="'.$img_src.'" />';
              //$out .= '<span><b>'.$im[0].' x '.$im[1].'</b></span>';
              $out .= '<span><b>'.t('Loading...').'</b></span>';
              $out .= '</a></div>';
            }
            //$out .= '<img src="'.$img->href.'"/>';  vspace="'.floor((220 - (220 / ($im[0] / $im[1]))) / 2).'"
            //$out .= $img->href.'<br />';
            //$out .= '<pre>'. check_plain(print_r($im , 1)) .'</pre>'.'<div class="clr">&nbsp;</div>';
            //$out .= '<pre>'. check_plain(print_r($img , 1)) .'</pre>'.'<div class="clr">&nbsp;</div>';
            //if($i>1)break;
            //$i++;
            //}
            if (!$is_safe_mode) set_time_limit(600);
          }
        }
        //drupal_set_message('<pre>data:'. check_plain(print_r($img, 1)) .'</pre>');
        $data->clear();
        unset($data);
      } else {
        if (empty($form_state['input']['urlimg']['#default_value'])) drupal_set_message(t('Wrong URL or the page does not exist'), 'error');
      }
    }
  }
  //drupal_set_message('<pre>'. check_plain(print_r($form_state['input'], 1)) .'</pre>');
  
  $form['urlimg'] = array(
    '#type' => 'textfield',
    '#title' => pinboard_helper_const('PINBOARD_REPLACE_TITLE_ADDAPIN_URL'),
    '#default_value' => $arg,
    '#required' => TRUE,
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Find Images'));
  $form['field_terms_t'] = array(
    '#markup' => '<div class="clr">&nbsp;</div>'.$out.'<div class="clr">&nbsp;</div>',
    '#weight' => 9000,
  );
  return $form;
  
}

function pinboard_helper_addapin_submit($form, &$form_state) {
  global $user;
  $form_state['redirect'] = PINBOARD_REPLACE_PATH_ADDAPIN.'/'.base64_encode($form_state['input']['urlimg']);
}

function pinboard_helper_file_get_html($url) {
    $dom = new simple_html_dom(null, true, true, DEFAULT_TARGET_CHARSET, true, DEFAULT_BR_TEXT, DEFAULT_SPAN_TEXT);
    $contents = pinboard_helper_get_curl($url);
    //drupal_set_message('<pre>data:'. check_plain(print_r($contents, 1)) .'</pre>');
    $contents = str_replace(
      array(
        'span', 
        'data-thumb', 
        'data-context-item-title', 
        'data-context-item-id', 
        'data-context-item-type', 
        'data-context-item-time'
      ), 
      array(
        'div', 
        'datathumb', 
        'datacontextitemtitle', 
        'datacontextitemid', 
        'datacontextitemtype', 
        'datacontextitemtime'
      ), 
      $contents
    );
    
    if (empty($contents) || strlen($contents) > MAX_FILE_SIZE) {
      return false;
    }
    $dom->load($contents, true, true);
    return $dom;
}

/* pathauto --------------------------------------------------------------------------------------*/

/**
 * Implements hook_path_alias_types().
 */
function pinboard_helper_path_alias_types() {
  $objects['board/'] = pinboard_helper_const('pinboard_replace_title_board');
  return $objects;
}

/**
 * Implements hook_pathauto().
 */
function pinboard_helper_pathauto($op) {
  switch ($op) {
    case 'settings':
      $settings = array();
      $settings['module'] = 'pinboard_helper_board';
      $settings['token_type'] = 'board';
      $settings['groupheader'] = t('!board paths', array('!board' => pinboard_helper_const('pinboard_replace_title_board')));
      $settings['patterndescr'] = t('Pattern for !board page paths', array('!board' => pinboard_helper_const('pinboard_replace_title_board')));
      $settings['patterndefault'] = 'board/[board:username]/[board:name]/[board:bid]';
      $settings['batch_update_callback'] = 'pinboard_helper_pathauto_bulk_update_batch_process';
      //$settings['batch_file'] = drupal_get_path('module', 'pathauto') . '/pathauto.pathauto.inc';
      return (object) $settings;
    default:
      break;
  }
}

/**
 * Batch processing callback; Generate aliases for Board.
 */
function pinboard_helper_pathauto_bulk_update_batch_process(&$context) {
  if (!isset($context['sandbox']['current'])) {
    $context['sandbox']['count'] = 0;
    $context['sandbox']['current'] = 0;
  }

  $query = db_select('pinboard_boards', 'p');
  //$query->leftJoin('url_alias', 'ua', "CONCAT('user/', u.uid) = ua.source");
  $query->addField('p', 'bid');
  //$query->isNull('ua.source');
  $query->condition('p.bid', $context['sandbox']['current'], '>');
  $query->orderBy('p.bid');
  $query->addTag('pathauto_bulk_update');
  //$query->addMetaData('entity', 'user');

  // Get the total amount of items to process.
  if (!isset($context['sandbox']['total'])) {
    $context['sandbox']['total'] = $query->countQuery()->execute()->fetchField();

    // If there are no nodes to update, the stop immediately.
    if (!$context['sandbox']['total']) {
      $context['finished'] = 1;
      return;
    }
  }

  $query->range(0, 25);
  $bids = $query->execute()->fetchCol();

  pinboard_helper_pathauto_update_alias_multiple($bids, 'bulkupdate');
  $context['sandbox']['count'] += count($bids);
  $context['sandbox']['current'] = max($bids);
  $context['message'] = t('Updated alias for user board @bid.', array('@bid' => end($bids)));

  if ($context['sandbox']['count'] != $context['sandbox']['total']) {
    $context['finished'] = $context['sandbox']['count'] / $context['sandbox']['total'];
  }
}

function pinboard_helper_pathauto_update_alias(stdClass $board, $op, array $options = array()) {
  if (!module_exists('pathauto')) {
    return;
  }
  if (isset($board->path['pathauto']) && empty($board->path['pathauto'])) {
    return;
  }
  $options += array(
    'language' => LANGUAGE_NONE,
  );
  if (!pathauto_pattern_load_by_entity('pinboard_helper_board', '', $options['language'])) {
    return;
  }
  module_load_include('inc', 'pathauto');
  pathauto_create_alias('pinboard_helper_board', $op, "user/{$board->uid}/".PINBOARD_REPLACE_PATH_BOARD."/{$board->bid}", array('board' => $board), NULL, $options['language']);
}

function pinboard_helper_pathauto_delete($board) {
  if (module_exists('pathauto')) {
    pathauto_entity_path_delete_all('pinboard_helper_board', $board, "user/{$board->uid}/".PINBOARD_REPLACE_PATH_BOARD."/{$board->bid}");
  }
}

function pinboard_helper_pathauto_update_alias_multiple(array $bids, $op, array $options = array()) {
  $options += array('message' => FALSE);
  $bp = new stdClass;
  $us = db_select('pinboard_boards')->fields('pinboard_boards', array('bid', 'uid', 'name'))->condition('bid', $bids)->execute();
  foreach ($us as $uss) {
    $acc = user_load($uss->uid);
    $bp->bid = $uss->bid;
    $bp->uid = $uss->uid;
    $bp->name = $uss->name;
    $bp->username = $acc->name;
    pinboard_helper_pathauto_update_alias($bp, $op, $options);
  }
  
  if (!empty($options['message'])) {
    drupal_set_message(format_plural(count($bids), 'Updated URL alias for 1 user board.', 'Updated URL aliases for @count user boards.'));
  }
}

function pinboard_helper_pathauto_alias_alter(&$alias, array &$context) {
  //drupal_set_message('<pre>alias: '. check_plain(print_r($alias, 1)) .'</pre>');
  if ($context['module'] == 'user') {
    pathauto_alias_uniquify($alias, $context['source'], $context['language']);
    pinboard_helper_userpath_save('notifications', $alias, $context);
    pinboard_helper_userpath_save('board', $alias, $context);
    pinboard_helper_userpath_save('followers', $alias, $context);
    pinboard_helper_userpath_save('following', $alias, $context);
    pinboard_helper_userpath_save('edit', $alias, $context);
    pinboard_helper_userpath_save('invites', $alias, $context);
    pinboard_helper_userpath_save('loginza', $alias, $context);
    pinboard_helper_userpath_save('shortcuts', $alias, $context);
    pinboard_helper_userpath_save('contact', $alias, $context);
    pinboard_helper_userpath_save('feed.rss', $alias, $context);
  }
  if ($context['module'] == 'node' and $context['data']['node']->type == PINBOARD_REPLACE_PATH_PIN and theme_get_setting('tm_value_repinlink') and isset($context['data']['node']->ph_did) and $context['data']['node']->ph_did != $context['data']['node']->nid) {
    $alias = $alias.'-'.PINBOARD_REPLACE_PATH_REPIN;
    pathauto_alias_uniquify($alias, $context['source'], $context['language']);
    
    $path = array(
      'source' => $context['source'],
      'alias' => $alias,
      'language' => $context['language'],
    );
    //drupal_set_message('<pre>alias2: '. check_plain(print_r($alias, 1)) .'</pre>');
    path_save($path);
    $alias = '';
  }
  
//   drupal_set_message('<pre>alias2: '. check_plain(print_r($alias, 1)) .'</pre>');
   //drupal_set_message('<pre>context: '. check_plain(print_r($context, 1)) .'</pre>');
}

function pinboard_helper_userpath_save($str, $alias, array $context = array()) {
  if ($original = path_load($context['source'].'/'.$str)) {
    $path = array(
      'pid' => $original['pid'],
      'source' => $context['source'].'/'.$str,
      'alias' => $alias.'/'.$str,
      'language' => $context['language'],
    );    
  } else {
    $path = array(
      'source' => $context['source'].'/'.$str,
      'alias' => $alias.'/'.$str,
      'language' => $context['language'],
    );
  }
  path_save($path);
}


/* tokens ----------------------------------------------------------------------------------------*/

/**
 * Implements hook_token_info()
 */
function pinboard_helper_token_info() {
  $info = array();

  $info['types']['board'] = array(
    'name' => pinboard_helper_const('pinboard_replace_title_board'),
    'description' => t('Tokens related to user !board.', array('!board' => pinboard_helper_const('pinboard_replace_title_board'))),
    //'needs-data' => 'node_type',
  );
  $info['tokens']['board']['name'] = array(
    'name' => t('Board Name'),
    'description' => t('Board Name'),
  );
  $info['tokens']['board']['bid'] = array(
    'name' => t('bid'),
    'description' => t('Board id'),
  );  
  $info['tokens']['board']['username'] = array(
    'name' => t('User Name'),
    'description' => t('User Name'),
  );  
  $info['tokens']['board']['uid'] = array(
    'name' => t('uid'),
    'description' => t('User id'),
  );  
  
  return $info;
}

/**
 * Implements hook_tokens()
 */
function pinboard_helper_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);
  $language_code = isset($options['language']) ? $options['language']->language : NULL;

  if ($type == 'board' && !empty($data['board'])) {
  
    //drupal_set_message('<pre>'. check_plain(print_r($data, 1)) .'</pre>');

    $replacements['[board:name]'] = $sanitize ? check_plain($data['board']->name) : $data['board']->name;
    $replacements['[board:bid]'] = $data['board']->bid;
    $replacements['[board:uid]'] = $data['board']->uid;
    $replacements['[board:username]'] = $sanitize ? check_plain($data['board']->username) : $data['board']->username;

  }

  return $replacements;
}


/**
 * Implements hook_block_info().
 */
function pinboard_helper_block_info() {
  $blocks = array();
  $blocks[0]['info'] = t('Pins from the same board');
  $blocks[0]['cache'] = DRUPAL_NO_CACHE;
  $blocks[1]['info'] = t('Pins from the same source');
  $blocks[1]['cache'] = DRUPAL_NO_CACHE;
  /*
  $blocks[2]['info'] = t('People who pinned this also pinned');
  $blocks[2]['cache'] = DRUPAL_NO_CACHE;
  */
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Generates the administrator-defined blocks for display.
 */
function pinboard_helper_block_view($delta = '') {
  global $base_url, $user;
  $data = array();
  if ($delta == 0) {
    $destination = drupal_get_destination();
    if (arg(0) == 'node' and is_numeric(arg(1))) {
    
      $result = db_query('SELECT nid, did, bid FROM {pinboard_repins} WHERE nid = :nid', array(':nid' => arg(1)));
      foreach ($result as $record) {
        $bs = $record->bid;
      }
      $bsu = '';
      if (isset($bs)) {
        $result = db_query('SELECT bid, name FROM {pinboard_boards} WHERE bid = :bid', array(':bid' => $bs));
        foreach ($result as $record) {
          $bsu = $record->name;
        }
      }
      $result = db_query('SELECT nid, uid, type FROM {node} WHERE nid = :nid', array(':nid' => arg(1)));
      $uss = new stdClass;
      foreach ($result as $record) {
        $us = $record->uid;
        $uss->uid = $record->uid;
        $type = $record->type;
      }
      
      if (isset($type) and $type == PINBOARD_REPLACE_PATH_PIN and isset($bs) and isset($us)) {
        $out1 = '';
        $qw2 = db_select('pinboard_repins', 'r');
        $qw2->leftJoin('node', 'node', 'node.nid = r.nid');
        $qw2->addTag('node_access');
        $qw2->fields('r', array('nid'))->condition('r.bid', $bs, '=')->orderBy('r.nid', 'DESC')->range(0, 9);
        $result2 = $qw2->execute()->fetchCol();
        if (count($result2)) {
          $out1 .= '<div class="board_box"><a class="boards" href="'.url('user/'.$us.'/'.PINBOARD_REPLACE_PATH_BOARD.'/'.$bs).'"><h6>'.$bsu.'<div class="e"></div></h6>';
          $out1 .= '<div class="co">'.pinboard_helper_board_pin_count($bs).' '.pinboard_helper_const('PINBOARD_REPLACE_TITLE_PINS').'</div>';  
          $nodes = node_load_multiple($result2);
          $nodes = node_view_multiple($nodes);
          //print '<div class="user_profile_main"><pre>'. check_plain(print_r($nodes['nodes'], 1)) .'</pre></div>'; 
          foreach ($nodes['nodes'] as $k2 => $v2) {
            //print '<div class="user_profile_main"><pre>'. check_plain(print_r($v2['field_image'], 1)) .'</pre></div>';  
            if (isset($v2['field_image']) and is_array($v2['field_image'])) { 
          	  if (isset($v2['field_image'][0]['#image_style'])) $v2['field_image'][0]['#image_style'] = 'pin_tmb_2';
              if (isset($v2['field_image'][0]['#path'])) $v2['field_image'][0]['#path'] = '';
              $out1 .= render($v2['field_image']);
            } elseif (isset($v2['field_embed']) and is_array($v2['field_embed'])) {
              if (isset($v2['field_embed'][0][0]['#style_name'])) $v2['field_embed'][0][0]['#style_name'] = 'pin_tmb_2';
              if (isset($v2['field_embed'][0]['#prefix'])) $v2['field_embed'][0]['#prefix'] = '';
              if (isset($v2['field_embed'][0]['#suffix'])) $v2['field_embed'][0]['#suffix'] = '';
              $out1 .= str_replace(array('<a ', '</a>'), array('<span ', '</span>'), render($v2['field_embed']));
            }
            //print '<div class="user_profile_main"><pre>'. check_plain(print_r($v2['field_image'], 1)) .'</pre></div>'; 
          }
          $ii = 9 - count($result2);
        } else {
          $out1 .= '<div class="board_box"><a class="boards"><div class="title">'.$bsu.'</div>';
          $ii = 9;
        }
        for ( $i=0; $i<$ii; $i++) {
          $out1 .= '<img src="'.$base_url.'/'.drupal_get_path('theme','pinboard2').'/img/tr.png" />';
        }
        if (count($result2)) {
          $out1 .= '</a></div>';
        } else {
          $out1 .= '</a></div>';
        }
        
        if ($user->uid and $us != $user->uid) { 
          if (pinboard_helper_isfollow ($uss, $bs)) 
            $out1 .= '<div class="board-links"><a href="'.url(PINBOARD_REPLACE_PATH_UNFOLLOW.'/'.$us.'/'.$bs, array('query' => $destination)).'">'.pinboard_helper_const('PINBOARD_REPLACE_TITLE_UNFOLLOW').'</a></div>';
          else
            $out1 .= '<div class="board-links"><a href="'.url(PINBOARD_REPLACE_PATH_FOLLOW.'/'.$us.'/'.$bs, array('query' => $destination)).'">'.pinboard_helper_const('PINBOARD_REPLACE_TITLE_FOLLOW').'</a></div>';
        }
        $data['subject'] = NULL;
        $data['content'] = $out1;
        return $data; 
      }                                                               
    }
  }
  if ($delta == 1) {
    $destination = drupal_get_destination();
    if (arg(0) == 'node' and is_numeric(arg(1))) {
      $nn = node_load(arg(1));
      if (isset($nn->type) and $nn->type == PINBOARD_REPLACE_PATH_PIN and isset($nn->field_url) and isset($nn->field_url[pinboard_helper_get_lng($nn->field_url)][0]['value'])) { 
        $result = parse_url($nn->field_url[pinboard_helper_get_lng($nn->field_url)][0]['value']);
        if (isset($result['host']) and $result['host']) {
				  $url = str_replace('www.', '', $result['host']);

          $out1 = '';
          $qw2 = db_select('field_data_field_url', 'r');
          $qw2->leftJoin('node', 'node', 'node.nid = r.entity_id');
          $qw2->addTag('node_access');
          $qw2->fields('r', array('entity_id'))
            ->condition('r.entity_type', 'node')
            ->condition('r.bundle', 'pin')
            ->condition('r.field_url_value', '%'.$url.'%', 'LIKE')
            ->orderBy('r.entity_id', 'DESC')->range(0, 3);
          $result2 = $qw2->execute()->fetchCol();
          if (count($result2)) {
            $out1 .= '<div class="board_box"><a class="boards" href="'.url('source', array('query' => array('url' => $url) )).'"><h6>'.$url.'<div class="e"></div></h6>';
            $nodes = node_load_multiple($result2);
            $nodes = node_view_multiple($nodes);
            //print '<div class="user_profile_main"><pre>'. check_plain(print_r($nodes['nodes'], 1)) .'</pre></div>'; 
            foreach ($nodes['nodes'] as $k2 => $v2) {
              //print '<div class="user_profile_main"><pre>'. check_plain(print_r($v2['field_image'], 1)) .'</pre></div>';  
              if (isset($v2['field_image']) and is_array($v2['field_image'])) { 
          	    if (isset($v2['field_image'][0]['#image_style'])) $v2['field_image'][0]['#image_style'] = 'pin_tmb_2';
                if (isset($v2['field_image'][0]['#path'])) $v2['field_image'][0]['#path'] = '';
                $out1 .= render($v2['field_image']);
              } elseif (isset($v2['field_embed']) and is_array($v2['field_embed'])) {
                if (isset($v2['field_embed'][0][0]['#style_name'])) $v2['field_embed'][0][0]['#style_name'] = 'pin_tmb_2';
                if (isset($v2['field_embed'][0]['#prefix'])) $v2['field_embed'][0]['#prefix'] = '';
                if (isset($v2['field_embed'][0]['#suffix'])) $v2['field_embed'][0]['#suffix'] = '';
                $out1 .= str_replace(array('<a ', '</a>'), array('<span ', '</span>'), render($v2['field_embed']));
              }
              //print '<div class="user_profile_main"><pre>'. check_plain(print_r($v2['field_image'], 1)) .'</pre></div>'; 
            }
            $ii = 3 - count($result2);
          } else {
            $out1 .= '<div class="board_box"><a class="boards"><div class="title">'.$url.'</div>';
            $ii = 3;
          }
          for ( $i=0; $i<$ii; $i++) {
            $out1 .= '<img src="'.$base_url.'/'.drupal_get_path('theme','pinboard2').'/img/tr.png" />';
          }
          if (count($result2)) {
            $out1 .= '</a></div>';
          } else {
            $out1 .= '</a></div>';
          }
        
          $data['subject'] = NULL;
          $data['content'] = $out1;
          return $data;
      	}
      }  
    }
  }
  /*
  if ($delta == 2) {
    $data['subject'] = NULL;
    $data['content'] = '';
    return $data;
  }
  */
}

function pinboard_helper_currency_info() {
  return array(
    'AED' => array(
      'code' => 'AED',
      'symbol' => 'د.إ',
      'name' => t('United Arab Emirates Dirham'),
      'numeric_code' => '784',
      'code_placement' => 'before',
      'minor_unit' => t('Fils'),
      'major_unit' => t('Dirham'),
    ),
    'AFN' => array(
      'code' => 'AFN',
      'symbol' => 'Af',
      'name' => t('Afghan Afghani'),
      'decimals' => 0,
      'numeric_code' => '971',
      'minor_unit' => t('Pul'),
      'major_unit' => t('Afghani'),
    ),
    'ANG' => array(
      'code' => 'ANG',
      'symbol' => 'NAf.',
      'name' => t('Netherlands Antillean Guilder'),
      'numeric_code' => '532',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Guilder'),
    ),
    'AOA' => array(
      'code' => 'AOA',
      'symbol' => 'Kz',
      'name' => t('Angolan Kwanza'),
      'numeric_code' => '973',
      'minor_unit' => t('Cêntimo'),
      'major_unit' => t('Kwanza'),
    ),
    'ARM' => array(
      'code' => 'ARM',
      'symbol' => 'm$n',
      'name' => t('Argentine Peso Moneda Nacional'),
      'minor_unit' => t('Centavos'),
      'major_unit' => t('Peso'),
    ),
    'ARS' => array(
      'code' => 'ARS',
      'symbol' => 'AR$',
      'name' => t('Argentine Peso'),
      'numeric_code' => '032',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Peso'),
    ),
    'AUD' => array(
      'code' => 'AUD',
      'symbol' => 'AU$',
      'name' => t('Australian Dollar'),
      'numeric_code' => '036',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'AWG' => array(
      'code' => 'AWG',
      'symbol' => 'Afl.',
      'name' => t('Aruban Florin'),
      'numeric_code' => '533',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Guilder'),
    ),
    'AZN' => array(
      'code' => 'AZN',
      'symbol' => 'man.',
      'name' => t('Azerbaijanian Manat'),
      'minor_unit' => t('Qəpik'),
      'major_unit' => t('New Manat'),
    ),
    'BAM' => array(
      'code' => 'BAM',
      'symbol' => 'KM',
      'name' => t('Bosnia-Herzegovina Convertible Mark'),
      'numeric_code' => '977',
      'minor_unit' => t('Fening'),
      'major_unit' => t('Convertible Marka'),
    ),
    'BBD' => array(
      'code' => 'BBD',
      'symbol' => 'Bds$',
      'name' => t('Barbadian Dollar'),
      'numeric_code' => '052',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'BDT' => array(
      'code' => 'BDT',
      'symbol' => 'Tk',
      'name' => t('Bangladeshi Taka'),
      'numeric_code' => '050',
      'minor_unit' => t('Paisa'),
      'major_unit' => t('Taka'),
    ),
   'BGN' => array(
     'code' => 'BGN',
     'symbol' => 'лв',
     'name' => t('Bulgarian lev'),
     'thousands_separator' => ' ',
     'decimal_separator' => ',',
     'symbol_placement' => 'after',
     'code_placement' => '',
     'numeric_code' => '975',
     'minor_unit' => t('Stotinka'),
     'major_unit' => t('Lev'),
    ),
    'BHD' => array(
      'code' => 'BHD',
      'symbol' => 'BD',
      'name' => t('Bahraini Dinar'),
      'decimals' => 3,
      'numeric_code' => '048',
      'minor_unit' => t('Fils'),
      'major_unit' => t('Dinar'),
    ),
    'BIF' => array(
      'code' => 'BIF',
      'symbol' => 'FBu',
      'name' => t('Burundian Franc'),
      'decimals' => 0,
      'numeric_code' => '108',
      'minor_unit' => t('Centime'),
      'major_unit' => t('Franc'),
    ),
    'BMD' => array(
      'code' => 'BMD',
      'symbol' => 'BD$',
      'name' => t('Bermudan Dollar'),
      'numeric_code' => '060',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'BND' => array(
      'code' => 'BND',
      'symbol' => 'BN$',
      'name' => t('Brunei Dollar'),
      'numeric_code' => '096',
      'minor_unit' => t('Sen'),
      'major_unit' => t('Dollar'),
    ),
    'BOB' => array(
      'code' => 'BOB',
      'symbol' => 'Bs',
      'name' => t('Bolivian Boliviano'),
      'numeric_code' => '068',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Bolivianos'),
    ),
    'BRL' => array(
      'code' => 'BRL',
      'symbol' => 'R$',
      'name' => t('Brazilian Real'),
      'numeric_code' => '986',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'thousands_separator' => '.',
      'decimal_separator' => ',',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Reais'),
    ),
    'BSD' => array(
      'code' => 'BSD',
      'symbol' => 'BS$',
      'name' => t('Bahamian Dollar'),
      'numeric_code' => '044',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'BTN' => array(
      'code' => 'BTN',
      'symbol' => 'Nu.',
      'name' => t('Bhutanese Ngultrum'),
      'numeric_code' => '064',
      'minor_unit' => t('Chetrum'),
      'major_unit' => t('Ngultrum'),
    ),
    'BWP' => array(
      'code' => 'BWP',
      'symbol' => 'BWP',
      'name' => t('Botswanan Pula'),
      'numeric_code' => '072',
      'minor_unit' => t('Thebe'),
      'major_unit' => t('Pulas'),
    ),
    'BYR' => array(
      'code' => 'BYR',
      'symbol' => 'руб.',
      'name' => t('Belarusian ruble'),
      'numeric_code' => '974',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'decimals' => 0,
      'thousands_separator' => ' ',
      'major_unit' => t('Ruble'),
    ),
    'BZD' => array(
      'code' => 'BZD',
      'symbol' => 'BZ$',
      'name' => t('Belize Dollar'),
      'numeric_code' => '084',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'CAD' => array(
      'code' => 'CAD',
      'symbol' => 'CA$',
      'name' => t('Canadian Dollar'),
      'numeric_code' => '124',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'CDF' => array(
      'code' => 'CDF',
      'symbol' => 'CDF',
      'name' => t('Congolese Franc'),
      'numeric_code' => '976',
      'minor_unit' => t('Centime'),
      'major_unit' => t('Franc'),
    ),
    'CHF' => array(
      'code' => 'CHF',
      'symbol' => 'Fr.',
      'name' => t('Swiss Franc'),
      'rounding_step' => '0.05',
      'numeric_code' => '756',
      'minor_unit' => t('Rappen'),
      'major_unit' => t('Franc'),
    ),
    'CLP' => array(
      'code' => 'CLP',
      'symbol' => 'CL$',
      'name' => t('Chilean Peso'),
      'decimals' => 0,
      'numeric_code' => '152',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Peso'),
    ),
    'CNY' => array(
      'code' => 'CNY',
      'symbol' => 'CN¥',
      'name' => t('Chinese Yuan Renminbi'),
      'numeric_code' => '156',
      'minor_unit' => t('Fe'),
      'major_unit' => t('Yuan Renminbi'),
    ),
    'COP' => array(
      'code' => 'COP',
      'symbol' => '$',
      'name' => t('Colombian Peso'),
      'decimals' => 0,
      'numeric_code' => '170',
      'symbol_placement' => 'before',
      'code_placement' => 'hidden',
      'thousands_separator' => '.',
      'decimal_separator' => ',',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Peso'),
    ),
    'CRC' => array(
      'code' => 'CRC',
      'symbol' => '¢',
      'name' => t('Costa Rican Colón'),
      'decimals' => 0,
      'numeric_code' => '188',
      'minor_unit' => t('Céntimo'),
      'major_unit' => t('Colón'),
    ),
    'CUC' => array(
      'code' => 'CUC',
      'symbol' => 'CUC$',
      'name' => t('Cuban Convertible Peso'),
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Peso'),
    ),
    'CUP' => array(
      'code' => 'CUP',
      'symbol' => 'CU$',
      'name' => t('Cuban Peso'),
      'numeric_code' => '192',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Peso'),
    ),
    'CVE' => array(
      'code' => 'CVE',
      'symbol' => 'CV$',
      'name' => t('Cape Verdean Escudo'),
      'numeric_code' => '132',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Escudo'),
    ),
    'CZK' => array(
      'code' => 'CZK',
      'symbol' => 'Kč',
      'name' => t('Czech Republic Koruna'),
      'numeric_code' => '203',
      'thousands_separator' => ' ',
      'decimal_separator' => ',',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Haléř'),
      'major_unit' => t('Koruna'),
    ),
    'DJF' => array(
      'code' => 'DJF',
      'symbol' => 'Fdj',
      'name' => t('Djiboutian Franc'),
      'numeric_code' => '262',
      'decimals' => 0,
      'minor_unit' => t('Centime'),
      'major_unit' => t('Franc'),
    ),
    'DKK' => array(
      'code' => 'DKK',
      'symbol' => 'kr.',
      'name' => t('Danish Krone'),
      'numeric_code' => '208',
      'thousands_separator' => ' ',
      'decimal_separator' => ',',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Øre'),
      'major_unit' => t('Kroner'),
    ),
    'DOP' => array(
      'code' => 'DOP',
      'symbol' => 'RD$',
      'name' => t('Dominican Peso'),
      'numeric_code' => '214',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Peso'),
    ),
    'DZD' => array(
      'code' => 'DZD',
      'symbol' => 'DA',
      'name' => t('Algerian Dinar'),
      'numeric_code' => '012',
      'minor_unit' => t('Santeem'),
      'major_unit' => t('Dinar'),
    ),
    'EEK' => array(
      'code' => 'EEK',
      'symbol' => 'Ekr',
      'name' => t('Estonian Kroon'),
      'thousands_separator' => ' ',
      'decimal_separator' => ',',
      'numeric_code' => '233',
      'minor_unit' => t('Sent'),
      'major_unit' => t('Krooni'),
    ),
    'EGP' => array(
      'code' => 'EGP',
      'symbol' => 'EG£',
      'name' => t('Egyptian Pound'),
      'numeric_code' => '818',
      'minor_unit' => t('Piastr'),
      'major_unit' => t('Pound'),
    ),
    'ERN' => array(
      'code' => 'ERN',
      'symbol' => 'Nfk',
      'name' => t('Eritrean Nakfa'),
      'numeric_code' => '232',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Nakfa'),
    ),
    'ETB' => array(
      'code' => 'ETB',
      'symbol' => 'Br',
      'name' => t('Ethiopian Birr'),
      'numeric_code' => '230',
      'minor_unit' => t('Santim'),
      'major_unit' => t('Birr'),
    ),
    'EUR' => array(
      'code' => 'EUR',
      'symbol' => '€',
      'name' => t('Euro'),
      'thousands_separator' => ' ',
      'decimal_separator' => ',',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'numeric_code' => '978',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Euro'),
    ),
    'FJD' => array(
      'code' => 'FJD',
      'symbol' => 'FJ$',
      'name' => t('Fijian Dollar'),
      'numeric_code' => '242',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'FKP' => array(
      'code' => 'FKP',
      'symbol' => 'FK£',
      'name' => t('Falkland Islands Pound'),
      'numeric_code' => '238',
      'minor_unit' => t('Penny'),
      'major_unit' => t('Pound'),
    ),
    'GBP' => array(
      'code' => 'GBP',
      'symbol' => '£',
      'name' => t('British Pound Sterling'),
      'numeric_code' => '826',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Penny'),
      'major_unit' => t('Pound'),
    ),
    'GHS' => array(
      'code' => 'GHS',
      'symbol' => 'GH₵',
      'name' => t('Ghanaian Cedi'),
      'minor_unit' => t('Pesewa'),
      'major_unit' => t('Cedi'),
    ),
    'GIP' => array(
      'code' => 'GIP',
      'symbol' => 'GI£',
      'name' => t('Gibraltar Pound'),
      'numeric_code' => '292',
      'minor_unit' => t('Penny'),
      'major_unit' => t('Pound'),
    ),
    'GMD' => array(
      'code' => 'GMD',
      'symbol' => 'GMD',
      'name' => t('Gambian Dalasi'),
      'numeric_code' => '270',
      'minor_unit' => t('Butut'),
      'major_unit' => t('Dalasis'),
    ),
    'GNF' => array(
      'code' => 'GNF',
      'symbol' => 'FG',
      'name' => t('Guinean Franc'),
      'decimals' => 0,
      'numeric_code' => '324',
      'minor_unit' => t('Centime'),
      'major_unit' => t('Franc'),
    ),
    'GTQ' => array(
      'code' => 'GTQ',
      'symbol' => 'GTQ',
      'name' => t('Guatemalan Quetzal'),
      'numeric_code' => '320',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Quetzales'),
    ),
    'GYD' => array(
      'code' => 'GYD',
      'symbol' => 'GY$',
      'name' => t('Guyanaese Dollar'),
      'decimals' => 0,
      'numeric_code' => '328',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'HKD' => array(
      'code' => 'HKD',
      'symbol' => 'HK$',
      'name' => t('Hong Kong Dollar'),
      'numeric_code' => '344',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'HNL' => array(
      'code' => 'HNL',
      'symbol' => 'HNL',
      'name' => t('Honduran Lempira'),
      'numeric_code' => '340',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Lempiras'),
    ),
    'HRK' => array(
      'code' => 'HRK',
      'symbol' => 'kn',
      'name' => t('Croatian Kuna'),
      'numeric_code' => '191',
      'minor_unit' => t('Lipa'),
      'major_unit' => t('Kuna'),
    ),
    'HTG' => array(
      'code' => 'HTG',
      'symbol' => 'HTG',
      'name' => t('Haitian Gourde'),
      'numeric_code' => '332',
      'minor_unit' => t('Centime'),
      'major_unit' => t('Gourde'),
    ),
    'HUF' => array(
      'code' => 'HUF',
      'symbol' => 'Ft',
      'name' => t('Hungarian Forint'),
      'numeric_code' => '348',
      'decimal_separator' => ',',
      'thousands_separator' => ' ',
      'decimals' => 0,
      'symbol_placement' => 'after',
      'code_placement' => '',
      'major_unit' => t('Forint'),
    ),
    'IDR' => array(
      'code' => 'IDR',
      'symbol' => 'Rp',
      'name' => t('Indonesian Rupiah'),
      'decimals' => 0,
      'numeric_code' => '360',
      'minor_unit' => t('Sen'),
      'major_unit' => t('Rupiahs'),
    ),
    'ILS' => array(
      'code' => 'ILS',
      'symbol' => '₪',
      'name' => t('Israeli New Shekel'),
      'numeric_code' => '376',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Agora'),
      'major_unit' => t('New Shekels'),
    ),
    'INR' => array(
      'code' => 'INR',
      'symbol' => 'Rs',
      'name' => t('Indian Rupee'),
      'numeric_code' => '356',
      'minor_unit' => t('Paisa'),
      'major_unit' => t('Rupee'),
    ),
    'IRR' => array(
      'code' => 'IRR',
      'symbol' => '﷼',
      'name' => t('Iranian Rial'),
      'numeric_code' => '364',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Rial'),
      'major_unit' => t('Toman'),
    ),
    'ISK' => array(
      'code' => 'ISK',
      'symbol' => 'Ikr',
      'name' => t('Icelandic Króna'),
      'decimals' => 0,
      'thousands_separator' => ' ',
      'numeric_code' => '352',
      'minor_unit' => t('Eyrir'),
      'major_unit' => t('Kronur'),
    ),
    'JMD' => array(
      'code' => 'JMD',
      'symbol' => 'J$',
      'name' => t('Jamaican Dollar'),
      'numeric_code' => '388',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'JOD' => array(
      'code' => 'JOD',
      'symbol' => 'JD',
      'name' => t('Jordanian Dinar'),
      'decimals' => 3,
      'numeric_code' => '400',
      'minor_unit' => t('Piastr'),
      'major_unit' => t('Dinar'),
    ),
    'JPY' => array(
      'code' => 'JPY',
      'symbol' => '¥',
      'name' => t('Japanese Yen'),
      'decimals' => 0,
      'numeric_code' => '392',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Sen'),
      'major_unit' => t('Yen'),
    ),
    'KES' => array(
      'code' => 'KES',
      'symbol' => 'Ksh',
      'name' => t('Kenyan Shilling'),
      'numeric_code' => '404',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Shilling'),
    ),
    'KGS' => array(
      'code' => 'KGS',
      'code_placement' => '',
      'symbol' => 'сом',
      'symbol_placement' => 'after',
      'name' => t('Kyrgyzstani Som'),
      'numeric_code' => '417',
      'thousands_separator' => '',
      'major_unit' => t('Som'),
      'minor_unit' => t('Tyiyn'),
    ),
    'KMF' => array(
      'code' => 'KMF',
      'symbol' => 'CF',
      'name' => t('Comorian Franc'),
      'decimals' => 0,
      'numeric_code' => '174',
      'minor_unit' => t('Centime'),
      'major_unit' => t('Franc'),
    ),
    'KRW' => array(
      'code' => 'KRW',
      'symbol' => '₩',
      'name' => t('South Korean Won'),
      'decimals' => 0,
      'numeric_code' => '410',
      'minor_unit' => t('Jeon'),
      'major_unit' => t('Won'),
    ),
    'KWD' => array(
      'code' => 'KWD',
      'symbol' => 'KD',
      'name' => t('Kuwaiti Dinar'),
      'decimals' => 3,
      'numeric_code' => '414',
      'minor_unit' => t('Fils'),
      'major_unit' => t('Dinar'),
    ),
    'KYD' => array(
      'code' => 'KYD',
      'symbol' => 'KY$',
      'name' => t('Cayman Islands Dollar'),
      'numeric_code' => '136',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'KZT' => array(
      'code' => 'KZT',
      'symbol' => 'тг.',
      'name' => t('Kazakhstani tenge'),
      'numeric_code' => '398',
      'thousands_separator' => ' ',
      'decimal_separator' => ',',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Tiyn'),
      'major_unit' => t('Tenge'),
    ),
    'LAK' => array(
      'code' => 'LAK',
      'symbol' => '₭N',
      'name' => t('Laotian Kip'),
      'decimals' => 0,
      'numeric_code' => '418',
      'minor_unit' => t('Att'),
      'major_unit' => t('Kips'),
    ),
    'LBP' => array(
      'code' => 'LBP',
      'symbol' => 'LB£',
      'name' => t('Lebanese Pound'),
      'decimals' => 0,
      'numeric_code' => '422',
      'minor_unit' => t('Piastre'),
      'major_unit' => t('Pound'),
    ),
    'LKR' => array(
      'code' => 'LKR',
      'symbol' => 'SLRs',
      'name' => t('Sri Lanka Rupee'),
      'numeric_code' => '144',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Rupee'),
    ),
    'LRD' => array(
      'code' => 'LRD',
      'symbol' => 'L$',
      'name' => t('Liberian Dollar'),
      'numeric_code' => '430',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'LSL' => array(
      'code' => 'LSL',
      'symbol' => 'LSL',
      'name' => t('Lesotho Loti'),
      'numeric_code' => '426',
      'minor_unit' => t('Sente'),
      'major_unit' => t('Loti'),
    ),
    'LTL' => array(
      'code' => 'LTL',
      'symbol' => 'Lt',
      'name' => t('Lithuanian Litas'),
      'numeric_code' => '440',
      'minor_unit' => t('Centas'),
      'major_unit' => t('Litai'),
    ),
    'LVL' => array(
      'code' => 'LVL',
      'symbol' => 'Ls',
      'name' => t('Latvian Lats'),
      'numeric_code' => '428',
      'minor_unit' => t('Santims'),
      'major_unit' => t('Lati'),
    ),
    'LYD' => array(
      'code' => 'LYD',
      'symbol' => 'LD',
      'name' => t('Libyan Dinar'),
      'decimals' => 3,
      'numeric_code' => '434',
      'minor_unit' => t('Dirham'),
      'major_unit' => t('Dinar'),
    ),
    'MAD' => array(
      'code' => 'MAD',
      'symbol' => ' Dhs',
      'name' => t('Moroccan Dirham'),
      'numeric_code' => '504',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Santimat'),
      'major_unit' => t('Dirhams'),
    ),
    'MDL' => array(
      'code' => 'MDL',
      'symbol' => 'MDL',
      'name' => t('Moldovan leu'),
      'symbol_placement' => 'after',
      'numeric_code' => '498',
      'code_placement' => '',
      'minor_unit' => t('bani'),
      'major_unit' => t('Lei'),
    ),
    'MMK' => array(
      'code' => 'MMK',
      'symbol' => 'MMK',
      'name' => t('Myanma Kyat'),
      'decimals' => 0,
      'numeric_code' => '104',
      'minor_unit' => t('Pya'),
      'major_unit' => t('Kyat'),
    ),
    'MNT' => array(
      'code' => 'MNT',
      'symbol' => '₮',
      'name' => t('Mongolian Tugrik'),
      'decimals' => 0,
      'numeric_code' => '496',
      'minor_unit' => t('Möngö'),
      'major_unit' => t('Tugriks'),
    ),
    'MOP' => array(
      'code' => 'MOP',
      'symbol' => 'MOP$',
      'name' => t('Macanese Pataca'),
      'numeric_code' => '446',
      'minor_unit' => t('Avo'),
      'major_unit' => t('Pataca'),
    ),
    'MRO' => array(
      'code' => 'MRO',
      'symbol' => 'UM',
      'name' => t('Mauritanian Ouguiya'),
      'decimals' => 0,
      'numeric_code' => '478',
      'minor_unit' => t('Khoums'),
      'major_unit' => t('Ouguiya'),
    ),
    'MTP' => array(
      'code' => 'MTP',
      'symbol' => 'MT£',
      'name' => t('Maltese Pound'),
      'minor_unit' => t('Shilling'),
      'major_unit' => t('Pound'),
    ),
    'MUR' => array(
      'code' => 'MUR',
      'symbol' => 'MURs',
      'name' => t('Mauritian Rupee'),
      'decimals' => 0,
      'numeric_code' => '480',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Rupee'),
    ),
    'MXN' => array(
      'code' => 'MXN',
      'symbol' => '$',
      'name' => t('Mexican Peso'),
      'numeric_code' => '484',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Peso'),
    ),
    'MYR' => array(
      'code' => 'MYR',
      'symbol' => 'RM',
      'name' => t('Malaysian Ringgit'),
      'numeric_code' => '458',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Sen'),
      'major_unit' => t('Ringgits'),
    ),
    'MZN' => array(
      'code' => 'MZN',
      'symbol' => 'MTn',
      'name' => t('Mozambican Metical'),
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Metical'),
    ),
    'NAD' => array(
      'code' => 'NAD',
      'symbol' => 'N$',
      'name' => t('Namibian Dollar'),
      'numeric_code' => '516',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'NGN' => array(
      'code' => 'NGN',
      'symbol' => '₦',
      'name' => t('Nigerian Naira'),
      'numeric_code' => '566',
      'minor_unit' => t('Kobo'),
      'major_unit' => t('Naira'),
    ),
    'NIO' => array(
      'code' => 'NIO',
      'symbol' => 'C$',
      'name' => t('Nicaraguan Cordoba Oro'),
      'numeric_code' => '558',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Cordoba'),
    ),
    'NOK' => array(
      'code' => 'NOK',
      'symbol' => 'Nkr',
      'name' => t('Norwegian Krone'),
      'thousands_separator' => ' ',
      'decimal_separator' => ',',
      'numeric_code' => '578',
      'minor_unit' => t('Øre'),
      'major_unit' => t('Krone'),
    ),
    'NPR' => array(
      'code' => 'NPR',
      'symbol' => 'NPRs',
      'name' => t('Nepalese Rupee'),
      'numeric_code' => '524',
      'minor_unit' => t('Paisa'),
      'major_unit' => t('Rupee'),
    ),
    'NZD' => array(
      'code' => 'NZD',
      'symbol' => 'NZ$',
      'name' => t('New Zealand Dollar'),
      'numeric_code' => '554',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'PAB' => array(
      'code' => 'PAB',
      'symbol' => 'B/.',
      'name' => t('Panamanian Balboa'),
      'numeric_code' => '590',
      'minor_unit' => t('Centésimo'),
      'major_unit' => t('Balboa'),
    ),
    'PEN' => array(
      'code' => 'PEN',
      'symbol' => 'S/.',
      'name' => t('Peruvian Nuevo Sol'),
      'numeric_code' => '604',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Céntimo'),
      'major_unit' => t('Nuevos Sole'),
    ),
    'PGK' => array(
      'code' => 'PGK',
      'symbol' => 'PGK',
      'name' => t('Papua New Guinean Kina'),
      'numeric_code' => '598',
      'minor_unit' => t('Toea'),
      'major_unit' => t('Kina '),
    ),
    'PHP' => array(
      'code' => 'PHP',
      'symbol' => '₱',
      'name' => t('Philippine Peso'),
      'numeric_code' => '608',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Peso'),
    ),
    'PKR' => array(
      'code' => 'PKR',
      'symbol' => 'PKRs',
      'name' => t('Pakistani Rupee'),
      'decimals' => 0,
      'numeric_code' => '586',
      'minor_unit' => t('Paisa'),
      'major_unit' => t('Rupee'),
    ),
    'PLN' => array(
      'code' => 'PLN',
      'symbol' => 'zł',
      'name' => t('Polish Złoty'),
      'decimal_separator' => ',',
      'thousands_separator' => ' ',
      'numeric_code' => '985',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Grosz'),
      'major_unit' => t('Złotych'),
    ),
    'PYG' => array(
      'code' => 'PYG',
      'symbol' => '₲',
      'name' => t('Paraguayan Guarani'),
      'decimals' => 0,
      'numeric_code' => '600',
      'minor_unit' => t('Céntimo'),
      'major_unit' => t('Guarani'),
    ),
    'QAR' => array(
      'code' => 'QAR',
      'symbol' => 'QR',
      'name' => t('Qatari Rial'),
      'numeric_code' => '634',
      'minor_unit' => t('Dirham'),
      'major_unit' => t('Rial'),
    ),
    'RHD' => array(
      'code' => 'RHD',
      'symbol' => 'RH$',
      'name' => t('Rhodesian Dollar'),
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'RON' => array(
      'code' => 'RON',
      'symbol' => 'RON',
      'name' => t('Romanian Leu'),
      'minor_unit' => t('Ban'),
      'major_unit' => t('Leu'),
    ),
    'RSD' => array(
      'code' => 'RSD',
      'symbol' => 'din.',
      'name' => t('Serbian Dinar'),
      'decimals' => 0,
      'minor_unit' => t('Para'),
      'major_unit' => t('Dinars'),
    ),
    'RUB' => array(
      'code' => 'RUB',
      'symbol' => 'руб.',
      'name' => t('Russian Ruble'),
      'thousands_separator' => ' ',
      'decimal_separator' => ',',
      'numeric_code' => '643',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Kopek'),
      'major_unit' => t('Ruble'),
    ),
    'SAR' => array(
      'code' => 'SAR',
      'symbol' => 'SR',
      'name' => t('Saudi Riyal'),
      'numeric_code' => '682',
      'minor_unit' => t('Hallallah'),
      'major_unit' => t('Riyals'),
    ),
    'SBD' => array(
      'code' => 'SBD',
      'symbol' => 'SI$',
      'name' => t('Solomon Islands Dollar'),
      'numeric_code' => '090',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'SCR' => array(
      'code' => 'SCR',
      'symbol' => 'SRe',
      'name' => t('Seychellois Rupee'),
      'numeric_code' => '690',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Rupee'),
    ),
    'SDD' => array(
      'code' => 'SDD',
      'symbol' => 'LSd',
      'name' => t('Old Sudanese Dinar'),
      'numeric_code' => '736',
      'minor_unit' => t('None'),
      'major_unit' => t('Dinar'),
    ),
    'SEK' => array(
      'code' => 'SEK',
      'symbol' => 'kr',
      'name' => t('Swedish Krona'),
      'numeric_code' => '752',
      'thousands_separator' => ' ',
      'decimal_separator' => ',',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Öre'),
      'major_unit' => t('Kronor'),
    ),
    'SGD' => array(
      'code' => 'SGD',
      'symbol' => 'S$',
      'name' => t('Singapore Dollar'),
      'numeric_code' => '702',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'SHP' => array(
      'code' => 'SHP',
      'symbol' => 'SH£',
      'name' => t('Saint Helena Pound'),
      'numeric_code' => '654',
      'minor_unit' => t('Penny'),
      'major_unit' => t('Pound'),
    ),
    'SLL' => array(
      'code' => 'SLL',
      'symbol' => 'Le',
      'name' => t('Sierra Leonean Leone'),
      'decimals' => 0,
      'numeric_code' => '694',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Leone'),
    ),
    'SOS' => array(
      'code' => 'SOS',
      'symbol' => 'Ssh',
      'name' => t('Somali Shilling'),
      'decimals' => 0,
      'numeric_code' => '706',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Shilling'),
    ),
    'SRD' => array(
      'code' => 'SRD',
      'symbol' => 'SR$',
      'name' => t('Surinamese Dollar'),
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'SRG' => array(
      'code' => 'SRG',
      'symbol' => 'Sf',
      'name' => t('Suriname Guilder'),
      'numeric_code' => '740',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Guilder'),
    ),
    'STD' => array(
      'code' => 'STD',
      'symbol' => 'Db',
      'name' => t('São Tomé and Príncipe Dobra'),
      'decimals' => 0,
      'numeric_code' => '678',
      'minor_unit' => t('Cêntimo'),
      'major_unit' => t('Dobra'),
    ),
    'SYP' => array(
      'code' => 'SYP',
      'symbol' => 'SY£',
      'name' => t('Syrian Pound'),
      'decimals' => 0,
      'numeric_code' => '760',
      'minor_unit' => t('Piastre'),
      'major_unit' => t('Pound'),
    ),
    'SZL' => array(
      'code' => 'SZL',
      'symbol' => 'SZL',
      'name' => t('Swazi Lilangeni'),
      'numeric_code' => '748',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Lilangeni'),
    ),
    'THB' => array(
      'code' => 'THB',
      'symbol' => '฿',
      'name' => t('Thai Baht'),
      'numeric_code' => '764',
      'minor_unit' => t('Satang'),
      'major_unit' => t('Baht'),
    ),
    'TND' => array(
      'code' => 'TND',
      'symbol' => 'DT',
      'name' => t('Tunisian Dinar'),
      'decimals' => 3,
      'numeric_code' => '788',
      'minor_unit' => t('Millime'),
      'major_unit' => t('Dinar'),
    ),
    'TOP' => array(
      'code' => 'TOP',
      'symbol' => 'T$',
      'name' => t('Tongan Paʻanga'),
      'numeric_code' => '776',
      'minor_unit' => t('Senit'),
      'major_unit' => t('Paʻanga'),
    ),
    'TRY' => array(
      'code' => 'TRY',
      'symbol' => 'TL',
      'name' => t('Turkish Lira'),
      'numeric_code' => '949',
      'thousands_separator' => '.',
      'decimal_separator' => ',',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Kurus'),
      'major_unit' => t('Lira'),
    ),
    'TTD' => array(
      'code' => 'TTD',
      'symbol' => 'TT$',
      'name' => t('Trinidad and Tobago Dollar'),
      'numeric_code' => '780',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'TWD' => array(
      'code' => 'TWD',
      'symbol' => 'NT$',
      'name' => t('New Taiwan Dollar'),
      'numeric_code' => '901',
      'minor_unit' => t('Cent'),
      'major_unit' => t('New Dollar'),
    ),
    'TZS' => array(
      'code' => 'TZS',
      'symbol' => 'TSh',
      'name' => t('Tanzanian Shilling'),
      'decimals' => 0,
      'numeric_code' => '834',
      'minor_unit' => t('Senti'),
      'major_unit' => t('Shilling'),
    ),
    'UAH' => array(
      'code' => 'UAH',
      'symbol' => 'грн.',
      'name' => t('Ukrainian Hryvnia'),
      'numeric_code' => '980',
      'thousands_separator' => '',
      'decimal_separator' => '.',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Kopiyka'),
      'major_unit' => t('Hryvnia'),
    ),
    'UGX' => array(
      'code' => 'UGX',
      'symbol' => 'USh',
      'name' => t('Ugandan Shilling'),
      'decimals' => 0,
      'numeric_code' => '800',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Shilling'),
    ),
    'USD' => array(
      'code' => 'USD',
      'symbol' => '$',
      'name' => t('United States Dollar'),
      'numeric_code' => '840',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'UYU' => array(
      'code' => 'UYU',
      'symbol' => '$U',
      'name' => t('Uruguayan Peso'),
      'numeric_code' => '858',
      'minor_unit' => t('Centésimo'),
      'major_unit' => t('Peso'),
    ),
    'VEF' => array(
      'code' => 'VEF',
      'symbol' => 'Bs.F.',
      'name' => t('Venezuelan Bolívar Fuerte'),
      'minor_unit' => t('Céntimo'),
      'major_unit' => t('Bolivares Fuerte'),
    ),
    'VND' => array(
      'code' => 'VND',
      'symbol' => 'đ',
      'name' => t('Vietnamese Dong'),
      'decimals' => 0,
      'thousands_separator' => '.',
      'symbol_placement' => 'after',
      'symbol_spacer' => '',
      'code_placement' => '',
      'numeric_code' => '704',
      'minor_unit' => t('Hà'),
      'major_unit' => t('Dong'),
    ),
    'VUV' => array(
      'code' => 'VUV',
      'symbol' => 'VT',
      'name' => t('Vanuatu Vatu'),
      'decimals' => 0,
      'numeric_code' => '548',
      'major_unit' => t('Vatu'),
    ),
    'WST' => array(
      'code' => 'WST',
      'symbol' => 'WS$',
      'name' => t('Samoan Tala'),
      'numeric_code' => '882',
      'minor_unit' => t('Sene'),
      'major_unit' => t('Tala'),
    ),
    'XAF' => array(
      'code' => 'XAF',
      'symbol' => 'FCFA',
      'name' => t('CFA Franc BEAC'),
      'decimals' => 0,
      'numeric_code' => '950',
      'minor_unit' => t('Centime'),
      'major_unit' => t('Franc'),
    ),
    'XCD' => array(
      'code' => 'XCD',
      'symbol' => 'EC$',
      'name' => t('East Caribbean Dollar'),
      'numeric_code' => '951',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'XOF' => array(
      'code' => 'XOF',
      'symbol' => 'CFA',
      'name' => t('CFA Franc BCEAO'),
      'decimals' => 0,
      'numeric_code' => '952',
      'minor_unit' => t('Centime'),
      'major_unit' => t('Franc'),
    ),
    'XPF' => array(
      'code' => 'XPF',
      'symbol' => 'CFPF',
      'name' => t('CFP Franc'),
      'decimals' => 0,
      'numeric_code' => '953',
      'minor_unit' => t('Centime'),
      'major_unit' => t('Franc'),
    ),
    'YER' => array(
      'code' => 'YER',
      'symbol' => 'YR',
      'name' => t('Yemeni Rial'),
      'decimals' => 0,
      'numeric_code' => '886',
      'minor_unit' => t('Fils'),
      'major_unit' => t('Rial'),
    ),
    'ZAR' => array(
      'code' => 'ZAR',
      'symbol' => 'R',
      'name' => t('South African Rand'),
      'numeric_code' => '710',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Rand'),
    ),
    'ZMK' => array(
      'code' => 'ZMK',
      'symbol' => 'ZK',
      'name' => t('Zambian Kwacha'),
      'decimals' => 0,
      'numeric_code' => '894',
      'minor_unit' => t('Ngwee'),
      'major_unit' => t('Kwacha'),
    ),
  );
}

/**/


function pinboard_helper_mobile_getuser() {
  global $user;
  print $user->uid;
  exit();
}